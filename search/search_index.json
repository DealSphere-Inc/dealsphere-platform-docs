{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DealSphere Platform Documentation","text":"<p>Welcome to the official documentation for the DealSphere platform. This repository is the single source for all project architecture decisions, technical implementation details, product requirements, quality assurance artifacts, and release process documentation.</p>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<ul> <li> <p>Architecture Decision Records (ADRs)   All critical technology and architecture choices, with a complete ADR index and single-decision ADR files.</p> </li> <li> <p>Planning   Project planning documents, including phase plans and key milestone roadmaps.</p> </li> <li> <p>Product   Product requirements and versioned PRDs.</p> </li> <li> <p>QA &amp; Compliance   Functional test cases, acceptance/traceability matrices, and quality documentation.</p> </li> <li> <p>Technical Documentation   Implementation plans, demo guides, stakeholder summaries, technology landscape, and the comprehensive release process.</p> </li> </ul>"},{"location":"#quick-navigation","title":"\ud83d\udd17 Quick Navigation","text":"<ul> <li>ADR Master Index</li> <li>Phase 1 Development Plan</li> <li>Phase 1 PRD (Product Requirements)</li> <li>QA Suite Overview</li> <li>Release Process</li> <li>Technical Plan</li> </ul> <p>See more in each section directory above.</p>"},{"location":"#contributing","title":"\ud83d\udea6 Contributing","text":"<ul> <li>To propose a process change, add an ADR or update the relevant doc and submit a Pull Request.</li> <li>Please use concise language and cross-link related docs.</li> <li>Follow the ADR Template and directory naming standards.</li> </ul>"},{"location":"#getting-help","title":"\ud83d\udca1 Getting Help","text":"<ul> <li>Review the relevant ADRs and technical plans first.</li> <li>Use directory README files for subtopics (e.g., QA or ADRs).</li> <li>Contact the core platform team as listed in our internal systems for architectural questions.</li> </ul> <p>Last updated: August 16, 2025</p>"},{"location":"adr/","title":"Architecture Decision Records (ADRs)","text":"<p>This directory contains Architecture Decision Records for the DealSphere platform. ADRs document important architectural decisions made during platform development.</p>"},{"location":"adr/#index","title":"Index","text":"ADR Title Status Tags Date ADR-0001 Java 17 as Language/Runtime Accepted <code>language</code>, <code>runtime</code>, <code>java</code> 2025-08-13 ADR-0002 Microservices Architecture Accepted <code>architecture</code>, <code>microservices</code> 2025-08-13 ADR-0003 HTTP for Inter-Service Communication Accepted <code>communication</code>, <code>http</code>, <code>microservices</code> 2025-08-13 ADR-0004 GraphQL via Apollo Gateway for External API Accepted <code>api</code>, <code>graphql</code>, <code>apollo</code> 2025-08-13 ADR-0005 R3 Corda 5 as DLT Platform Accepted <code>dlt</code>, <code>corda</code>, <code>blockchain</code> 2025-08-13 ADR-0006 Docker Compose for Phase 1 Orchestration Accepted <code>orchestration</code>, <code>docker</code>, <code>compose</code> 2025-08-13 ADR-0007 Service Framework Default Selection Open <code>framework</code>, <code>spring</code>, <code>services</code> 2025-08-13 ADR-0008 Database Selection Open <code>database</code>, <code>postgresql</code>, <code>storage</code> 2025-08-13 ADR-0009 Schema Migration Strategy Open <code>migrations</code>, <code>flyway</code>, <code>database</code> 2025-08-13 ADR-0010 Identity Provider and Claims Strategy Open <code>identity</code>, <code>authentication</code>, <code>claims</code> 2025-08-13 ADR-0011 Authorization Strategy Open <code>authorization</code>, <code>security</code>, <code>rbac</code> 2025-08-13 ADR-0012 Secrets Management Open <code>secrets</code>, <code>security</code>, <code>vault</code> 2025-08-13 ADR-0013 Observability Stack Open <code>observability</code>, <code>monitoring</code>, <code>logging</code> 2025-08-13 ADR-0014 Rate Limiting Strategy Open <code>rate-limiting</code>, <code>api</code>, <code>throttling</code> 2025-08-13 ADR-0015 Feature Flags System Open <code>feature-flags</code>, <code>configuration</code>, <code>deployment</code> 2025-08-13 ADR-0016 Caching Strategy Open <code>caching</code>, <code>performance</code>, <code>redis</code> 2025-08-13 ADR-0017 Search Implementation Open <code>search</code>, <code>elasticsearch</code>, <code>indexing</code> 2025-08-13 ADR-0018 On-Ledger DLT Implementation Details Open <code>dlt</code>, <code>ledger</code>, <code>transactions</code> 2025-08-13 ADR-0019 DLT Access Patterns Open <code>dlt</code>, <code>access</code>, <code>integration</code> 2025-08-13 ADR-0020 GraphQL Federation Conventions Open <code>graphql</code>, <code>federation</code>, <code>schema</code> 2025-08-13 ADR-0021 Protobuf IDL Versioning Strategy Accepted <code>protobuf</code>, <code>versioning</code>, <code>idl</code> 2025-08-13 ADR-0022 Connection Pool Budget Management Open <code>connections</code>, <code>pooling</code>, <code>resources</code> 2025-08-13 ADR-0023 Persisted Queries and Batching Open <code>graphql</code>, <code>queries</code>, <code>performance</code> 2025-08-13 ADR-0024 Multi-Tenant Baseline Strategy Open <code>multi-tenancy</code>, <code>isolation</code>, <code>security</code> 2025-08-13 ADR-0025 Event Streaming Platform Open <code>events</code>, <code>streaming</code>, <code>kafka</code> 2025-08-13"},{"location":"adr/#adr-process","title":"ADR Process","text":""},{"location":"adr/#status-definitions","title":"Status Definitions","text":"<ul> <li>Accepted: Decision has been finalized and is in actual use</li> <li>Open: Decision is under consideration or deferred; current choice documented with alternatives and revisit triggers</li> <li>Deprecated: Decision is no longer applicable</li> <li>Superseded: Decision has been replaced by a newer ADR</li> </ul>"},{"location":"adr/#creating-adrs","title":"Creating ADRs","text":""},{"location":"adr/#step-by-step-procedure","title":"Step-by-Step Procedure","text":"<ol> <li>Copy template: Copy <code>docs/adr/ADR-0000-template.md</code> to new file <code>ADR-XXXX-&lt;kebab-short-title&gt;.md</code></li> <li>Fill required sections: Complete all required sections, maintaining bolding conventions from template</li> <li>Format Related ADRs: Use number-only link text followed by short title (e.g., <code>[0001](ADR-0001-java-17-runtime.md) Java 17 Runtime</code>)</li> <li>Add to ADR index: Update this README.md index table if applicable</li> <li>Open PR: Submit pull request with completed ADR for review</li> </ol>"},{"location":"adr/#general-guidelines","title":"General Guidelines","text":"<ol> <li>Use chronological numbering (ADR-XXXX)</li> <li>Include relevant tags for easy lookup</li> <li>For Open ADRs, document:</li> <li>Current choice (\"for now\" selection)</li> <li>Deferred alternative(s)</li> <li>Revisit trigger conditions</li> <li>Target sprint for formal decision</li> <li>Guardrails for keeping choices reversible</li> </ol>"},{"location":"adr/#tags","title":"Tags","text":"<p>Common tags for categorization: - <code>architecture</code>: Overall system architecture decisions - <code>database</code>: Data storage and persistence - <code>api</code>: API design and protocols - <code>security</code>: Security-related decisions - <code>performance</code>: Performance optimization - <code>monitoring</code>: Observability and monitoring - <code>deployment</code>: Deployment and infrastructure - <code>integration</code>: System integration patterns</p>"},{"location":"adr/ADR-0000-template/","title":"ADR-XXXX:  <ul> <li>Author: @author</li> <li>Status: [Draft | Proposed | Accepted | Rejected | Deprecated | Superseded by ADR-XXXX]</li> <li>Date: YYYY-MM-DD</li> <li>Deciders: @name1, @name2, @name3</li> <li>Technical Story: [optional link to ticket/issue]</li> <li>Tags: [tag1, tag2, tag3]</li> </ul>","text":""},{"location":"adr/ADR-0000-template/#context","title":"Context","text":"<p>What is the issue that we're seeing that is motivating this decision or change?</p> <p>[Description of the problem space and why a decision needs to be made]</p>"},{"location":"adr/ADR-0000-template/#decision","title":"Decision","text":"<p>What is the change that we're proposing and/or doing?</p> <p>[Description of the solution/approach being chosen]</p> <p>For now: - [Placeholder for current implementation approach] - [Placeholder for immediate next steps] - [Placeholder for temporary measures]</p>"},{"location":"adr/ADR-0000-template/#rationale","title":"Rationale","text":"<p>Why is this the right decision given our architectural pillars?</p>"},{"location":"adr/ADR-0000-template/#rationale-pillars","title":"Rationale Pillars","text":""},{"location":"adr/ADR-0000-template/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 2 (e.g., Ecosystem Readiness)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 3 (e.g., Team Proficiency and Velocity)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 4 (e.g., Modern Features without migration burden)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 5 (e.g., Risk Management)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 6 (e.g., Upgrade Path Considerations)</p> </li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0000-template/#deferred-alternatives","title":"Deferred Alternatives","text":"<p>What alternatives are we deferring for future consideration?</p> <p>Alternative: [Name] - Trigger: [What condition would make us reconsider this?] - Timeline: [When should we revisit this?] - Reason for deferral: [Why not now?]</p> <p>Alternative: [Name] - Trigger: [What condition would make us reconsider this?] - Timeline: [When should we revisit this?] - Reason for deferral: [Why not now?]</p>"},{"location":"adr/ADR-0000-template/#rejected-alternatives","title":"Rejected Alternatives  <p>What alternatives are we rejecting?</p>  <ul> <li>Alternative X: Brief description and reason for rejection</li> <li>Alternative Y: Brief description and reason for rejection</li> </ul>","text":""},{"location":"adr/ADR-0000-template/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do because of this change?</p> <p>Positive: - Benefit 1 - Benefit 2 - ...</p> <p>Negative: - Risk 1 - Risk 2 - ...</p> <p>Mitigation Strategies: - ... - ...</p>"},{"location":"adr/ADR-0000-template/#revisit-triggers","title":"Revisit Triggers","text":"<ul> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li>Condition 2 (e.g., scheduled upgrade window with regression capacity)</li> </ul>"},{"location":"adr/ADR-0000-template/#target-sprint-for-formal-decision","title":"Target Sprint for Formal Decision","text":"<ul> <li>Target Sprint: Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0000-template/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0000-template/#must","title":"Must","text":"<ul> <li>Critical requirements that cannot be compromised</li> <li>Non-negotiable constraints</li> </ul>"},{"location":"adr/ADR-0000-template/#should","title":"Should","text":"<ul> <li>Important considerations that should be followed unless there's strong justification</li> <li>Best practices and preferred approaches</li> </ul>"},{"location":"adr/ADR-0000-template/#wont","title":"Won't","text":"<ul> <li>Explicit exclusions and out-of-scope items</li> <li>Things we deliberately choose not to do</li> </ul>"},{"location":"adr/ADR-0000-template/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review Pending Security Review Pending SRE Review Pending"},{"location":"adr/ADR-0000-template/#links","title":"Links","text":"<p>Review Before Deciding: - Performance benchmarks: /docs/benchmarks/api-performance.md - Security guidelines: /docs/security/security-guidelines.md - Architecture principles: /docs/architecture/principles.md - Technology radar: /docs/tech-radar/technology-radar.md - Cost analysis framework: /docs/cost-analysis/framework.md - Scalability patterns: /docs/patterns/scalability-patterns.md - Monitoring standards: /docs/monitoring/standards.md - Compliance requirements: /docs/compliance/requirements.md  </p> <p>Technology Landscape: [Link to relevant technology documentation]  </p> <p>Product/PRD: [Link to product requirements document]  </p> <p>Sprint Plan:[Link to sprint planning documentation]  </p> <p>Related ADRs: - [Link to related ADR] - [Link to related ADR]  </p>"},{"location":"adr/ADR-0001-java-17-runtime/","title":"ADR-0001: Java 17 as Language/Runtime","text":"<p>Author: @MysterTech Status: Accepted Date: 2025-08-13 Deciders: @MysterTech Technical Story: [optional link to ticket/issue] Tags: contracts, protobuf, versioning</p>"},{"location":"adr/ADR-0001-java-17-runtime/#context","title":"Context","text":"<ul> <li>We need a stable, well-supported runtime to deliver Phase 1 reliably; mixed Java versions and ad-hoc JDK choices across services are causing build inconsistencies, flaky CI pipelines, and environment drift between local/dev/prod.</li> <li>Several core frameworks (e.g., Spring Boot 3.x) and observability/tooling baselines are officially validated on Java 17; targeting newer LTS versions prematurely risks dependency incompatibilities and unplanned refactors during critical delivery windows.</li> <li>Teams are losing time troubleshooting version-specific quirks (toolchain, plugins, container images) due to lack of a single runtime standard, slowing onboarding and cross-service collaboration.</li> <li>Security updates and support timelines are harder to manage with heterogeneous runtimes; we need predictable LTS maintenance to meet operational and compliance expectations.</li> <li>Phase 1 emphasizes reliability and maintainability over adopting the newest features, so a proven LTS (Java 17) minimizes delivery risk while keeping a clear path for future upgrades.</li> </ul>"},{"location":"adr/ADR-0001-java-17-runtime/#decision","title":"Decision","text":"<p>Adopt Java 17 as the standard language/runtime for all backend services in Phase 1.</p>"},{"location":"adr/ADR-0001-java-17-runtime/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0001-java-17-runtime/#why-java-17-accepted","title":"Why Java 17 (Accepted)","text":"<p>Stability and Support (LTS) - Predictable maintenance and security updates aligned with enterprise expectations. - Reduced risk window during Phase 1 due to longer support horizon. - Vendor ecosystem (JDK vendors, container images) provides mature, stable distributions.</p> <p>Ecosystem Readiness - Frameworks   - Spring Boot 3.x and related starters are widely validated on Java 17.   - Strong ecosystem of testing libraries (JUnit 5, Testcontainers) supports Java 17. - Tooling   - Build tools (Gradle/Maven) natively support Java 17 toolchains.   - Observability agents (e.g., OpenTelemetry Java agent) and profilers are Java 17\u2013compatible. - CI/CD   - Cloud runners and base images for Java 17 are standard and maintained.</p> <p>Team Proficiency and Velocity - Familiarity with JVM reduces onboarding and avoids context switching. - Established patterns for debugging, profiling, and tuning on the JVM. - Minimizes polyglot operational overhead in Phase 1.</p> <p>Modern JVM Features (without near-term migration burden) - Language features   - Records for concise immutable data carriers.   - Sealed classes for controlled inheritance and domain modeling. - Runtime improvements   - Mature GC options (e.g., G1/ZGC) for latency-sensitive services.   - JVM performance optimizations benefiting microservices footprints.</p> <p>Risk Management for Phase 1 - Avoids introducing a new LTS upgrade path mid\u2011phase (e.g., Java 21) before dependency readiness. - Minimizes integration churn across multiple services and pipelines. - Keeps focus on delivering PRD-defined core flows rather than platform migrations.</p> <p>Upgrade Path Considerations - Structured path to Java 21 (or newer) when:   - Critical dependencies are certified and performance gains are tangible.   - A test window is scheduled to run regression/performance suites. - Build toolchain configured to ease future LTS bumps (centralized toolchain configuration).</p>"},{"location":"adr/ADR-0001-java-17-runtime/#alternatives-considered","title":"Alternatives Considered","text":"<p>Java 21 LTS - Pros: Newer LTS with incremental JVM improvements. - Cons: Some dependencies/tooling may lag certification; introducing an upgrade during Phase 1 could add risk and testing overhead.</p> <p>Kotlin-first on JVM - Pros: Language ergonomics (null-safety, coroutines, data classes). - Cons: Baseline language shift not required to meet PRD Phase 1 goals; can be introduced selectively later without changing runtime.</p> <p>Node/TypeScript - Pros: Rapid iteration for certain I/O-heavy services. - Cons: Polyglot complexity, diverges from JVM stack and team strengths; not necessary to meet Phase 1 scope.</p>"},{"location":"adr/ADR-0001-java-17-runtime/#consequences","title":"Consequences","text":"<p>Positive: - Consistent build and runtime across services, simplifying CI/CD pipelines and operational practices. - Access to modern JVM features (e.g., records, sealed classes, improved GC), improving code clarity and potential performance. - Strong ecosystem support accelerates development and minimizes integration risks. - Team proficiency with JVM enables faster onboarding and debugging capabilities. - Predictable LTS maintenance window aligns with Phase 1 delivery timelines.</p> <p>Negative: - Future upgrade path to next LTS (e.g., Java 21) will require dependency validation and performance testing. - Potential missed opportunities from newer language features in Java 21. - Larger memory footprint compared to more lightweight runtime alternatives.</p> <p>Mitigation Strategies: - Maintain compatibility matrix for critical libraries to track next LTS readiness. - Configure centralized build toolchains to ease future LTS upgrades. - Schedule regular evaluation of Java 21 adoption benefits and ecosystem readiness. - Implement performance benchmarks to measure upgrade impact.</p>"},{"location":"adr/ADR-0001-java-17-runtime/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>All critical dependencies and tooling are certified on the next LTS (e.g., Java 21) and there is a measurable benefit (performance, maintainability, security).</li> <li>A scheduled upgrade window is available with capacity for comprehensive regression testing.</li> <li>Target Sprint:</li> <li>Sprint 1 (adoption finalized in Phase 1 foundations)</li> </ul>"},{"location":"adr/ADR-0001-java-17-runtime/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0001-java-17-runtime/#must","title":"Must","text":"<ul> <li>Use only LTS (Long Term Support) releases for JVM in production; never mix runtimes across services.</li> <li>Centralize all build (Gradle/Maven) configurations and container images; keep them version-locked and reviewed in CI.</li> <li>Track and document LTS readiness of all critical dependencies for upgrade planning.</li> <li>Require performance, regression, and compatibility testing for every runtime upgrade or change.</li> <li>Follow a standardized migration playbook for major Java upgrades, including rollback and validation steps.</li> </ul>"},{"location":"adr/ADR-0001-java-17-runtime/#should","title":"Should","text":"<ul> <li>Review ecosystem and dependency readiness for new Java releases at least quarterly.</li> <li>Document upgrade blockers and mitigation strategies before proposing LTS changes.</li> <li>Maintain uniform JVM and build tooling across environments (local/dev/CI/prod).</li> <li>Periodically benchmark services to assess future upgrade benefits and risks.</li> </ul>"},{"location":"adr/ADR-0001-java-17-runtime/#wont","title":"Won't","text":"<ul> <li>Allow ad-hoc runtime or toolchain changes without ADR-backed review and CI validation.</li> <li>Mix non-LTS Java or alternative JVM languages into the baseline without architectural approval.</li> <li>Perform major upgrades during critical delivery windows or without rollback planning.</li> </ul>"},{"location":"adr/ADR-0001-java-17-runtime/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review @MysterTech 2025-08-14 Approved Security Review @MysterTech 2025-08-14 Approved SRE Review @MysterTech 2025-08-14 Approved"},{"location":"adr/ADR-0001-java-17-runtime/#links","title":"Links","text":"<ul> <li>Technology Landscape: Language/Runtime</li> <li>Sprint Plan: Sprint 1 \u2013 Core Platform Foundation</li> <li>Related ADRs</li> <li>ADR-0002: Microservices Architecture</li> <li>ADR-0003: HTTP for Inter-Service Communication</li> <li>ADR-0007: Service Framework Default Selection</li> <li>ADR-0008: Database Selection</li> <li>ADR-0012: Secrets Management</li> </ul>"},{"location":"adr/ADR-0002-microservices-architecture/","title":"ADR-0002: Microservices Architecture","text":"<p>Author: @MysterTech Status: Accepted Date: 2025-08-13 Deciders: @MysterTech Technical Story: [optional link to ticket/issue] Tags: architecture, microservices  </p>"},{"location":"adr/ADR-0002-microservices-architecture/#context","title":"Context","text":"<ul> <li>Monolithic codebase can\u2019t scale only hot paths (user mgmt, deals, documents, DLT), causing cost and performance issues during spikes.</li> <li>Shared deployments/release trains slow teams, increase coordination, and block independent delivery.</li> <li>Changes in one area ripple across the system, raising regression risk and elongating test cycles.</li> <li>Lowest-common-denominator tech constraints limit best-fit choices (e.g., DLT), while coarse observability/security hinder fault isolation and compliance boundaries.</li> <li>Move to microservices to align services to capabilities, enable independent deploy/scale, and reduce cross-team coupling\u2014supporting reliability, maintainability, and autonomy.</li> </ul>"},{"location":"adr/ADR-0002-microservices-architecture/#decision","title":"Decision","text":"<p>Adopt a microservices architecture for the DealSphere platform, organizing the system around business capabilities with defined service boundaries including User Service, Deal Service, Document Service, DLT Service, Notification Service, Search Service, and API Gateway.</p>"},{"location":"adr/ADR-0002-microservices-architecture/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0002-microservices-architecture/#why-microservices-architecture","title":"Why Microservices Architecture?","text":"<p>Scalability and Performance: - Independent scaling based on individual service demand patterns, particularly important for varying loads across user management, deal processing, and DLT operations. - Fault isolation prevents service failures from cascading across the entire system. - Optimized resource allocation per service based on specific performance characteristics.</p> <p>Team Autonomy and Development Velocity: - Clear service ownership enables independent development cycles aligned with business capabilities. - Teams can choose optimal technology stacks per service, especially critical for DLT integration requirements. - Deployment independence allows faster, more frequent, lower-risk deployments. - Reduces coordination overhead between teams working on different business areas.</p> <p>Architectural Flexibility: - Service boundaries match business capabilities (user management, deal lifecycle, document handling, DLT operations). - Technology diversity enables choosing optimal solutions per service (Java for core services, specialized tools for DLT). - API-driven communication (gRPC internal, GraphQL external) provides clear contract boundaries. - Independent versioning and evolution of service components.</p> <p>Maintenance and Operations: - Smaller codebases per service improve maintainability and debugging. - Service-specific monitoring and observability patterns. - Granular security and access control at service boundaries. - Easier compliance and audit trails per business capability.</p> <p>Business Alignment for Phase 1: - Service organization directly maps to DealSphere business workflows and team structure. - Enables parallel development of core platform capabilities. - Supports future platform evolution without architectural rewrites. - Risk mitigation through service isolation during Phase 1 delivery.</p>"},{"location":"adr/ADR-0002-microservices-architecture/#alternatives-considered","title":"Alternatives Considered","text":"<p>Monolithic Architecture - Pros:   - Simpler initial development and deployment   - Lower operational complexity   - Easier debugging and testing in early stages   - Single codebase reduces coordination overhead initially - Cons:   - Limited scalability options (scale entire application)   - Technology constraints across all features   - Deployment risks affect entire system   - Team coupling increases as codebase grows - Rejected: Does not address core scalability, team autonomy, and technology diversity requirements for DealSphere's varied business capabilities.</p> <p>Modular Monolith - Pros:   - Better code organization than pure monolith   - Maintains single deployment model   - Clear module boundaries   - Easier refactoring to microservices later - Cons:   - Still shares deployment fate and scaling constraints   - Technology stack limitations persist   - Module boundaries can erode over time   - Limited operational isolation - Rejected: Insufficient for independent scaling needs and team autonomy goals, particularly for DLT integration requirements.</p> <p>Service-Oriented Architecture (SOA) - Pros:   - Service-based architecture approach   - Protocol standardization (typically SOAP/XML)   - Enterprise service bus for communication   - Mature governance models - Cons:   - Heavyweight protocols and communication overhead   - Complex ESB infrastructure requirements   - Slower development cycles   - Over-engineering for our platform scale - Rejected: Too heavyweight for Phase 1 needs and doesn't align with modern development practices and tooling preferences.</p>"},{"location":"adr/ADR-0002-microservices-architecture/#consequences","title":"Consequences","text":"<p>Positive: - Team autonomy with clear service ownership and independent development cycles - Fault isolation prevents service failures from cascading across the system - Deployment independence allows faster, more frequent, lower-risk deployments - Business alignment with service boundaries matching business capabilities</p> <p>Negative: - Operational complexity in managing multiple services and their interactions - Network latency and potential performance overhead from inter-service communication - Data consistency challenges across service boundaries - Development overhead from distributed system complexity - Distributed debugging complexity across multiple services</p> <p>Mitigation Strategies: - Comprehensive observability with logging, metrics, and distributed tracing - Service mesh for managing inter-service communication - Clear API contracts with well-defined, versioned interfaces - Circuit breakers and retry policies for reliability - Shared libraries for common functionality - Deployment automation to reduce operational overhead</p>"},{"location":"adr/ADR-0002-microservices-architecture/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<p>Revisit Triggers:</p> <ul> <li>Revisit Trigger:</li> <li>Performance issues with inter-service communication becoming a significant bottleneck</li> <li>Operational overhead outweighing the benefits of service independence</li> <li>Team structure changes no longer aligning with service boundaries -Target Sprint:</li> <li>Sprint 1 (architectural foundation established)</li> </ul>"},{"location":"adr/ADR-0002-microservices-architecture/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0002-microservices-architecture/#must","title":"Must","text":"<ul> <li>API contracts: All inter-service communication must use well-defined, versioned APIs</li> <li>Data ownership: Each service must own its data - no shared databases between services</li> <li>Monitoring: All services must implement standard observability patterns</li> </ul>"},{"location":"adr/ADR-0002-microservices-architecture/#should","title":"Should","text":"<ul> <li>Service size: Services should be small enough for a single team to own but large enough to provide business value</li> <li>Independence: Services should be deployable and testable independently</li> </ul>"},{"location":"adr/ADR-0002-microservices-architecture/#wont","title":"Won't","text":"<ul> <li>Allow shared databases between services</li> <li>Implement synchronous communication patterns that create tight coupling</li> <li>Deploy services without proper monitoring and observability</li> </ul>"},{"location":"adr/ADR-0002-microservices-architecture/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review @MysterTech 2025-08-14 Approved Security Review @MysterTech 2025-08-14 Approved SRE Review @MysterTech 2025-08-14 Approved"},{"location":"adr/ADR-0002-microservices-architecture/#links","title":"Links","text":"<p>Technology Landscape: Architecture Sprint Plan: Sprint 1 \u2013 Core Platform Foundation Related ADRs: - ADR-0001: Java 17 Runtime - ADR-0002: Microservices Architecture - ADR-0003: gRPC for Inter-Service Communication - ADR-0004: GraphQL via Apollo Router for External API - ADR-0006: Docker Compose for Phase 1 Orchestration</p>"},{"location":"adr/ADR-0003-http-inter-service-communication/","title":"ADR-0003: HTTP for Inter-Service Communication","text":"<p>Author: @MysterTech Status: Accepted Date: 2025-08-13 Deciders: @MysterTech Technical Story: [optional link to ticket/issue] Tags: communication, https, microservices</p>"},{"location":"adr/ADR-0003-http-inter-service-communication/#context","title":"Context","text":"<p>The current challenge with inter-service communication in our microservices platform is a lack of simplicity, reliability, and easy debuggability. Previous approaches either relied on binary protocols (like gRPC) that complicate local testing and troubleshooting or added operational overhead using message brokers for synchronous flows. Teams face difficulties rapidly integrating new services, evolving contracts, and tracking request flows across domains\u2014especially for simple request-response patterns. Our platform demands secure, type-safe, and easily observable communication without steep learning curves or operational friction.</p> <p>As a result, we need a unified, standard HTTP-based approach for inter-service calls. This will:</p> <ul> <li>Simplify integration for new and existing services,</li> <li>Improve transparency and debuggability,</li> <li>Align with broader tooling and organizational expertise,</li> <li>And address PRD requirements for scalability and maintainability in real-time deal, document, and DLT workflows.</li> </ul>"},{"location":"adr/ADR-0003-http-inter-service-communication/#decision","title":"Decision","text":"<p>Adopt HTTP as the primary protocol for inter-service communication within the DealSphere platform.</p>"},{"location":"adr/ADR-0003-http-inter-service-communication/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0003-http-inter-service-communication/#why-http-for-inter-service-communication","title":"Why HTTP for Inter-Service Communication?","text":"<ul> <li>Simplicity and Organizational Fit </li> <li>Ubiquitous protocol with low onboarding cost and rich framework/tooling support.  </li> <li>Easier local testing and debugging than binary RPC; straightforward polyglot integration.  </li> <li>Aligns with existing infra, security, and observability practices.</li> <li>Payload Flexibility </li> <li>Supports JSON for readability and protobuf for efficiency via content negotiation.  </li> <li>Allows gradual optimization (start with JSON, adopt protobuf where needed).  </li> <li>Avoids lock-in to a single RPC framework while preserving strong contracts.</li> <li>Operational Transparency </li> <li>Clear request/response semantics, standard status codes, and mature tracing/logging.  </li> <li>First-class TLS/JWT integration; consistent gateway/middlebox behavior.  </li> <li>Simplifies SLO monitoring, rate limiting, and error handling across services.</li> </ul>"},{"location":"adr/ADR-0003-http-inter-service-communication/#deferred-alternatives","title":"Deferred Alternatives","text":"<ul> <li>Kafka (or equivalent) as primary internal transport </li> <li>Reason for deferral: Overhead for synchronous request/response; not necessary for initial scope.  </li> <li>Reconsider if: Async/event-driven patterns become dominant or decoupling/throughput needs increase significantly.</li> </ul>"},{"location":"adr/ADR-0003-http-inter-service-communication/#rejected-alternatives","title":"Rejected Alternatives","text":"<ul> <li>gRPC for synchronous inter-service calls </li> <li>Reason for deferral: Adds ecosystem complexity and tighter coupling to RPC semantics not required for Phase 1.  </li> <li>Reconsider if: Latency/throughput demands exceed HTTP+protobuf or streaming becomes a pervasive requirement.</li> <li>REST/HTTP JSON only (no binary encoding)  </li> <li>Reason for rejection: Inefficient for high-volume paths; lacks a clear path to binary optimization.  </li> <li>Reconsider if: Traffic levels remain low and developer ergonomics outweigh efficiency concerns.</li> </ul>"},{"location":"adr/ADR-0003-http-inter-service-communication/#consequences","title":"Consequences","text":"<p>Positive</p> <ul> <li>Service integration is faster and easier due to HTTP's universal support and familiar tooling.</li> <li>Debugging, monitoring, and tracing are straightforward for all teams and environments.</li> <li>Payload format flexibility enables optimization (protobuf) without losing readability or dev ergonomics.</li> </ul> <p>Negative</p> <ul> <li>Lacks some streaming or advanced RPC features available in gRPC; may require more manual implementation for certain patterns.</li> <li>Binary protobuf payloads require developers to manage serialization, contracts, and compatibility discipline.</li> <li>Direct efficiency (latency, throughput) may be lower than binary RPC for very high-frequency, low-latency needs.</li> </ul> <p>Mitigation Strategies</p> <ul> <li>Leverage content negotiation to support both JSON (for dev/onboarding/debug) and protobuf (for prod/high-throughput paths).</li> <li>Invest in automated contract validation, linting, and compatibility checks in CI.</li> <li>Document versioning, error handling, and back-compat best practices for payloads and HTTP APIs.</li> </ul>"},{"location":"adr/ADR-0003-http-inter-service-communication/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger: </li> <li>HTTP struggles to meet latency or throughput needs for synchronous service calls under real-world load.  </li> <li>Teams experience significant pain points in contract evolution, debugging, or developer ergonomics not resolved by available tooling.  </li> <li>Event-driven or streaming use cases increase, making HTTP less fit for internal core workflows.  </li> <li>Major improvements in protocol or framework support (e.g., gRPC, event brokers) change the cost/benefit landscape.  </li> <li>PRD requirements evolve to emphasize patterns not easily supported via HTTP.</li> <li>Target Sprint: </li> <li>Sprint 1 (initial rollout and adoption complete as part of Phase 1 platform foundation).</li> </ul>"},{"location":"adr/ADR-0003-http-inter-service-communication/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0003-http-inter-service-communication/#must","title":"Must","text":"<ul> <li>Enforce TLS for all service-to-service HTTP calls; authenticate requests (e.g., JWT/OIDC) and authorize per service policy.</li> <li>Define explicit timeouts, retries, and circuit breakers for every endpoint; propagate correlation IDs for tracing.</li> <li>Version payload contracts; maintain backward compatibility and document deprecation timelines.</li> </ul>"},{"location":"adr/ADR-0003-http-inter-service-communication/#should","title":"Should","text":"<ul> <li>Support both JSON (dev/debug) and protobuf (prod/high-throughput) via content negotiation.</li> <li>Standardize error envelopes and HTTP status code mapping; include machine-readable error codes.</li> <li>Instrument requests with metrics (latency, error rate, throughput) and distributed tracing; publish dashboards and SLOs.</li> </ul>"},{"location":"adr/ADR-0003-http-inter-service-communication/#wont","title":"Won't","text":"<ul> <li>Expose internal HTTP endpoints directly to external clients or bypass gateway/mesh policies.</li> <li>Share internal domain objects across service boundaries; no tight coupling to transport-specific types.</li> <li>Deploy breaking schema changes without CI compatibility checks and documented migration paths.</li> </ul>"},{"location":"adr/ADR-0003-http-inter-service-communication/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review @MysterTech 2025-08-14 Approved Security Review @MysterTech 2025-08-14 Approved SRE Review @MysterTech 2025-08-14 Approved"},{"location":"adr/ADR-0003-http-inter-service-communication/#links","title":"Links","text":"<ul> <li>Technology Landscape: Phase 1 Technical Plan</li> <li>Sprint Plan: Phase 1 Sprint Plan</li> <li> <p>Related ADRs: </p> </li> <li> <p>ADR-0001: Architecture Principles </p> </li> <li>ADR-0002: Microservices Architecture </li> <li>ADR-0004: GraphQL via Apollo Router for External API </li> <li>ADR-0005: Infrastructure Baseline </li> <li>ADR-0006: Security Baseline </li> <li>ADR-0007: Service Framework Selection </li> <li>ADR-0008: API/Schema Governance &amp; Federation </li> <li>ADR-0011: RBAC &amp; Authorization Policies </li> <li>ADR-0012: Secrets Management </li> <li>ADR-0013: Observability Standards </li> <li>ADR-0021: Protobuf IDL Versioning Strategy </li> <li>ADR-0025: Event Streaming Platform</li> </ul>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/","title":"ADR-0004: GraphQL via Apollo Gateway for External API","text":"<p>Author: @MysterTech Status: Accepted Date: 2025-08-13 Deciders: @MysterTech Technical Story: [optional link to ticket/issue] Tags: api, graphql, apollo, federation</p>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#context","title":"Context","text":"<ul> <li>The DealSphere platform requires a unified external API that can efficiently serve multiple client applications (web, mobile, partners) while maintaining strong type safety, query optimization, and schema evolution capabilities.</li> <li>The PRD requires contract-first governance (schema linting, composition checks, breaking-change detection), persisted queries/safelisting, rate limiting, caching, centralized authn/z with tenant/class enforcement, and SLO-grade observability.</li> <li>Internal services implement GraphQL subgraphs using Netflix DGS on Java 17 (ADR-0007), adopting Federation v2 for clear ownership and composition.</li> <li>The architecture must support Federation v2 features including entity references, shared types, and advanced composition patterns between Node.js gateway and Java DGS subgraphs.</li> <li>PRD Alignment: The Phase 1 PRD requires a single governed GraphQL endpoint with defined SLOs (latency and error budgets), enforced via CI composition checks and safe rollouts. This ADR meets that by composing DGS subgraphs under Federation v2 and enforcing persisted queries, query limits, and centralized authn/z.</li> </ul>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#decision","title":"Decision","text":"<p>Adopt Apollo Gateway (Node.js, Federation v2) as the primary external API gateway to federate DGS subgraphs running on Java 17 for the DealSphere platform.</p>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#why-apollo-gateway-for-external-api","title":"Why Apollo Gateway for External API?","text":"<p>Federation and Contract Governance - Federation v2 aligns with bounded contexts and clear entity ownership. - CI-enforced schema linting, composition, and breaking-change checks ensure safe evolution.</p> <p>Protocol Boundary: GraphQL over HTTP(S) - Gateway \u2194 subgraphs communicate via GraphQL over HTTPS, matching federation standards and tooling. - Keeps observability, auth, caching, and rate limiting consistent at the HTTP layer.</p> <p>Event-Driven Readiness (Protobuf) - Protobuf schemas maintained alongside GraphQL SDL define internal message contracts. - Enables future Kafka-based eventing without coupling core logic to a single transport.</p> <p>Transport-Agnostic Service Design - Subgraphs keep business logic behind interfaces; resolvers stay thin. - Adapters (e.g., Kafka producers/consumers) can be added later without changing external contracts.</p> <p>Security and Multi-Tenancy - Centralized JWT/OIDC at the gateway; authorization via directives/middleware. - Tenant/class enforcement and audit logging applied uniformly across subgraphs.</p> <p>Operability and Scale - Standard metrics, traces, logs with correlation IDs; dashboards and alerts for SLOs. - Independent scaling of gateway and subgraphs; persisted queries and query limits protect backends.</p>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#deferred-alternatives","title":"Deferred Alternatives","text":"<ul> <li>New transport for inter-service calls (e.g., gRPC)</li> <li>Reason for rejection: Not required for Phase 1; GraphQL over HTTPS suffices for federation and keeps stack simpler.</li> <li> <p>Reconsider if: Internal service-to-service latency or throughput demands justify adding gRPC alongside HTTP.</p> </li> <li> <p>Event backbone via Kafka (as primary internal integration)</p> </li> <li>Reason for rejection: Not needed for initial external API delivery; adds operational complexity up front.</li> <li>Reconsider if: Domain events and async workflows become central; throughput or decoupling needs increase.</li> </ul>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#rejected-alternatives","title":"Rejected Alternatives","text":"<ul> <li>Monolithic GraphQL server</li> <li>Reason for rejection: Conflicts with bounded-context ownership and independent evolution of teams.</li> <li> <p>Reconsider if: Domain scope shrinks significantly and organizational structure centralizes.</p> </li> <li> <p>REST/OpenAPI-only gateway</p> </li> <li>Reason for rejection: Lacks GraphQL composition benefits and flexible client querying across domains.</li> <li>Reconsider if: External consumers require strictly RESTful contracts with no GraphQL adoption path.</li> </ul>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#consequences","title":"Consequences","text":"<p>Positive - Unified API endpoint simplifies client integration and governance. - Consistent contracts and schema evolution through federation. - Standardized observability, auth, and policies across all services.</p> <p>Negative - Added operational overhead for gateway and schema registry. - Federation complexity can cause logic creep or performance risks. - Teams must support both Node.js and Java service runtimes.</p> <p>Mitigation Strategies - Automated CI checks and schema validation at each deploy. - Strict separation of concerns: thin gateway, minimal custom logic. - Performance/load testing and cross-team documentation to maintain standards.</p>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#rollout-plan","title":"Rollout Plan","text":"<ul> <li>Staging Phase: Deploy Apollo Gateway (Federation v2) in staging with connected DGS subgraphs; enable CI checks for schema linting, composition, and breaking-change detection; configure persisted queries, baseline query limits, and centralized authn/z; set up metrics, tracing, and logs.</li> <li>Canary Deployment: Route limited client and operation sets through the gateway; validate SLOs and core policies (authn/z, tenant/class checks, caching, rate limiting); monitor performance, error rates, and throughput.</li> <li>Cutover: Gradually ramp traffic to 100% through Gateway; enforce query safelisting, rate limits, and production caching; monitor latency, errors, and throttling; deprecate any legacy endpoints per migration timelines.</li> <li>Post-Cutover Operations: Tune limits, caching strategies, and autoscaling based on telemetry; keep CI gates strict for ongoing schema changes; finalize incident runbooks and SLO dashboards for operation continuity.</li> </ul>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#revisit-triggers","title":"Revisit Triggers","text":"<ul> <li>Sustained latency/cost/regression attributable to the gateway or federation model.</li> <li>Domain/team boundaries shift, making current subgraph ownership/composition misaligned.</li> <li>Material ecosystem/security changes (tooling, vulnerabilities) affecting gateway/subgraphs or governance.</li> </ul>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#target-sprint-for-formal-decision","title":"Target Sprint for Formal Decision","text":"<p>Target Sprint: Sprint 1</p>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#must","title":"Must","text":"<ul> <li>All DGS subgraphs implement Federation v2 directives correctly.</li> <li>Schema changes pass CI compatibility validation; authn/z enforced at gateway.</li> <li>Query limits, centralized error handling, and distributed tracing across all boundaries.</li> </ul>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#should","title":"Should","text":"<ul> <li>Use GraphQL and DGS best practices; DataLoader for efficiency.</li> <li>Apply consistent naming, proper caching, and persisted queries in production.</li> <li>Maintain comprehensive API documentation and dashboards.</li> </ul>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#wont","title":"Won't","text":"<ul> <li>Allow direct DB access from resolvers; no bypass of federation/approval processes.</li> <li>Release schema changes without impact analysis or approval.</li> <li>Implement custom federation outside Apollo/DGS standards.</li> </ul>"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review @MysterTech 2025-08-14 Approved Security Review @MysterTech 2025-08-14 Approved SRE Review @MysterTech 2025-08-14 Approved"},{"location":"adr/ADR-0004-graphql-apollo-gateway-external-api/#links","title":"Links","text":"<p>Review Before Deciding</p> <ul> <li>Apollo Federation Documentation: Apollo Federation v2</li> <li>Netflix DGS Documentation: DGS Framework</li> </ul> <p>Technology Landscape: Tech Landscape Document</p> <p>Product/PRD: Phase 1 PRD - External API</p> <p>Sprint Plan: [Link to sprint planning documentation]</p> <p>Related ADRs:</p> <ul> <li>ADR-0001: Architecture Principles</li> <li>ADR-0002: Runtime/Platform Baseline</li> <li>ADR-0003: API-First Strategy</li> <li>ADR-0005: Infrastructure Baseline</li> <li>ADR-0006: Security Baseline</li> <li>ADR-0007: Service Framework Selection (Netflix DGS, Java 17)</li> <li>ADR-0008: API/Schema Governance &amp; Federation</li> <li>ADR-0011: RBAC &amp; Authorization Policies</li> <li>ADR-0012: Secrets Management</li> <li>ADR-0013: Observability Standards (Metrics/Traces/Logs/SLOs)</li> </ul>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/","title":"ADR-0005: R3 Corda 5 as DLT Platform","text":"<p>Author: @MysterTech Status: Accepted Date: 2025-08-13 Deciders: @MysterTech Technical Story: [optional link to ticket/issue] Tags: dlt, corda, blockchain</p>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#context","title":"Context","text":"<ul> <li>DealSphere platform requires a distributed ledger technology (DLT) platform for secure, tamper-proof transaction recording and multi-party business process execution.</li> <li>R3 Corda 5 provides enterprise-grade DLT capabilities specifically designed for regulated financial services and complex business networks.</li> <li>Team expertise includes blockchain development experience, and Corda's JVM-based architecture aligns with existing Java 17 runtime decisions.</li> <li>PRD alignment: Security requirements and regulatory compliance for financial transactions are prioritized for Phase 1 core flows.</li> </ul>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#decision","title":"Decision","text":"<p>Adopt R3 Corda 5 as the distributed ledger technology platform for DealSphere Phase 1.</p>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#why-r3-corda-5-as-dlt-platform","title":"Why R3 Corda 5 as DLT Platform?","text":"<p>Enterprise-Grade Security and Compliance: - Built-in privacy features with need-to-know data sharing principles. - Strong cryptographic foundations and secure communication protocols. - Regulatory compliance features aligned with financial services requirements. - Mature audit trails and transaction history capabilities.</p> <p>Technical Architecture Alignment: - JVM-based platform compatible with Java 17 runtime decision. - Spring Boot integration capabilities for microservices architecture. - REST and gRPC API support for seamless service integration. - Familiar development patterns reducing team onboarding overhead.</p> <p>Business Network Capabilities: - Multi-party transaction support essential for deal syndication workflows. - Smart contract (CorDapp) development for complex business logic. - Identity and certificate management for trusted counterparty networks. - Pluggable consensus mechanisms for different transaction types.</p> <p>Operational Maturity: - Production-ready platform with enterprise support options. - Comprehensive monitoring and observability tools integration. - Docker containerization support for Phase 1 orchestration strategy. - Established backup and disaster recovery patterns.</p> <p>Risk Management for Phase 1: - Proven track record in financial services implementations. - Active community and R3 support for issue resolution. - Clear upgrade paths and version compatibility strategies. - Minimizes experimental technology risk during initial platform delivery.</p> <p>Performance Characteristics: - Optimized for financial transaction throughput requirements. - Deterministic finality for transaction settlement scenarios. - Scalable node architecture supporting network growth. - Efficient resource utilization in containerized environments.</p>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#alternatives-considered","title":"Alternatives Considered","text":"<p>Hyperledger Fabric - Pros: Open-source platform with strong enterprise adoption. - Cons: More complex operational overhead; Go/Node.js ecosystem diverges from JVM stack; less financial services specific features. - Rejected: Does not align with JVM-based technology stack and financial services focus.</p> <p>Ethereum (Enterprise) - Pros: Large ecosystem and developer community. - Cons: Significant development and maintenance overhead; security risks from custom cryptography; delays Phase 1 delivery timeline. - Rejected: Too high risk and development overhead for Phase 1 timeline.</p>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#consequences","title":"Consequences","text":"<p>Positive: - DLT integration enables secure multi-party deal processing with cryptographic transaction integrity. - Corda's privacy model ensures sensitive deal information is only shared with relevant counterparties. - JVM-based development stack maintains consistency with Java 17 and microservices architecture decisions. - Enterprise-grade security and compliance features align with financial services requirements. - Established development patterns reduce team onboarding overhead.</p> <p>Negative: - Requires team training on Corda-specific concepts (states, flows, contracts) but leverages existing JVM skills. - Platform lock-in to R3 ecosystem and potential licensing costs. - Performance limitations compared to traditional databases for non-DLT operations. - Additional operational complexity for node management and network coordination.</p> <p>Mitigation Strategies: - Maintain abstraction layer between business logic and Corda-specific implementations. - Establish comprehensive training program for Corda development patterns. - Implement performance benchmarks and monitoring for transaction throughput. - Document all CorDapp development patterns and maintain code review standards.</p>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li> <p>Revisit Triggers:  </p> </li> <li> <p>Performance bottlenecks emerge that cannot be resolved through configuration or infrastructure scaling.  </p> </li> <li> <p>Regulatory requirements change significantly requiring features not available in Corda 5.  </p> </li> <li> <p>Major security vulnerabilities discovered that cannot be patched within acceptable timeframes.</p> </li> <li> <p>Target Sprint:  </p> </li> <li> <p>Sprint 1 (DLT platform foundation established in Phase 1)</p> </li> </ul>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#must","title":"Must","text":"<ul> <li>Maintain abstraction layer between business logic and Corda-specific implementations to enable future platform migration if needed.</li> <li>Establish performance benchmarks and monitoring for transaction throughput and latency.</li> <li>Keep Corda version compatibility matrix updated and plan regular security updates.</li> </ul>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#should","title":"Should","text":"<ul> <li>Document all CorDapp development patterns and maintain code review standards for smart contract logic.</li> <li>Implement comprehensive testing strategies for Corda flows and contracts.</li> </ul>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#wont","title":"Won't","text":"<ul> <li>Allow direct database access bypassing Corda's data model.</li> <li>Implement custom cryptographic solutions without R3 approval.</li> <li>Deploy CorDapps without proper code review and security assessment.</li> </ul>"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review @MysterTech 2025-08-14 Approved Security Review @MysterTech 2025-08-14 Approved SRE Review @MysterTech 2025-08-14 Approved"},{"location":"adr/ADR-0005-r3-corda-5-dlt-platform/#links","title":"Links","text":"<p>Technology Landscape: DLT Platform Sprint Plan: Sprint 1 \u2013 Core Platform Foundation PRD: Security requirements and regulatory compliance </p> <p>Related ADRs: - ADR-0001: Java 17 as Language/Runtime - ADR-0002: Microservices Architecture - ADR-0006: Docker Compose for Phase 1 Orchestration - ADR-0012: Secrets Management</p>"},{"location":"adr/ADR-0006-docker-compose-phase1-orchestration/","title":"ADR-0006: Docker Compose for Phase 1 Orchestration","text":"<p>Status: Accepted Date: 2025-08-13 Tags: orchestration, docker, compose</p>"},{"location":"adr/ADR-0006-docker-compose-phase1-orchestration/#context","title":"Context","text":"<ul> <li>DealSphere Phase 1 requires local development and integration testing environments that closely mirror production service topology.</li> <li>Docker Compose provides container orchestration capabilities suitable for multi-service development environments and CI/CD workflows.</li> <li>Team familiarity with containerization patterns and Docker ecosystem tools supports rapid adoption and troubleshooting.</li> <li>PRD alignment: Development workflow and deployment strategy are prioritized for Phase 1 delivery timelines.</li> </ul>"},{"location":"adr/ADR-0006-docker-compose-phase1-orchestration/#decision","title":"Decision","text":"<p>Adopt Docker Compose as the container orchestration platform for DealSphere Phase 1 local development, testing, and CI/CD environments.</p>"},{"location":"adr/ADR-0006-docker-compose-phase1-orchestration/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0006-docker-compose-phase1-orchestration/#why-docker-compose-for-phase-1-orchestration","title":"Why Docker Compose for Phase 1 Orchestration?","text":"<ul> <li>Development Environment Consistency</li> <li>Standardized service configuration across all developer workstations.</li> <li>Reproducible dependency management for databases, message brokers, and external service mocks.</li> <li>Version-controlled environment definitions ensuring team alignment.</li> <li>Simple service lifecycle management (start/stop/restart) for rapid iteration.</li> <li>Integration Testing Support</li> <li>Multi-container test suites with predictable service startup ordering.</li> <li>Network isolation and service-to-service communication testing.</li> <li>Database and external service state management for test scenarios.</li> <li>CI/CD pipeline integration with consistent environment provisioning.</li> <li>Operational Simplicity</li> <li>Single-file service definitions (docker-compose.yml) for easy maintenance.</li> <li>Built-in service discovery and DNS resolution between containers.</li> <li>Volume mounting for development hot-reloading and persistent data.</li> <li>Log aggregation and debugging tools compatible with Docker ecosystem.</li> <li>Resource Management</li> <li>Efficient resource utilization on developer machines compared to VM-based alternatives.</li> <li>Fine-grained resource allocation per service (CPU/memory limits).</li> <li>Automatic cleanup and container lifecycle management.</li> <li>Minimal infrastructure overhead for local development workflows.</li> <li>Technology Stack Alignment</li> <li>Native Docker image support for Java 17 services and Spring Boot applications.</li> <li>PostgreSQL, Redis, and other backing service containers readily available.</li> <li>Corda node containerization patterns established in community.</li> <li>GraphQL and gRPC service containerization well-documented.</li> <li>CI/CD Integration</li> <li>GitHub Actions and other CI systems provide built-in Docker Compose support.</li> <li>Consistent environment definitions between local development and automated testing.</li> <li>Parallel service builds and testing capabilities.</li> <li>Easy integration with container registries for artifact management.</li> </ul>"},{"location":"adr/ADR-0006-docker-compose-phase1-orchestration/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Kubernetes (Minikube/Kind)</li> <li>Pros: Production-like orchestration capabilities and advanced networking features.</li> <li>Cons: Significantly higher complexity for Phase 1 scope; resource overhead on developer machines; learning curve exceeds immediate needs.</li> <li>VM-based Development</li> <li>Pros: Complete isolation and familiar virtualization patterns.</li> <li>Cons: Higher resource consumption; slower startup times; more complex dependency management and version control.</li> <li>Manual Service Management</li> <li>Pros: Direct control over service configuration and debugging.</li> <li>Cons: Inconsistent environments across team; complex dependency coordination; difficult integration testing setup.</li> </ul>"},{"location":"adr/ADR-0006-docker-compose-phase1-orchestration/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>Standardized development environments reduce \"works on my machine\" issues and improve team productivity.</li> <li>Multi-service integration testing becomes reliable and reproducible across development and CI environments.</li> <li>Container-based architecture provides foundation for future Kubernetes migration when scaling requirements emerge.</li> <li>Negative:</li> <li>Development workflow requires Docker installation and basic containerization knowledge from team members.</li> <li>Mitigation Strategies:</li> <li>Provide comprehensive Docker and containerization training for all team members.</li> <li>Create detailed documentation for common Docker Compose workflows and troubleshooting.</li> <li>Establish clear guidelines for service configuration and resource allocation.</li> </ul>"},{"location":"adr/ADR-0006-docker-compose-phase1-orchestration/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Service scaling requirements exceed single-machine development capabilities.</li> <li>Production deployment needs require advanced orchestration features (service mesh, advanced networking, etc.).</li> <li>Team size growth makes coordination of shared development environments necessary.</li> <li>Target Sprint:</li> <li>Sprint 1 (orchestration foundation established for Phase 1 development)</li> </ul>"},{"location":"adr/ADR-0006-docker-compose-phase1-orchestration/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain environment parity between Docker Compose configurations and production deployment targets.</li> <li>Document service interdependencies and startup ordering requirements in compose files.</li> <li>Establish resource limits and health checks for all services to prevent resource exhaustion.</li> <li>Keep compose configurations version-controlled and synchronized across all development workflows.</li> </ul>"},{"location":"adr/ADR-0006-docker-compose-phase1-orchestration/#links","title":"Links","text":"<ul> <li>Technology Landscape: Orchestration Platform</li> <li>Sprint Plan: Sprint 1 \u2013 Development Environment Setup</li> <li>Related ADRs:</li> <li>ADR-0002: Microservices Architecture</li> <li>ADR-0001: Java 17 as Language/Runtime</li> </ul>"},{"location":"adr/ADR-0007-service-framework-defaults/","title":"ADR-0007: Service Framework Default Selection","text":"<p>Author: @MysterTech Status: Accepted Date: 2025-08-13 Deciders: @MysterTech Technical Story: [optional link to ticket/issue] Tags: framework, dgs, graphql, services  </p>"},{"location":"adr/ADR-0007-service-framework-defaults/#context","title":"Context","text":"<ul> <li>Services are being bootstrapped with divergent patterns (project structure, configuration, security, telemetry), leading to inconsistent realization of core Phase 1 capabilities (permissions, documents, capital calls, waterfalls, workflows, analytics, accounting, portfolio, AI), and increasing integration risk.</li> <li>Cross-cutting functional needs mandated by the PRD\u2014strict role/class-based access, encrypted storage with hash verification, workflow SLAs and escalations, deterministic financial calculations, auditability, and API-first integrations are re-implemented differently across services, causing uneven behavior and slowing end-to-end validation.</li> <li>Inconsistent build/run conventions impede CI/CD policy enforcement required to meet PRD acceptance criteria (e.g., schema governance, security scans, performance/SLO checks, deterministic outputs for waterfalls, class segregation in AI and analytics).</li> <li>Developer onboarding and delivery velocity suffer because contributors must relearn patterns per service, delaying PRD milestones and increasing review/defect cycles.</li> <li>Phase 1 requires predictable, testable, and operable services across multiple domains and sprints; without shared defaults and guardrails, class-segregated flows (RBAC, documents, capital calls, waterfalls, workflows) and their acceptance criteria are harder to deliver reliably.</li> </ul> <p>Therefore, this ADR proposes establishing minimal, opinionated defaults and starter templates focused on PRD needs:</p> <ul> <li>Security &amp; Access: uniform authentication/authorization with strict class-level segregation and auditability.</li> <li>Data &amp; Documents: standardized configuration for encrypted storage, on-ledger metadata, content hash verification, and versioning/audit logs.</li> <li>Observability: consistent logs/metrics/traces with baseline dashboards/alerts to validate SLAs, workflow latencies, and compliance signals.</li> <li>Resiliency: timeouts, retries, circuit breakers, backoff, idempotency patterns to support workflow reliability and external integrations.</li> <li>Deterministic Calculations: conventions for numeric precision and validation harnesses to meet waterfall test vectors and accounting accuracy.</li> <li>CI/CD &amp; Quality: consistent build/test conventions, static analysis, coverage, schema checks, supply-chain security, and performance gates aligned to acceptance criteria.</li> <li>Interfaces &amp; Contracts: API/schema standards and error contracts to support API-first integrations and PRD traceability.</li> <li>Developer Workflow: coherent local dev, testing, and documentation to reduce time-to-first-commit and hit sprint timelines.</li> </ul>"},{"location":"adr/ADR-0007-service-framework-defaults/#decision","title":"Decision","text":"<p>Adopt Netflix DGS (GraphQL Java with DGS) as the default service framework for Phase 1 services, with standardized starter configurations and common patterns.</p>"},{"location":"adr/ADR-0007-service-framework-defaults/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0007-service-framework-defaults/#why-netflix-dgs-service-framework-default-selection","title":"Why Netflix DGS (Service Framework Default Selection)","text":"<p>Stability and Support</p> <ul> <li>GraphQL-first schema-driven development reduces boilerplate and accelerates service scaffolding</li> <li>Rich ecosystem of DGS features covers common requirements (code generation, schema registry, federation)</li> <li>Built-in observability (GraphQL instrumentation, metrics, health checks, logging)</li> <li>Native GraphQL federation support enables distributed schema composition and seamless gateway integration</li> </ul> <p>Ecosystem Readiness</p> <ul> <li>Consistent GraphQL patterns across services reduce context switching and onboarding time</li> <li>Mature tooling integration (schema linting, breaking-change detection, IDE support)</li> <li>Performance optimizations through data loader patterns and query cost analysis</li> </ul> <p>Team Proficiency and Velocity</p> <ul> <li>Standardized GraphQL development patterns across all microservices</li> <li>Reduced configuration drift through DGS code generation and schema registry integration</li> <li>Clear upgrade paths and long-term support from Netflix</li> </ul> <p>Modern Features without migration burden</p> <ul> <li>Security at GraphQL layer through authorization directives and middlewares</li> <li>Established patterns for query/mutation/subscription handling and federation/gateway compatibility</li> <li>Strong community support and comprehensive documentation</li> </ul> <p>Risk Management</p> <ul> <li>Accelerated development velocity for Phase 1 delivery</li> <li>GraphQL query cost limits and depth/complexity analysis for performance tuning</li> <li>Proven track record in similar microservices architectures at Netflix scale</li> </ul>"},{"location":"adr/ADR-0007-service-framework-defaults/#rejected-alternatives","title":"Rejected Alternatives","text":"<ul> <li>Spring Boot</li> <li>Reason for rejection: Rich ecosystem and team expertise, but adopting DGS focuses service delivery on GraphQL-first architecture, federation, and schema-driven contracts without additional REST overhead.</li> <li> <p>Reconsider if: REST-centric needs or gaps in DGS ecosystem for critical features arise after Phase 1.</p> </li> <li> <p>Quarkus</p> </li> <li>Reason for rejection: Fast startup and native compilation attractive, but extra learning curve and ecosystem risk during initial delivery; DGS better aligns with immediate GraphQL federation priorities.</li> <li> <p>Reconsider if: Post-Phase 1, performance profiling shows that native compilation or Quarkus features bring clear, material benefits.</p> </li> <li> <p>Micronaut</p> </li> <li>Reason for rejection: Lightweight and fast but adds framework diversity without decisive advantages for GraphQL and federation over DGS, reducing standardization.</li> <li>Reconsider if: Team expertise or service requirements shift in Micronaut's favor, or unique features are required later.</li> </ul>"},{"location":"adr/ADR-0007-service-framework-defaults/#consequences","title":"Consequences","text":"<p>Positive:</p> <ul> <li>Standardized GraphQL development patterns across all microservices</li> <li>Reduced configuration drift through DGS code generation and schema registry integration</li> <li>Leveraged GraphQL ecosystem for query/mutation/subscription patterns and federation compatibility</li> <li>Accelerated development velocity for Phase 1 delivery through schema-driven development</li> <li>Consistent GraphQL instrumentation and observability across services</li> <li>Enhanced API contracts through GraphQL schema-first approach</li> <li>Improved pagination and caching patterns through GraphQL best practices</li> <li>Performance tuning capabilities with query cost limits and depth/complexity analysis</li> </ul> <p>Negative:</p> <ul> <li>Potential vendor lock-in to Netflix DGS ecosystem</li> <li>May not be optimal for non-GraphQL or high-throughput REST use cases</li> <li>Framework upgrade dependencies across multiple services</li> <li>Learning curve for teams unfamiliar with GraphQL patterns</li> </ul> <p>Mitigation Strategies:</p> <ul> <li>Maintain service interface contracts independent of framework implementation</li> <li>Use GraphQL schema-first approaches to reduce coupling to specific implementations</li> <li>Document migration patterns for future framework transitions</li> <li>Implement CI checks for schema linting and breaking-change detection</li> <li>Establish federation/gateway compatibility for gradual framework updates</li> </ul>"},{"location":"adr/ADR-0007-service-framework-defaults/#revisit-triggers","title":"Revisit Triggers","text":"<ul> <li>Performance bottlenecks identified in Phase 1 services</li> <li>Team expertise shifts significantly toward alternative frameworks</li> <li>Major Netflix DGS security vulnerabilities or end-of-life announcements</li> <li>GraphQL ecosystem shifts requiring different tooling approaches</li> </ul>"},{"location":"adr/ADR-0007-service-framework-defaults/#target-sprint-for-formal-decision","title":"Target Sprint for Formal Decision","text":"<p>Target Sprint: Sprint 1</p>"},{"location":"adr/ADR-0007-service-framework-defaults/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0007-service-framework-defaults/#must","title":"Must","text":"<ul> <li>All new services must use approved Netflix DGS starter templates</li> <li>Framework deviations require architecture review and explicit approval</li> <li>GraphQL schema contracts must follow federation/gateway compatibility standards</li> <li>Performance benchmarks must meet Phase 1 SLA requirements with query cost limits</li> <li>CI checks must include schema linting and breaking-change detection</li> </ul>"},{"location":"adr/ADR-0007-service-framework-defaults/#should","title":"Should","text":"<ul> <li>Follow Netflix DGS best practices for GraphQL schema design and code generation</li> <li>Implement standardized GraphQL instrumentation and observability patterns</li> <li>Use authorization directives and middlewares for security at GraphQL layer</li> <li>Apply data loader patterns for efficient data fetching</li> <li>Implement proper pagination and caching patterns</li> </ul>"},{"location":"adr/ADR-0007-service-framework-defaults/#wont","title":"Won't","text":"<ul> <li>Custom GraphQL implementations without architectural approval</li> <li>Framework mixing within individual services</li> <li>Bypassing established Netflix DGS patterns without justification</li> <li>Schema changes without proper versioning and breaking-change analysis</li> </ul>"},{"location":"adr/ADR-0007-service-framework-defaults/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review @MysterTech 2025-08-14 Approved Security Review @MysterTech 2025-08-14 Approved SRE Review @MysterTech 2025-08-14 Approved"},{"location":"adr/ADR-0007-service-framework-defaults/#links","title":"Links","text":"<p>Review Before Deciding: - Netflix DGS Documentation: Developer docs</p> <p>Technology Landscape: Tech Landscape Document</p> <p>Product/PRD: Phase 1 PRD - Service Framework</p> <p>Sprint Plan: [Link to sprint planning documentation]</p> <p>Related ADRs: - ADR-0001: Microservices Architecture - Establishes distributed system foundation - ADR-0002: API-First Design - Defines contract-driven development approach - ADR-0003: Technology Selection Criteria - Framework evaluation principles - ADR-0004: Data Layer Strategy - Database and persistence patterns - ADR-0005: Service Templates - Standardized service scaffolding - ADR-0006: Deployment Patterns - Container and orchestration standards - ADR-0008: Authentication Strategy - Identity and access management - ADR-0009: Monitoring and Observability - System visibility patterns - ADR-0010: Data Synchronization - Inter-service data consistency - ADR-0011: Error Handling - Exception and failure management - ADR-0012: Performance Requirements - SLA and benchmark definitions - ADR-0013: Security Framework - Comprehensive security approach - ADR-0000-template - ADR template structure - Microservices Architecture Guidelines</p>"},{"location":"adr/ADR-0008-database-selection/","title":"ADR-0008: Database Selection","text":"<p>\u2022 Author: @author \u2022 Status: Proposed \u2022 Date: 2025-08-14 \u2022 Deciders: @name1, @name2, @name3 \u2022 Technical Story: [optional link to ticket/issue] \u2022 Tags: [database, postgresql, microservices, persistence]</p>"},{"location":"adr/ADR-0008-database-selection/#context","title":"Context","text":"<p>What is the issue that we're seeing that is motivating this decision or change?</p> <p>[Need to select a primary database solution for the DealSphere platform that supports microservices architecture, ACID transactions for financial operations, and team expertise while maintaining operational excellence.]</p>"},{"location":"adr/ADR-0008-database-selection/#decision","title":"Decision","text":"<p>What is the change that we're proposing and/or doing?</p> <p>[We are standardizing on PostgreSQL as the primary database solution for all microservices in the DealSphere platform.]</p> <p>For now: \u2022 PostgreSQL instance per microservice for data isolation and independent scaling \u2022 Leverage existing team PostgreSQL expertise for faster development velocity \u2022 Focus on ACID transaction guarantees to support financial operation requirements</p>"},{"location":"adr/ADR-0008-database-selection/#rationale","title":"Rationale","text":"<p>Why is this the right decision given our architectural pillars?</p>"},{"location":"adr/ADR-0008-database-selection/#rationale-pillars","title":"Rationale Pillars","text":""},{"location":"adr/ADR-0008-database-selection/#why-postgresql-database-selection","title":"Why PostgreSQL (Database Selection)","text":"<p>\u2022 Stability and Support   \u25e6 Mature, battle-tested database with proven track record in enterprise environments   \u25e6 Strong community support and extensive documentation   \u25e6 ACID compliance ensuring data integrity for financial operations</p> <p>\u2022 Ecosystem Readiness   \u25e6 Rich ecosystem of tools, extensions, and third-party integrations   \u25e6 Excellent ORM and framework support (Spring Data JPA, Hibernate)   \u25e6 Comprehensive monitoring and diagnostics tooling</p> <p>\u2022 Team Proficiency and Velocity   \u25e6 Existing team expertise with PostgreSQL reduces learning curve   \u25e6 Familiar toolchain accelerates development and deployment   \u25e6 Established patterns for backup, recovery, and maintenance</p> <p>\u2022 Modern Features without Migration Burden   \u25e6 Advanced data types (JSON, arrays, custom types) supporting modern application patterns   \u25e6 Full-text search capabilities reducing need for additional search infrastructure   \u25e6 Extensible architecture allowing future enhancements</p> <p>\u2022 Risk Management   \u25e6 Open source reduces vendor lock-in risks   \u25e6 Multiple cloud provider support ensures deployment flexibility   \u25e6 Well-established backup and disaster recovery patterns</p> <p>\u2022 Upgrade Path Considerations   \u25e6 Clear upgrade paths and backward compatibility   \u25e6 Database abstraction layers can ease potential future migrations   \u25e6 Strong security features including row-level security</p>"},{"location":"adr/ADR-0008-database-selection/#deferred-alternatives","title":"Deferred Alternatives","text":"<p>What alternatives are we deferring for future consideration?</p> <p>Alternative: MongoDB \u2022 Trigger: Document-heavy workloads or need for flexible schema evolution \u2022 Timeline: Sprint 6+ when document storage patterns emerge \u2022 Reason for deferral: Current relational data model fits well with PostgreSQL; team has limited NoSQL experience</p> <p>Alternative: Amazon Aurora/RDS \u2022 Trigger: Operational complexity of self-managed databases becomes prohibitive \u2022 Timeline: Phase 2 when moving to production-grade infrastructure \u2022 Reason for deferral: Phase 1 focuses on rapid development; managed services can be evaluated later</p>"},{"location":"adr/ADR-0008-database-selection/#rejected-alternatives","title":"Rejected Alternatives","text":"<p>What alternatives are we rejecting?</p> <p>\u2022 MySQL: Limited advanced data types, weaker consistency guarantees, less suitable for complex queries \u2022 In-memory databases (Redis as primary): Lack of ACID guarantees and persistence requirements for financial data</p>"},{"location":"adr/ADR-0008-database-selection/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do because of this change?</p> <p>Positive: \u2022 Consistent data persistence layer across all microservices \u2022 ACID transaction guarantees supporting financial operation requirements \u2022 Leveraged existing team PostgreSQL expertise for faster development \u2022 Database instance per service supporting independent scaling and deployment \u2022 Rich querying capabilities supporting complex business logic \u2022 Strong security features including row-level security</p> <p>Negative: \u2022 Additional operational complexity managing multiple PostgreSQL instances \u2022 Potential performance limitations for specialized workloads (time-series, graph data) \u2022 Resource overhead from multiple database instances \u2022 Initial setup complexity for database-per-service pattern</p> <p>Mitigation Strategies: \u2022 Implement database abstraction layers to ease potential migrations \u2022 Establish performance baselines and monitoring for each database instance \u2022 Document service-specific database requirements and scaling characteristics \u2022 Use containerization and automation to reduce operational overhead</p>"},{"location":"adr/ADR-0008-database-selection/#revisit-triggers","title":"Revisit Triggers","text":"<p>\u2022 Performance requirements exceed PostgreSQL capabilities for specific services \u2022 Specialized data patterns (e.g., time-series, graph) require purpose-built databases \u2022 Operational complexity of managing multiple PostgreSQL instances becomes prohibitive \u2022 Cost analysis shows significant savings with managed database services</p>"},{"location":"adr/ADR-0008-database-selection/#target-sprint-for-formal-decision","title":"Target Sprint for Formal Decision","text":"<p>\u2022 Target Sprint: Sprint 4 (formal decision after initial business logic and integration testing)</p>"},{"location":"adr/ADR-0008-database-selection/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0008-database-selection/#must","title":"Must","text":"<p>\u2022 Implement database access through abstraction layers to ease potential migrations \u2022 All schema changes performed through migration tools (e.g., Flyway) \u2022 Configuration and connection info must be managed via secrets manager (not in source code or env vars) \u2022 Use strict role-based access for application and migration credentials</p>"},{"location":"adr/ADR-0008-database-selection/#should","title":"Should","text":"<p>\u2022 Standardize database schema migration patterns across services \u2022 Establish performance baselines and monitoring for each database instance \u2022 Document service-specific database requirements and scaling characteristics \u2022 Implement connection pooling and resource management best practices</p>"},{"location":"adr/ADR-0008-database-selection/#wont","title":"Won't","text":"<p>\u2022 No use of proprietary PostgreSQL extensions that would hinder portability or cloud compatibility \u2022 No direct database access from frontend applications \u2022 No storing of application secrets or configuration in database</p>"},{"location":"adr/ADR-0008-database-selection/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review Pending Security Review Pending SRE Review Pending"},{"location":"adr/ADR-0008-database-selection/#links","title":"Links","text":"<p>Review Before Deciding: \u2022 Performance benchmarks: /docs/benchmarks/api-performance.md \u2022 Security guidelines: /docs/security/security-guidelines.md \u2022 Architecture principles: /docs/architecture/principles.md \u2022 Technology radar: /docs/tech-radar/technology-radar.md \u2022 Cost analysis framework: /docs/cost-analysis/framework.md \u2022 Scalability patterns: /docs/patterns/scalability-patterns.md \u2022 Monitoring standards: /docs/monitoring/standards.md \u2022 Compliance requirements: /docs/compliance/requirements.md</p> <p>Technology Landscape: Database</p> <p>Product/PRD: Data storage, scalability requirements, consistency requirements</p> <p>Sprint Plan: Sprint 1 \u2013 Core Platform Foundation</p> <p>Related ADRs: \u2022 ADR-0002: Microservices Architecture \u2022 ADR-0006: Docker Compose for Phase 1 Orchestration \u2022 ADR-0009: Schema Migration Strategy</p>"},{"location":"adr/ADR-0009-schema-migration-strategy/","title":"ADR-0009: Schema Migration Strategy","text":"<p>Author: TBD | Status: Open | Date: 2025-08-13 | Deciders: TBD | Technical Story: TBD | Tags: migrations, flyway, database</p>"},{"location":"adr/ADR-0009-schema-migration-strategy/#context","title":"Context","text":"<ul> <li>Flyway provides mature database schema versioning and migration capabilities essential for maintaining data integrity across deployments and environments.</li> <li>Database schema evolution requires systematic version control, rollback capabilities, and coordinated deployment across microservices architecture.</li> <li>Schema migration strategy directly impacts deployment reliability, data consistency, and team development workflows across the microservices platform.</li> <li>PRD alignment: Migration strategy and release management require coordinated schema deployments with zero-downtime capabilities.</li> </ul>"},{"location":"adr/ADR-0009-schema-migration-strategy/#decision","title":"Decision","text":"<p>Adopt Flyway for database schema migrations with service-specific migration repositories, coordinated deployment pipelines, and automated rollback capabilities for Phase 1 development.</p> <p>For now: - Service-Level Migrations: Each microservice manages its own migration files in <code>src/main/resources/db/migration/</code> - Docker Integration: Flyway migrations executed during container startup via Spring Boot auto-configuration - Local Development: Docker Compose health checks ensure migrations complete before service dependencies start - Migration Naming: Standard Flyway convention <code>V{version}__{description}.sql</code> (e.g., <code>V1__create_users_table.sql</code>) - Rollback Strategy: Manual rollback scripts for critical issues, automated rollback capabilities deferred - No cross-service migration coordination initially - Limited to SQL-based migrations (Java migrations deferred) - Single environment promotion workflow (dev \u2192 prod) - Basic validation and checksum verification only</p>"},{"location":"adr/ADR-0009-schema-migration-strategy/#rationale-pillars","title":"Rationale Pillars","text":"<p>Technical Foundation: - Flyway provides mature, battle-tested database migration capabilities with extensive community support - Service-specific migration repositories align with microservices architecture principles - Spring Boot auto-configuration reduces implementation complexity for Sprint 1 timeline</p> <p>Development Velocity: - Standard Flyway conventions minimize learning curve for development team - Docker integration provides consistent migration execution across environments - Simplified approach enables immediate Sprint 1-2 implementation without blocking dependencies</p> <p>Risk Mitigation: - Manual rollback scripts provide safety net for critical production issues - Checksum verification ensures migration integrity across deployments - Service-level isolation prevents cascading migration failures across microservices</p>"},{"location":"adr/ADR-0009-schema-migration-strategy/#deferred-alternatives","title":"Deferred Alternatives","text":"<p>Trigger: Sprint 3-4 review based on operational experience Timeline: 4-6 weeks post Sprint 1 completion Reason for deferral: Sprint velocity and complexity management</p> <p>Liquibase: - XML/YAML-based approach adds complexity for current sprint velocity requirements - Advanced features not immediately needed for Phase 1 development</p> <p>Advanced Flyway Features: - Cross-service coordination capabilities - Java-based migrations for complex transformations - Advanced rollback and validation features</p> <p>Native Database Tools: - Would require custom tooling development, conflicting with Sprint 1 timeline - Lacks standardization across different database engines</p>"},{"location":"adr/ADR-0009-schema-migration-strategy/#rejected-alternatives","title":"Rejected Alternatives","text":"<p>Application-Level Migrations: - Spring Boot/JPA auto-DDL approaches lack production-grade control - Cannot provide reliable rollback capabilities - Insufficient for complex schema evolution requirements</p>"},{"location":"adr/ADR-0009-schema-migration-strategy/#consequences","title":"Consequences","text":""},{"location":"adr/ADR-0009-schema-migration-strategy/#positive","title":"Positive","text":"<ul> <li>Immediate implementation capability within Sprint 1-2 timeline</li> <li>Proven, mature migration technology reduces implementation risk</li> <li>Service isolation prevents cross-service migration dependencies</li> <li>Docker integration provides consistent execution environment</li> <li>Standard naming conventions improve team collaboration</li> </ul>"},{"location":"adr/ADR-0009-schema-migration-strategy/#negative","title":"Negative","text":"<ul> <li>Limited cross-service coordination capabilities initially</li> <li>Manual rollback processes increase operational overhead</li> <li>Single environment promotion may limit deployment flexibility</li> <li>Deferred Java migration capabilities may require future refactoring</li> </ul>"},{"location":"adr/ADR-0009-schema-migration-strategy/#mitigation-strategies","title":"Mitigation Strategies","text":"<ul> <li>Document migration dependencies between services for future coordination planning</li> <li>Establish rollback script templates and procedures for consistent manual processes</li> <li>Plan Sprint 3-4 review to evaluate cross-service coordination requirements</li> <li>Monitor migration execution times to identify performance bottlenecks early</li> </ul>"},{"location":"adr/ADR-0009-schema-migration-strategy/#revisit-triggers","title":"Revisit Triggers","text":"<ul> <li>Performance Issues: Migration execution time exceeds acceptable deployment windows</li> <li>Coordination Failures: Cross-service schema dependencies cause deployment blocking</li> <li>Complexity Growth: Migration scripts become difficult to manage or validate</li> <li>Team Feedback: Development workflow friction increases beyond acceptable levels</li> <li>Production Incidents: Schema-related issues impact system availability</li> </ul>"},{"location":"adr/ADR-0009-schema-migration-strategy/#target-sprint-for-formal-decision","title":"Target Sprint for Formal Decision","text":"<p>Primary Review: Sprint 3-4 (after basic microservices are operational)</p> <p>Secondary Review: Sprint 8 (after initial production deployment experience)</p> <p>The Sprint 3-4 review will focus on adding cross-service coordination and advanced validation. The Sprint 8 review will evaluate the full production experience and consider more sophisticated alternatives.</p>"},{"location":"adr/ADR-0009-schema-migration-strategy/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0009-schema-migration-strategy/#must","title":"Must","text":"<ul> <li>All migration files must follow standard Flyway naming convention <code>V{version}__{description}.sql</code></li> <li>Migration checksums must be validated before deployment to any environment</li> <li>Each service must maintain its own migration repository within service codebase</li> <li>Manual rollback scripts must be prepared for all structural schema changes</li> </ul>"},{"location":"adr/ADR-0009-schema-migration-strategy/#should","title":"Should","text":"<ul> <li>Migration execution should complete within 30 seconds for local development</li> <li>Migration scripts should include descriptive comments for complex transformations</li> <li>Service startup should fail fast if migration validation fails</li> <li>Migration history should be preserved in version control with clear commit messages</li> </ul>"},{"location":"adr/ADR-0009-schema-migration-strategy/#wont","title":"Won't","text":"<ul> <li>Won't implement cross-service migration coordination in Sprint 1-2</li> <li>Won't support Java-based migrations initially</li> <li>Won't implement automated rollback capabilities in Phase 1</li> <li>Won't support multiple environment promotion workflows initially</li> </ul>"},{"location":"adr/ADR-0009-schema-migration-strategy/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Technical Review TBD TBD Pending Initial technical assessment Architecture Review TBD TBD Pending Alignment with microservices architecture Security Review TBD TBD Pending Migration security and access control Final Approval TBD TBD Pending Go/No-go decision"},{"location":"adr/ADR-0009-schema-migration-strategy/#links","title":"Links","text":""},{"location":"adr/ADR-0009-schema-migration-strategy/#review-before-deciding","title":"Review Before Deciding","text":"<ul> <li>Performance benchmarks: /docs/benchmarks/api-performance.md</li> <li>Security guidelines: /docs/security/security-guidelines.md</li> <li>Architecture principles: /docs/architecture/principles.md</li> <li>Technology radar: /docs/tech-radar/technology-radar.md</li> <li>Cost analysis framework: /docs/cost-analysis/framework.md</li> <li>Scalability patterns: /docs/patterns/scalability-patterns.md</li> <li>Monitoring standards: /docs/monitoring/standards.md</li> <li>Compliance requirements: /docs/compliance/requirements.md</li> </ul> <p>Technology Landscape: - Flyway Documentation - Spring Boot Database Migration</p> <p>Product/PRD: - Migration strategy - Release management</p> <p>Sprint Plan: - TBD</p> <p>Related ADRs: - TBD</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/","title":"ADR-0010: Identity Provider and Claims Strategy","text":"<p>\u2022 Author: @author \u2022 Status: Open \u2022 Date: 2025-08-13 \u2022 Deciders: @name1, @name2, @name3 \u2022 Technical Story: [optional link to ticket/issue] \u2022 Tags: identity, authentication, claims</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#context","title":"Context","text":"<p>What is the issue that we're seeing that is motivating this decision or change?</p> <p>OAuth 2.0 with OpenID Connect provides standardized identity and claims management essential for secure user authentication across microservices architecture. Claims-based identity strategy enables fine-grained access control, user attribute management, and seamless integration with external identity providers. Identity provider selection directly impacts security posture, user experience, and compliance requirements across the DealSphere platform.</p> <p>PRD alignment: Identity and access management, security requirements, and compliance mandate robust identity verification and user attribute management.</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#decision","title":"Decision","text":"<p>What is the change that we're proposing and/or doing?</p> <p>Adopt OAuth 2.0 with OpenID Connect for identity management, implementing JWT-based claims strategy with support for multiple identity providers and standardized user attribute handling for Phase 1 development.</p> <p>For now: \u2022 Selected Identity Provider: Keycloak OpenID Connect (OIDC) with JWT tokens for all services during Sprint 1 foundational implementation \u2022 Token Format: JWT tokens with standardized claims structure (sub, aud, iss, exp, iat, roles, permissions) \u2022 Scopes: Standard OpenID Connect scopes (openid, profile, email) plus custom scopes for service-specific access (dealsphere:read, dealsphere:write, dealsphere:admin) \u2022 Integration Pattern: Direct OIDC client integration for each microservice with token validation middleware \u2022 Claims Mapping: Standardized user attributes mapped to JWT claims for consistent RBAC implementation \u2022 Security Configuration:   \u2022 Token expiration: 15-minute access tokens with 24-hour refresh tokens   \u2022 PKCE flow for client applications   \u2022 RS256 signature algorithm with rotating keys   \u2022 Secure token storage using httpOnly cookies for web clients</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#rationale","title":"Rationale","text":"<p>Why is this the right decision given our architectural pillars?</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#rationale-pillars","title":"Rationale Pillars","text":""},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#why-identity-provider-and-claims-strategy-oauth-20-openid-connect","title":"Why Identity Provider and Claims Strategy (OAuth 2.0 + OpenID Connect)","text":"<p>\u2022 Pillar 1 (Stability and Support)   \u25e6 OAuth 2.0 and OpenID Connect provide mature, widely-adopted identity standards   \u25e6 JWT token format enables stateless authentication and distributed claims verification</p> <p>\u2022 Pillar 2 (Ecosystem Readiness)   \u25e6 Standard scopes and claims reduce integration complexity with external providers   \u25e6 Comprehensive security features including PKCE, state parameters, and token validation</p> <p>\u2022 Pillar 3 (Team Proficiency and Velocity)   \u25e6 Support for enterprise identity providers (Azure AD, Google Workspace, Okta)   \u25e6 Social login integration for consumer-facing features</p> <p>\u2022 Pillar 4 (Modern Features without migration burden)   \u25e6 Custom identity provider implementation for internal user management   \u25e6 Standardized token exchange and claims mapping across providers</p> <p>\u2022 Pillar 5 (Risk Management)   \u25e6 Token-based authentication reducing password security risks   \u25e6 Short-lived access tokens with refresh token rotation</p> <p>\u2022 Pillar 6 (Upgrade Path Considerations)   \u25e6 Audit trail through standardized token logging and validation   \u25e6 Compliance support for data privacy regulations through user attribute control</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#deferred-alternatives","title":"Deferred Alternatives","text":"<p>What alternatives are we deferring for future consideration?</p> <p>Alternative: Enterprise Identity Federation (Beyond Basic OIDC) \u2022 Trigger: When enterprise customer requirements demand advanced federation features \u2022 Timeline: Phase 2 enterprise rollout \u2022 Reason for deferral: Current OIDC implementation meets Phase 1 requirements without additional complexity</p> <p>Alternative: Multi-Region Identity Synchronization \u2022 Trigger: When geographic distribution requires local identity stores \u2022 Timeline: Global expansion phase \u2022 Reason for deferral: Single region deployment sufficient for initial market validation</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#rejected-alternatives","title":"Rejected Alternatives","text":"<p>What alternatives are we rejecting?</p> <p>\u2022 SAML 2.0: Enterprise-grade federation but XML complexity, less mobile-friendly, limited modern application integration \u2022 Custom Authentication System: Full control but significant development overhead, security risks, compliance challenges \u2022 Session-based Authentication: Simpler implementation but poor scalability across microservices, stateful session management complexity</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do because of this change?</p> <p>Positive: \u2022 Standardized authentication flow across all microservices \u2022 Enhanced security through token-based authentication and short-lived tokens \u2022 Simplified integration with external identity providers \u2022 Fine-grained access control through claims-based authorization \u2022 Improved user experience with single sign-on capabilities \u2022 Compliance-ready user attribute management</p> <p>Negative: \u2022 Additional infrastructure complexity with Keycloak deployment and management \u2022 Token validation overhead across all service calls \u2022 Potential single point of failure if identity provider becomes unavailable \u2022 Learning curve for team members unfamiliar with OAuth 2.0/OIDC workflows</p> <p>Mitigation Strategies: \u2022 Implement Keycloak high availability configuration with clustering \u2022 Add comprehensive monitoring and alerting for identity provider health \u2022 Create fallback authentication mechanisms for critical system operations \u2022 Provide team training and documentation for OAuth 2.0/OIDC implementation \u2022 Implement token caching strategies to reduce validation overhead</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#revisit-triggers","title":"Revisit Triggers","text":"<p>\u2022 Performance impact from token validation exceeds acceptable thresholds (&gt;50ms per request) \u2022 Enterprise customer requirements demand SAML 2.0 or other federation protocols \u2022 Security audit identifies vulnerabilities in current JWT implementation \u2022 Keycloak operational overhead becomes prohibitive (&gt;20% of infrastructure costs)</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#target-sprint-for-formal-decision","title":"Target Sprint for Formal Decision","text":"<p>\u2022 Target Sprint: Sprint 1 for foundational implementation and Sprint 2 for production readiness</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#must","title":"Must","text":"<p>\u2022 All authentication must flow through designated identity provider \u2022 JWT tokens must be validated on every protected endpoint \u2022 Sensitive operations must require fresh token validation \u2022 User permissions must be derived from standardized claims structure</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#should","title":"Should","text":"<p>\u2022 Token expiration should follow recommended security practices (15-minute access tokens) \u2022 Claims should follow OpenID Connect standard naming conventions \u2022 Identity provider should be deployed with high availability configuration \u2022 All identity operations should be logged for audit purposes</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#wont","title":"Won't","text":"<p>\u2022 Direct database user authentication bypassing identity provider \u2022 Long-lived access tokens (&gt;1 hour) for any use case \u2022 Custom token formats outside JWT standard \u2022 Embedded user credentials in application configuration</p>"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review Pending Security Review Pending SRE Review Pending"},{"location":"adr/ADR-0010-identity-provider-and-claims-strategy/#links","title":"Links","text":"<p>Review Before Deciding: \u2022 Performance benchmarks: /docs/benchmarks/api-performance.md \u2022 Security guidelines: /docs/security/security-guidelines.md \u2022 Architecture principles: /docs/architecture/principles.md \u2022 Technology radar: /docs/tech-radar/technology-radar.md \u2022 Cost analysis framework: /docs/cost-analysis/framework.md \u2022 Scalability patterns: /docs/patterns/scalability-patterns.md \u2022 Monitoring standards: /docs/monitoring/standards.md \u2022 Compliance requirements: /docs/compliance/requirements.md</p> <p>Technology Landscape: [Link to relevant technology documentation]</p> <p>Product/PRD: Phase 1 PRD</p> <p>Sprint Plan: [Link to sprint planning documentation]</p> <p>Related ADRs: \u2022 ADR-0011: Authorization Strategy \u2022 ADR-0012: Secrets Management</p>"},{"location":"adr/ADR-0011-authorization-strategy/","title":"ADR-0011: Authorization Strategy","text":"<p>Permalink: ADR-0011</p> <p>Author: @dealsphere-dev \u2022 Status: Open \u2022 Date: 2025-08-13 \u2022 Deciders: @architecture-team, @security-team, @platform-team \u2022 Technical Story: Authorization requirements from Phase 1 PRD \u2022 Tags: authorization, security, rbac</p>"},{"location":"adr/ADR-0011-authorization-strategy/#context","title":"Context","text":"<p>The DealSphere platform requires a comprehensive authorization strategy to control access to resources and operations across all microservices. With multiple user roles, complex business rules, and strict data privacy requirements outlined in the Product Requirements Document, we need a unified approach to authorization that integrates seamlessly with our chosen identity provider (ADR-0010).</p> <p>Key requirements from PRD alignment: \u2022 Role-based access control for user types (viewers, bidders, sellers, admins) \u2022 Principle of least privilege enforcement \u2022 Fine-grained permissions for deal management operations \u2022 Audit trail compliance for financial transactions \u2022 Performance requirements for high-frequency API calls</p>"},{"location":"adr/ADR-0011-authorization-strategy/#decision","title":"Decision","text":"<p>For Phase 1, we will adopt Role-Based Access Control (RBAC) with policy-based authorization using Spring Security framework with method-level annotations.</p>"},{"location":"adr/ADR-0011-authorization-strategy/#for-now","title":"For now","text":"<p>For now: Spring Security with @PreAuthorize and @PostAuthorize annotations, JWT claims-based role propagation from identity provider, centralized role definitions with distributed enforcement, and method-level security for fine-grained control.</p> <p>Implementation Details: \u2022 Role Definitions: Four primary roles (VIEWER, BIDDER, SELLER, ADMIN) mapped to JWT claims \u2022 Permission Model: Resource-action patterns (e.g., deal:read, bid:create, user:admin) \u2022 Enforcement Points: Service method annotations with SpEL expressions \u2022 Caching Strategy: Role/permission resolution cached for 15 minutes to optimize performance \u2022 Audit Integration: All authorization decisions logged with request context</p> <p>Technology Stack: \u2022 Spring Security 6.x with method-level security enabled \u2022 JWT token validation with role extraction \u2022 Custom SecurityContext propagation across service boundaries \u2022 Redis-backed permission cache for performance</p>"},{"location":"adr/ADR-0011-authorization-strategy/#rationale","title":"Rationale","text":"<p>Performance: Authorization decisions must be fast enough for high-frequency trading scenarios without compromising security. Method-level caching with Redis provides sub-millisecond authorization decisions while maintaining security boundaries.</p> <p>Scalability: RBAC model scales efficiently with user growth and role complexity. Distributed enforcement allows each microservice to make independent authorization decisions without central bottlenecks.</p> <p>Maintainability: Declarative annotations reduce boilerplate and make security requirements explicit in code. Spring Security integration provides well-tested patterns and extensive community support.</p> <p>Security: Financial platform requires auditable access controls and clear authorization boundaries for SOX compliance. Multi-tenant architecture needs strict resource isolation to prevent unauthorized access to deal information.</p> <p>Cost: Spring Security integration leverages existing framework investments and reduces development time compared to custom authorization solutions.</p>"},{"location":"adr/ADR-0011-authorization-strategy/#deferred-alternatives","title":"Deferred Alternatives","text":"<p>Alternative: Attribute-Based Access Control (ABAC) with policy engine Trigger: User base exceeds 10,000 active users or business rules become too complex for RBAC Timeline: Sprint 12 evaluation, Sprint 15 implementation if triggered Reason for deferral: ABAC adds significant complexity for Phase 1 requirements. RBAC meets current needs while allowing future migration path.</p> <p>Alternative: OAuth2 scopes-based authorization Trigger: External API partnerships require OAuth2 scope delegation Timeline: Sprint 8 evaluation based on partnership requirements Reason for deferral: Current Phase 1 focuses on internal platform users. OAuth2 scopes add unnecessary complexity for JWT-based internal authorization.</p> <p>Alternative: Custom authorization service Trigger: Authorization performance becomes a bottleneck (&gt;5ms p99) or Spring Security limitations block critical features Timeline: Sprint 10 evaluation, Sprint 12 implementation if needed Reason for deferral: Spring Security provides proven solution with excellent performance characteristics. Custom service adds development and maintenance overhead.</p>"},{"location":"adr/ADR-0011-authorization-strategy/#rejected-alternatives","title":"Rejected Alternatives","text":"<p>ACL (Access Control Lists): Rejected due to maintenance complexity and poor scalability with growing user base.</p> <p>Session-based authorization: Rejected due to stateless architecture requirements and microservices distribution challenges.</p> <p>Database-driven permissions: Rejected due to performance concerns and tight coupling between authorization logic and data layer.</p>"},{"location":"adr/ADR-0011-authorization-strategy/#consequences","title":"Consequences","text":"<p>Positive: \u2022 Mature, well-tested authorization framework with extensive documentation \u2022 Seamless integration with existing Spring Boot microservices \u2022 Method-level annotations provide clear security boundaries \u2022 Strong audit capabilities for regulatory compliance \u2022 Performance optimization through caching layers \u2022 Developer familiarity reduces learning curve</p> <p>Negative: \u2022 Spring Security learning curve for complex SpEL expressions \u2022 Potential performance overhead for high-frequency operations \u2022 Framework lock-in makes future migration more complex \u2022 Limited flexibility compared to custom authorization solutions \u2022 Debugging authorization issues can be challenging</p> <p>Mitigation Strategies: \u2022 Comprehensive Spring Security training for development team \u2022 Performance testing with authorization overhead measurement \u2022 Clear migration path documented for future ABAC transition \u2022 Standardized SpEL expression patterns and code review guidelines \u2022 Enhanced logging and debugging tools for authorization troubleshooting</p>"},{"location":"adr/ADR-0011-authorization-strategy/#revisit-triggers","title":"Revisit Triggers","text":"<p>\u2022 Authorization performance degrades below 2ms p99 threshold \u2022 User base growth exceeds 10,000 active users \u2022 Business rule complexity requires attribute-based decisions \u2022 External API partnerships require OAuth2 scope delegation \u2022 Regulatory requirements change authorization audit needs \u2022 Spring Security framework limitations block critical features</p>"},{"location":"adr/ADR-0011-authorization-strategy/#target-sprint-for-formal-decision","title":"Target Sprint for Formal Decision","text":"<p>Implementation Timeline: \u2022 Sprint 3: Core RBAC framework setup and basic role definitions \u2022 Sprint 4: Method-level annotations and permission enforcement \u2022 Sprint 5: Caching layer and performance optimization \u2022 Sprint 6: Audit logging integration and compliance testing</p> <p>Decision Point: \u2022 Sprint 4: Formal decision confirmation based on implementation experience \u2022 Sprint 8: First major revisit trigger evaluation \u2022 Sprint 12: ABAC migration decision point</p>"},{"location":"adr/ADR-0011-authorization-strategy/#guardrails","title":"Guardrails","text":"<p>Must: \u2022 All authorization annotations must include audit logging \u2022 Role definitions must be version-controlled and peer-reviewed \u2022 Security testing must validate both positive and negative authorization cases \u2022 Default deny policy - all endpoints require explicit authorization \u2022 Sensitive operations require dual authorization (role + additional verification)</p> <p>Should: \u2022 Authorization decisions should complete within 2ms p99 \u2022 Permission cache should maintain &gt;90% hit ratio \u2022 No more than 3 authorization checks per business operation \u2022 Performance testing should include authorization overhead measurement</p> <p>Won't: \u2022 Role/permission matrix documentation updated with every change \u2022 Authorization configuration changes require security team approval \u2022 Automated testing for all permission combinations \u2022 Weekly authorization audit reports generated \u2022 Emergency role/permission override process documented \u2022 Authorization annotations mandatory for all public methods \u2022 Code review checklist includes authorization verification \u2022 Integration tests must cover authorization edge cases \u2022 Security training required for all developers working on authorization code</p>"},{"location":"adr/ADR-0011-authorization-strategy/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review @architecture-team 2025-08-14 Pending Initial review scheduled Security Review @security-team 2025-08-15 Pending Security audit planned SRE Review @sre-team 2025-08-16 Pending Performance validation needed"},{"location":"adr/ADR-0011-authorization-strategy/#links","title":"Links","text":"<p>Review Before Deciding: \u2022 Performance benchmarks: /docs/benchmarks/api-performance.md \u2022 Security guidelines: /docs/security/security-guidelines.md \u2022 Architecture principles: /docs/architecture/principles.md \u2022 Technology radar: /docs/tech-radar/technology-radar.md \u2022 Cost analysis framework: /docs/cost-analysis/framework.md \u2022 Scalability patterns: /docs/patterns/scalability-patterns.md \u2022 Monitoring standards: /docs/monitoring/standards.md \u2022 Compliance requirements: /docs/compliance/requirements.md</p> <p>Technology Landscape: Authorization</p> <p>Product/PRD: Authorization, RBAC, Least Privilege</p> <p>Sprint Plan: Phase 1 Sprint Plan</p> <p>Related ADRs: \u2022 ADR-0010: Identity Provider and Claims Strategy - Provides JWT claims for authorization decisions \u2022 ADR-0012: Secrets Management - Handles authorization service credentials \u2022 ADR-0004: GraphQL via Apollo Router for External API - Gateway-level authorization integration</p>"},{"location":"adr/ADR-0012-secrets-management/","title":"ADR-0012: Secrets Management","text":"<p>Permalink: ADR-0012: Secrets Management</p> <p>\u2022 Author: @dealsphere-team \u2022 Status: Open \u2022 Date: 2025-08-13 \u2022 Deciders: @name1, @name2, @name3 \u2022 Technical Story: [optional link to ticket/issue] \u2022 Tags: secrets, security, vault</p>"},{"location":"adr/ADR-0012-secrets-management/#context","title":"Context","text":"<p>The DealSphere platform requires a secure and scalable approach to manage sensitive configuration data, API keys, database credentials, certificates, and other secrets across all microservices and environments.</p> <p>PRD Alignment: - Secrets Management Requirements \u2014 Essential for secure credential handling across the platform - Security Requirements \u2014 Foundational security controls for Phase 1 deployment</p>"},{"location":"adr/ADR-0012-secrets-management/#decision","title":"Decision","text":"<p>What is the change that we're proposing and/or doing?</p> <p>Use HashiCorp Vault as the centralized secrets manager with application-level secret retrieval via SDK integration for Sprint 1 needs.</p> <p>For now: \u2022 Central secrets store with encryption at rest and in transit \u2022 Application-level retrieval using Vault SDK (Java client libraries) \u2022 Basic secret rotation capabilities with manual triggers</p>"},{"location":"adr/ADR-0012-secrets-management/#rationale","title":"Rationale","text":"<p>Why is this the right decision given our architectural pillars?</p>"},{"location":"adr/ADR-0012-secrets-management/#rationale-pillars","title":"Rationale Pillars","text":""},{"location":"adr/ADR-0012-secrets-management/#why-secrets-management-hashicorp-vault","title":"Why Secrets Management (HashiCorp Vault)","text":"<p>\u2022 Security:    \u25e6 Eliminates hardcoded credentials and reduces attack surface   \u25e6 Provides encryption at rest and in transit for all secrets</p> <p>\u2022 Compliance:   \u25e6 Provides audit trails and access controls required for enterprise deployment   \u25e6 Enables fine-grained access control policies</p> <p>\u2022 Operational Excellence:   \u25e6 Enables secret rotation without application restarts   \u25e6 Centralized management across multiple microservices and environments</p> <p>\u2022 Team Proficiency and Velocity:   \u25e6 Consistent secret access patterns across all services   \u25e6 Well-documented Java SDK integration paths</p> <p>\u2022 Modern Features without migration burden:   \u25e6 Docker Compose integration for local development   \u25e6 Supports multiple authentication methods</p> <p>\u2022 Risk Management:   \u25e6 Reduces risk of credential exposure in configuration files   \u25e6 Provides audit logging for all secret access operations</p>"},{"location":"adr/ADR-0012-secrets-management/#deferred-alternatives","title":"Deferred Alternatives","text":"<p>What alternatives are we deferring for future consideration?</p> <p>Alternative: Vault Agent Sidecar Pattern \u2022 Trigger: When container orchestration matures beyond Docker Compose \u2022 Timeline: Sprint 5+ when Kubernetes adoption begins \u2022 Reason for deferral: Adds complexity to current Docker Compose setup</p> <p>Alternative: Cloud-native KMS Integration (AWS/Azure) \u2022 Trigger: Phase 2 cloud migration requirements \u2022 Timeline: Phase 2 cloud deployment timeline \u2022 Reason for deferral: Not aligned with Phase 1 on-premise requirements</p>"},{"location":"adr/ADR-0012-secrets-management/#rejected-alternatives","title":"Rejected Alternatives","text":"<p>\u2022 Environment Variables in CI/CD: No secret rotation capabilities, limited audit capabilities, secrets visible in process lists \u2022 KMS-only without Vault: No centralized secret storage, complex application integration, no built-in rotation mechanisms</p>"},{"location":"adr/ADR-0012-secrets-management/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do because of this change?</p> <p>Positive: \u2022 Enhanced security posture with encrypted secret storage \u2022 Audit trail for all secret access operations \u2022 Simplified secret rotation and management \u2022 Consistent secret access patterns across services \u2022 Support for multiple authentication methods</p> <p>Negative: \u2022 Additional infrastructure component to manage \u2022 Network dependency for secret retrieval \u2022 Initial setup complexity for SDK integration \u2022 Potential single point of failure (mitigated by HA deployment)</p> <p>Mitigation Strategies: \u2022 Services require modification for Vault integration \u2022 Development environment setup includes Vault configuration \u2022 Implement graceful fallback mechanisms for service startup</p>"},{"location":"adr/ADR-0012-secrets-management/#revisit-triggers","title":"Revisit Triggers","text":"<p>\u2022 Performance issues with secret retrieval latency (&gt;100ms p95) \u2022 Compliance requirements change significantly \u2022 Alternative secrets management solutions mature substantially \u2022 Phase 2 cloud-native requirements conflict with current approach \u2022 Sprint 1 services exceed 5 concurrent secret requests per service</p>"},{"location":"adr/ADR-0012-secrets-management/#target-sprint-for-formal-decision","title":"Target Sprint for Formal Decision","text":"<p>\u2022 Target Sprint: Sprint 3 (Phase 1) for Vault infrastructure setup and core integration</p>"},{"location":"adr/ADR-0012-secrets-management/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0012-secrets-management/#must","title":"Must","text":"<p>\u2022 All secrets MUST be stored in Vault, never in environment variables or config files \u2022 Secret access MUST be logged and auditable \u2022 Development environments MUST use Vault dev mode with local Docker instance \u2022 Initial services (User Service, Auth Service) MUST integrate via Vault Java SDK \u2022 Vault policies MUST follow principle of least privilege for Sprint 1 services</p>"},{"location":"adr/ADR-0012-secrets-management/#should","title":"Should","text":"<p>\u2022 Applications SHOULD handle Vault unavailability gracefully with cached secrets (15-minute TTL) \u2022 Secret rotation SHOULD be implemented for database credentials \u2022 Backup procedures SHOULD be established for Vault data</p>"},{"location":"adr/ADR-0012-secrets-management/#wont","title":"Won't","text":"<p>\u2022 Advanced HA deployment (single instance acceptable for Sprint 1) \u2022 Automated secret rotation (manual acceptable for Sprint 1) \u2022 Multi-datacenter replication</p>"},{"location":"adr/ADR-0012-secrets-management/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review Pending Security Review Pending SRE Review Pending"},{"location":"adr/ADR-0012-secrets-management/#links","title":"Links","text":"<p>Review Before Deciding: \u2022 Performance benchmarks: /docs/benchmarks/api-performance.md \u2022 Security guidelines: /docs/security/security-guidelines.md \u2022 Architecture principles: /docs/architecture/principles.md \u2022 Technology radar: /docs/tech-radar/technology-radar.md \u2022 Cost analysis framework: /docs/cost-analysis/framework.md \u2022 Scalability patterns: /docs/patterns/scalability-patterns.md \u2022 Monitoring standards: /docs/monitoring/standards.md \u2022 Compliance requirements: /docs/compliance/requirements.md</p> <p>Technology Landscape: Secrets Management</p> <p>Product/PRD: Secrets Management and Security Requirements</p> <p>Sprint Plan: Phase 1 Sprint Plan</p> <p>Related ADRs: \u2022 ADR-0010: Identity Provider and Claims Strategy \u2022 ADR-0011: Authorization Strategy</p>"},{"location":"adr/ADR-0013-observability-stack/","title":"ADR-0013: Observability Stack","text":"<p>\u2022 Permalink: https://github.com/DealSphere-Inc/dealsphere-platform/blob/main/docs/adr/ADR-0013-observability-stack.md \u2022 Author: @MysterTech \u2022 Status: Open \u2022 Date: 2025-08-13 \u2022 Deciders: @MysterTech, @team \u2022 Technical Story: Sprint 1 observability requirements \u2022 Tags: observability, monitoring, logging</p>"},{"location":"adr/ADR-0013-observability-stack/#context","title":"Context","text":"<p>What is the issue that we're seeing that is motivating this decision or change?</p> <p>The DealSphere platform requires comprehensive observability capabilities to support our microservices architecture across development, staging, and production environments. As outlined in Sprint 1 requirements, we need metrics, logging, and distributed tracing to ensure operational visibility, debugging capabilities, and performance monitoring.</p> <p>Key drivers include: - Microservices architecture creating distributed system complexity requiring end-to-end visibility - Team needs for rapid debugging and incident response in production - Compliance requirements for audit trails and performance monitoring - Cost-effective solution that scales with our service growth from 5 to 20+ services - Integration with existing Docker Compose development workflow and future Kubernetes deployment</p> <p>The team has mixed experience with observability tools, requiring a balance between powerful features and operational simplicity. Current constraints include limited DevOps resources and preference for open-source solutions to maintain cost control during early platform phases.</p> <p>Environment scope covers development (Docker Compose), staging, and production environments. Platform dependencies include integration with existing Java 17 microservices, gRPC inter-service communication, and PostgreSQL databases.</p>"},{"location":"adr/ADR-0013-observability-stack/#decision","title":"Decision","text":"<p>What is the change that we're proposing and/or doing?</p> <p>We adopt a unified observability stack based on the Grafana ecosystem (Prometheus, Loki, Tempo, Grafana) for metrics, logs, and distributed tracing across all DealSphere platform services.</p> <p>For now: \u2022 Metrics: Prometheus + Grafana for metrics collection, storage, and visualization \u2022 Logs: Loki + Promtail for log aggregation and querying \u2022 Traces: Tempo for distributed tracing \u2022 Structured Logging: Standardized JSON logs across all services \u2022 Metrics Endpoints: Basic /metrics endpoint required on all services as per Sprint 1 alignment \u2022 Implementation scope limited to core platform services (5-8 services) for Sprint 1-3</p>"},{"location":"adr/ADR-0013-observability-stack/#rationale","title":"Rationale","text":"<p>Why is this the right decision given our architectural pillars?</p>"},{"location":"adr/ADR-0013-observability-stack/#rationale-pillars","title":"Rationale Pillars","text":""},{"location":"adr/ADR-0013-observability-stack/#why-grafana-ecosystem-observability-stack","title":"Why Grafana Ecosystem (Observability Stack)","text":"<p>\u2022 Pillar 1: Cost Control   \u25e6 Open-source stack minimizes licensing costs during platform growth phase   \u25e6 Self-hosted deployment avoids per-metric or per-GB pricing models of SaaS solutions   \u25e6 Horizontal scaling capabilities support cost-effective growth from 5 to 20+ services</p> <p>\u2022 Pillar 2: Operational Simplicity   \u25e6 Unified Grafana ecosystem reduces tooling complexity and learning curve   \u25e6 Common query language (LogQL/PromQL) across metrics and logs   \u25e6 Single pane of glass for all observability data</p> <p>\u2022 Pillar 3: Team Proficiency and Velocity   \u25e6 Prometheus metrics widely adopted in Java/Spring ecosystem   \u25e6 Rich integration with existing microservices patterns   \u25e6 Extensive community documentation and examples</p> <p>\u2022 Pillar 4: Modern Features without migration burden   \u25e6 Native support for distributed tracing with correlation IDs   \u25e6 Advanced querying capabilities for complex debugging scenarios   \u25e6 Built-in alerting and notification capabilities</p> <p>\u2022 Pillar 5: Risk Management   \u25e6 Mature ecosystem with proven scalability patterns   \u25e6 Active community support and regular security updates   \u25e6 Clear migration path to managed solutions if needed</p> <p>\u2022 Pillar 6: Upgrade Path Considerations   \u25e6 Native Kubernetes support ensures smooth transition from Docker Compose   \u25e6 Federation capabilities support future multi-cluster deployments   \u25e6 Compatible with cloud-native monitoring standards (OpenTelemetry)</p>"},{"location":"adr/ADR-0013-observability-stack/#deferred-alternatives","title":"Deferred Alternatives","text":"<p>What alternatives are we deferring for future consideration?</p> <p>Alternative: SaaS Observability Platforms (e.g., Datadog, New Relic) \u2022 Trigger: Monthly data ingestion costs exceed $500/month baseline or team scales beyond 10 engineers \u2022 Timeline: Sprint 6+ when operational costs and team size justify managed solutions \u2022 Reason for deferral: Cost concerns during early platform phases and preference for operational control</p> <p>Alternative: Managed Cloud Services (e.g., AWS CloudWatch, Azure Monitor) \u2022 Trigger: Cloud vendor strategy locked in or multi-cloud requirements eliminated \u2022 Timeline: Architecture review in Sprint 8+ when deployment patterns are established \u2022 Reason for deferral: Maintain cloud vendor neutrality and avoid lock-in during platform development</p> <p>Alternative: Commercial APM Solutions (e.g., AppDynamics, Dynatrace) \u2022 Trigger: Enterprise requirements or advanced application performance insights needed \u2022 Timeline: When advanced analytics requirements exceed open-source capabilities \u2022 Reason for deferral: Licensing costs and operational complexity not justified for current needs</p>"},{"location":"adr/ADR-0013-observability-stack/#rejected-alternatives","title":"Rejected Alternatives","text":"<p>\u2022 ELK Stack: Rejected due to Elasticsearch resource requirements and operational complexity for small team \u2022 Jaeger Standalone: Rejected in favor of unified Tempo integration with Grafana ecosystem</p>"},{"location":"adr/ADR-0013-observability-stack/#consequences","title":"Consequences","text":"<p>What becomes easier or more difficult to do because of this change?</p> <p>Positive: \u2022 Comprehensive observability across all platform services \u2022 Standardized metrics and logging patterns enable consistent debugging approach \u2022 Cost-effective scaling from development to production environments \u2022 Rich alerting and dashboard capabilities support proactive monitoring \u2022 Integration with existing CI/CD and deployment workflows</p> <p>Negative: \u2022 Initial setup complexity requiring DevOps investment in Sprint 1-2 \u2022 Self-managed infrastructure overhead for maintenance and updates \u2022 Limited advanced analytics compared to commercial APM solutions \u2022 Learning curve for team members unfamiliar with Prometheus/Grafana ecosystem</p> <p>Mitigation Strategies: \u2022 Create runbooks and automation for common operational tasks \u2022 Plan for dedicated DevOps capacity allocation in Sprint 2-3 \u2022 Implement sampling strategies for distributed tracing to manage overhead</p>"},{"location":"adr/ADR-0013-observability-stack/#revisit-triggers","title":"Revisit Triggers","text":"<p>\u2022 Monthly data ingestion costs exceed $500/month baseline \u2022 Query performance degradation impacting developer productivity (&gt;30s dashboard load times) \u2022 Storage requirements exceed 100GB/month for logs and metrics combined \u2022 Incident response times average &gt;15 minutes due to tooling limitations \u2022 Team velocity decreases due to observability stack operational overhead \u2022 Production service count reaches 15+ services requiring advanced federation features \u2022 Team size exceeds 10 engineers requiring advanced collaboration features \u2022 Compliance requirements demand enterprise-grade audit and retention capabilities</p>"},{"location":"adr/ADR-0013-observability-stack/#target-sprint-for-formal-decision","title":"Target Sprint for Formal Decision","text":"<p>Sprint 6 (when production monitoring and alerting are fully established and we have 3 months of operational data)</p>"},{"location":"adr/ADR-0013-observability-stack/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0013-observability-stack/#must","title":"Must","text":"<p>\u2022 All services MUST expose /metrics endpoint in Prometheus format \u2022 All logs MUST be structured JSON with standardized field names \u2022 No secrets or PII MUST appear in logs or metrics \u2022 Critical service health metrics MUST be available with &lt;5 minute SLA \u2022 All distributed traces MUST include correlation IDs for request tracking</p>"},{"location":"adr/ADR-0013-observability-stack/#should","title":"Should","text":"<p>\u2022 Services SHOULD implement custom business metrics relevant to their domain \u2022 Log retention SHOULD follow data classification policies (30 days development, 90 days production) \u2022 Dashboards SHOULD follow standardized naming and tagging conventions \u2022 Alerting rules SHOULD include runbook links and escalation procedures \u2022 Distributed tracing SHOULD cover end-to-end request flows across service boundaries</p>"},{"location":"adr/ADR-0013-observability-stack/#wont","title":"Won't","text":"<p>\u2022 System will NOT collect or store personally identifiable information in observability data \u2022 Observability stack will NOT be used for application data storage or business logic \u2022 Real-time alerting will NOT replace proper error handling and circuit breaker patterns</p>"},{"location":"adr/ADR-0013-observability-stack/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review Pending Security Review Pending SRE Review Pending"},{"location":"adr/ADR-0013-observability-stack/#links","title":"Links","text":""},{"location":"adr/ADR-0013-observability-stack/#review-before-deciding","title":"Review Before Deciding","text":"<p>\u2022 Performance benchmarks: /docs/benchmarks/api-performance.md \u2022 Security guidelines: /docs/security/security-guidelines.md \u2022 Architecture principles: /docs/architecture/principles.md \u2022 Technology radar: /docs/tech-radar/technology-radar.md \u2022 Cost analysis framework: /docs/cost-analysis/framework.md \u2022 Scalability patterns: /docs/patterns/scalability-patterns.md \u2022 Monitoring standards: /docs/monitoring/standards.md \u2022 Compliance requirements: /docs/compliance/requirements.md</p>"},{"location":"adr/ADR-0013-observability-stack/#technology-landscape","title":"Technology Landscape","text":"<p>\u2022 Technology Landscape - Observability Tools</p>"},{"location":"adr/ADR-0013-observability-stack/#productprd","title":"Product/PRD","text":"<p>\u2022 PRD - Platform Observability Requirements \u2022 Non-Functional Requirements - Monitoring</p>"},{"location":"adr/ADR-0013-observability-stack/#sprint-plan","title":"Sprint Plan","text":"<p>\u2022 Sprint 1 \u2013 Core Platform Foundation \u2022 Sprint 2 \u2013 Observability Implementation</p>"},{"location":"adr/ADR-0013-observability-stack/#related-adrs","title":"Related ADRs","text":"<p>\u2022 ADR-0002: Microservices Architecture \u2022 ADR-0006: Docker Compose Phase1 Orchestration \u2022 ADR-0007: Service Framework Defaults \u2022 ADR-0012: Secrets Management</p>"},{"location":"adr/ADR-0014-rate-limiting-strategy/","title":"ADR-0014: Rate Limiting Strategy","text":"<p>Status: Open  Date: 2025-08-13  Tags: rate-limiting, api, throttling   </p>"},{"location":"adr/ADR-0014-rate-limiting-strategy/#context","title":"Context","text":"<ul> <li>To be determined - problem space, constraints, and drivers.  </li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.  </li> <li>Note team expertise, ecosystem maturity, and operational realities.  </li> <li>Include links to internal docs when relevant.  </li> </ul>"},{"location":"adr/ADR-0014-rate-limiting-strategy/#decision","title":"Decision","text":"<p>To be determined - decision statement in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0014-rate-limiting-strategy/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0014-rate-limiting-strategy/#why-rate-limiting-strategy-tbd","title":"Why Rate Limiting Strategy (TBD)","text":"<ul> <li>Pillar 1 (e.g., Stability and Support) </li> <li>Supporting detail 1  </li> <li> <p>Supporting detail 2  </p> </li> <li> <p>Pillar 2 (e.g., Ecosystem Readiness) </p> </li> <li>Supporting detail 1  </li> <li> <p>Supporting detail 2  </p> </li> <li> <p>Pillar 3 (e.g., Team Proficiency and Velocity) </p> </li> <li>Supporting detail 1  </li> <li> <p>Supporting detail 2  </p> </li> <li> <p>Pillar 4 (e.g., Modern Features without migration burden)</p> </li> <li>Supporting detail 1  </li> <li> <p>Supporting detail 2  </p> </li> <li> <p>Pillar 5 (e.g., Risk Management)</p> </li> <li>Supporting detail 1  </li> <li> <p>Supporting detail 2  </p> </li> <li> <p>Pillar 6 (e.g., Upgrade Path Considerations)</p> </li> <li>Supporting detail 1  </li> <li>Supporting detail 2    </li> </ul>"},{"location":"adr/ADR-0014-rate-limiting-strategy/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Alternative A </li> <li>Pros: \u2026  </li> <li> <p>Cons: \u2026  </p> </li> <li> <p>Alternative B </p> </li> <li>Pros: \u2026  </li> <li> <p>Cons: \u2026  </p> </li> <li> <p>Alternative C </p> </li> <li>Pros: \u2026  </li> <li>Cons: \u2026  </li> </ul>"},{"location":"adr/ADR-0014-rate-limiting-strategy/#consequences","title":"Consequences","text":"<ul> <li>Positive: </li> <li>\u2026  </li> <li> <p>\u2026  </p> </li> <li> <p>Negative: </p> </li> <li>\u2026  </li> <li> <p>\u2026  </p> </li> <li> <p>Mitigation Strategies: </p> </li> <li>\u2026  </li> <li>\u2026  </li> </ul>"},{"location":"adr/ADR-0014-rate-limiting-strategy/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger: </li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)  </li> <li> <p>Condition 2 (e.g., scheduled upgrade window with regression capacity)  </p> </li> <li> <p>Target Sprint: </p> </li> <li>Sprint N (or timeframe) for adoption/change  </li> </ul>"},{"location":"adr/ADR-0014-rate-limiting-strategy/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.  </li> <li>Keep build configurations centralized to ease future upgrades.  </li> <li>Require performance and regression benchmarks for upgrades.  </li> <li>Any additional policy/process controls specific to this decision.  </li> </ul>"},{"location":"adr/ADR-0014-rate-limiting-strategy/#links","title":"Links","text":"<ul> <li>Technology Landscape: TBD  </li> <li>Product/PRD: TBD  </li> <li>Sprint Plan: TBD  </li> <li>Related ADRs: </li> <li>ADR-0001: Java 17 runtime  </li> <li>TBD  </li> </ul>"},{"location":"adr/ADR-0015-feature-flags-system/","title":"ADR-0015: Feature Flags System","text":"<p>Status: Open Date: 2025-08-13 Tags: feature-flags, configuration, deployment</p>"},{"location":"adr/ADR-0015-feature-flags-system/#context","title":"Context","text":"<ul> <li>Describe the problem space, constraints, and drivers.</li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.</li> <li>Note team expertise, ecosystem maturity, and operational realities.</li> <li>Include links to internal docs when relevant.</li> </ul>"},{"location":"adr/ADR-0015-feature-flags-system/#decision","title":"Decision","text":"<p>State the decision in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0015-feature-flags-system/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0015-feature-flags-system/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 2 (e.g., Ecosystem Readiness)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 3 (e.g., Team Proficiency and Velocity)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 4 (e.g., Modern Features without migration burden)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 5 (e.g., Risk Management)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 6 (e.g., Upgrade Path Considerations)</p> </li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0015-feature-flags-system/#alternatives-considered","title":"Alternatives Considered <ul> <li>Alternative A</li> <li>Pros: \u2026</li> <li> <p>Cons: \u2026</p> </li> <li> <p>Alternative B</p> </li> <li>Pros: \u2026</li> <li> <p>Cons: \u2026</p> </li> <li> <p>Alternative C</p> </li> <li>Pros: \u2026</li> <li>Cons: \u2026</li> </ul>","text":""},{"location":"adr/ADR-0015-feature-flags-system/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>\u2026</li> <li> <p>\u2026</p> </li> <li> <p>Negative:</p> </li> <li>\u2026</li> <li> <p>\u2026</p> </li> <li> <p>Mitigation Strategies:</p> </li> <li>\u2026</li> <li>\u2026</li> </ul>"},{"location":"adr/ADR-0015-feature-flags-system/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li> <p>Condition 2 (e.g., scheduled upgrade window with regression capacity)</p> </li> <li> <p>Target Sprint:</p> </li> <li>Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0015-feature-flags-system/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.</li> <li>Keep build configurations centralized to ease future upgrades.</li> <li>Require performance and regression benchmarks for upgrades.</li> <li>Any additional policy/process controls specific to this decision.</li> </ul>"},{"location":"adr/ADR-0015-feature-flags-system/#links","title":"Links","text":"<ul> <li>Technology Landscape:</li> <li>Product/PRD: <li>Sprint Plan:</li> <li>Related ADRs:</li> <li>ADR-0001: Java 17 runtime (example)</li> <li>ADR-000Y:  <li>ADR-000Z:"},{"location":"adr/ADR-0016-caching-strategy/","title":"ADR-0016: Caching Strategy","text":"<p>Status: Open Date: 2025-08-13 Tags: caching, performance, redis</p>"},{"location":"adr/ADR-0016-caching-strategy/#context","title":"Context","text":"<ul> <li>Describe the problem space, constraints, and drivers.</li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.</li> <li>Note team expertise, ecosystem maturity, and operational realities.</li> <li>Include links to internal docs when relevant.</li> </ul>"},{"location":"adr/ADR-0016-caching-strategy/#decision","title":"Decision","text":"<p>State the decision in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0016-caching-strategy/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0016-caching-strategy/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 2 (e.g., Ecosystem Readiness)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 3 (e.g., Team Proficiency and Velocity)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 4 (e.g., Modern Features without migration burden)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 5 (e.g., Risk Management)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 6 (e.g., Upgrade Path Considerations)</p> </li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0016-caching-strategy/#alternatives-considered","title":"Alternatives Considered <ul> <li>Alternative A</li> <li>Pros: \u2026</li> <li> <p>Cons: \u2026</p> </li> <li> <p>Alternative B</p> </li> <li>Pros: \u2026</li> <li> <p>Cons: \u2026</p> </li> <li> <p>Alternative C</p> </li> <li>Pros: \u2026</li> <li>Cons: \u2026</li> </ul>","text":""},{"location":"adr/ADR-0016-caching-strategy/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>\u2026</li> <li> <p>\u2026</p> </li> <li> <p>Negative:</p> </li> <li>\u2026</li> <li> <p>\u2026</p> </li> <li> <p>Mitigation Strategies:</p> </li> <li>\u2026</li> <li>\u2026</li> </ul>"},{"location":"adr/ADR-0016-caching-strategy/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li> <p>Condition 2 (e.g., scheduled upgrade window with regression capacity)</p> </li> <li> <p>Target Sprint:</p> </li> <li>Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0016-caching-strategy/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.</li> <li>Keep build configurations centralized to ease future upgrades.</li> <li>Require performance and regression benchmarks for upgrades.</li> <li>Any additional policy/process controls specific to this decision.</li> </ul>"},{"location":"adr/ADR-0016-caching-strategy/#links","title":"Links","text":"<ul> <li>Technology Landscape:</li> <li>Product/PRD: <li>Sprint Plan:</li> <li>Related ADRs:</li> <li>ADR-0001: Java 17 runtime (example)</li> <li>ADR-000Y:  <li>ADR-000Z:"},{"location":"adr/ADR-0017-search-implementation/","title":"ADR-0017: Search Implementation","text":"<p>Status: Open Date: 2025-08-13 Tags: search, elasticsearch, indexing</p>"},{"location":"adr/ADR-0017-search-implementation/#context","title":"Context","text":"<ul> <li>Describe the problem space, constraints, and drivers.</li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.</li> <li>Note team expertise, ecosystem maturity, and operational realities.</li> <li>Include links to internal docs when relevant.</li> </ul>"},{"location":"adr/ADR-0017-search-implementation/#decision","title":"Decision","text":"<p>State the decision in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0017-search-implementation/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0017-search-implementation/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 2 (e.g., Ecosystem Readiness)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 3 (e.g., Team Proficiency and Velocity)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 4 (e.g., Modern Features without migration burden)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 5 (e.g., Risk Management)</p> </li> <li>Supporting detail 1</li> <li> <p>Supporting detail 2</p> </li> <li> <p>Pillar 6 (e.g., Upgrade Path Considerations)</p> </li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0017-search-implementation/#alternatives-considered","title":"Alternatives Considered <ul> <li>Alternative A</li> <li>Pros: \u2026</li> <li> <p>Cons: \u2026</p> </li> <li> <p>Alternative B</p> </li> <li>Pros: \u2026</li> <li> <p>Cons: \u2026</p> </li> <li> <p>Alternative C</p> </li> <li>Pros: \u2026</li> <li>Cons: \u2026</li> </ul>","text":""},{"location":"adr/ADR-0017-search-implementation/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>\u2026</li> <li> <p>\u2026</p> </li> <li> <p>Negative:</p> </li> <li>\u2026</li> <li> <p>\u2026</p> </li> <li> <p>Mitigation Strategies:</p> </li> <li>\u2026</li> <li>\u2026</li> </ul>"},{"location":"adr/ADR-0017-search-implementation/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li> <p>Condition 2 (e.g., scheduled upgrade window with regression capacity)</p> </li> <li> <p>Target Sprint:</p> </li> <li>Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0017-search-implementation/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.</li> <li>Keep build configurations centralized to ease future upgrades.</li> <li>Require performance and regression benchmarks for upgrades.</li> <li>Any additional policy/process controls specific to this decision.</li> </ul>"},{"location":"adr/ADR-0017-search-implementation/#links","title":"Links","text":"<ul> <li>Technology Landscape:</li> <li>Product/PRD: <li>Sprint Plan:</li> <li>Related ADRs:</li> <li>ADR-0001: Java 17 runtime (example)</li> <li>ADR-000Y:  <li>ADR-000Z:"},{"location":"adr/ADR-0018-on-ledger-dlt-implementation-details/","title":"ADR-0018: On-Ledger DLT Implementation Details","text":"<p>Status: Open Date: 2025-08-13 Tags: dlt, ledger, transactions</p>"},{"location":"adr/ADR-0018-on-ledger-dlt-implementation-details/#context","title":"Context","text":"<ul> <li>Describe the problem space, constraints, and drivers.</li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.</li> <li>Note team expertise, ecosystem maturity, and operational realities.</li> <li>Include links to internal docs when relevant.</li> </ul>"},{"location":"adr/ADR-0018-on-ledger-dlt-implementation-details/#decision","title":"Decision","text":"<p>State the decision in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0018-on-ledger-dlt-implementation-details/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0018-on-ledger-dlt-implementation-details/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 2 (e.g., Ecosystem Readiness)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 3 (e.g., Team Proficiency and Velocity)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 4 (e.g., Modern Features without migration burden)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 5 (e.g., Risk Management)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 6 (e.g., Upgrade Path Considerations)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0018-on-ledger-dlt-implementation-details/#alternatives-considered","title":"Alternatives Considered <ul> <li>Alternative A</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative B</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative C</li> <li>Pros: ...</li> <li>Cons: ...</li> </ul>","text":""},{"location":"adr/ADR-0018-on-ledger-dlt-implementation-details/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>...</li> <li>...</li> <li>Negative:</li> <li>...</li> <li>...</li> <li>Mitigation Strategies:</li> <li>...</li> <li>...</li> </ul>"},{"location":"adr/ADR-0018-on-ledger-dlt-implementation-details/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li>Condition 2 (e.g., scheduled upgrade window with regression capacity)</li> <li>Target Sprint:</li> <li>Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0018-on-ledger-dlt-implementation-details/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.</li> <li>Keep build configurations centralized to ease future upgrades.</li> <li>Require performance and regression benchmarks for upgrades.</li> <li>Any additional policy/process controls specific to this decision.</li> </ul>"},{"location":"adr/ADR-0018-on-ledger-dlt-implementation-details/#links","title":"Links","text":"<ul> <li>Technology Landscape: <li>Product/PRD: <li>Sprint Plan: <li>Related ADRs: </li> <li>ADR-0001: Java 17 runtime (example)</li> <li>ADR-000Y:</li> <li>ADR-000Z:</li>"},{"location":"adr/ADR-0019-dlt-access-patterns/","title":"ADR-0019: DLT Access Patterns","text":"<p>Status: Open Date: 2025-08-13 Tags: dlt, access, integration</p>"},{"location":"adr/ADR-0019-dlt-access-patterns/#context","title":"Context","text":"<ul> <li>Describe the problem space, constraints, and drivers.</li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.</li> <li>Note team expertise, ecosystem maturity, and operational realities.</li> <li>Include links to internal docs when relevant.</li> </ul>"},{"location":"adr/ADR-0019-dlt-access-patterns/#decision","title":"Decision","text":"<p>State the decision in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0019-dlt-access-patterns/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0019-dlt-access-patterns/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 2 (e.g., Ecosystem Readiness)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 3 (e.g., Team Proficiency and Velocity)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 4 (e.g., Modern Features without migration burden)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 5 (e.g., Risk Management)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 6 (e.g., Upgrade Path Considerations)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0019-dlt-access-patterns/#alternatives-considered","title":"Alternatives Considered <ul> <li>Alternative A</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative B</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative C</li> <li>Pros: ...</li> <li>Cons: ...</li> </ul>","text":""},{"location":"adr/ADR-0019-dlt-access-patterns/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>...</li> <li>...</li> <li>Negative:</li> <li>...</li> <li>...</li> <li>Mitigation Strategies:</li> <li>...</li> <li>...</li> </ul>"},{"location":"adr/ADR-0019-dlt-access-patterns/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li>Condition 2 (e.g., scheduled upgrade window with regression capacity)</li> <li>Target Sprint:</li> <li>Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0019-dlt-access-patterns/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.</li> <li>Keep build configurations centralized to ease future upgrades.</li> <li>Require performance and regression benchmarks for upgrades.</li> <li>Any additional policy/process controls specific to this decision.</li> </ul>"},{"location":"adr/ADR-0019-dlt-access-patterns/#links","title":"Links","text":"<ul> <li>Technology Landscape: <li>Product/PRD: <li>Sprint Plan: <li>Related ADRs:</li> <li>ADR-0001: Java 17 runtime (example)</li> <li>ADR-000Y:</li> <li>ADR-000Z:</li>"},{"location":"adr/ADR-0020-graphql-federation-conventions/","title":"ADR-0020: GraphQL Federation Conventions","text":"<p>Status: Open Date: 2025-08-13 Tags: graphql, federation, schema</p>"},{"location":"adr/ADR-0020-graphql-federation-conventions/#context","title":"Context","text":"<ul> <li>Describe the problem space, constraints, and drivers.</li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.</li> <li>Note team expertise, ecosystem maturity, and operational realities.</li> <li>Include links to internal docs when relevant.</li> </ul>"},{"location":"adr/ADR-0020-graphql-federation-conventions/#decision","title":"Decision","text":"<p>State the decision in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0020-graphql-federation-conventions/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0020-graphql-federation-conventions/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 2 (e.g., Ecosystem Readiness)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 3 (e.g., Team Proficiency and Velocity)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 4 (e.g., Modern Features without migration burden)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 5 (e.g., Risk Management)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 6 (e.g., Upgrade Path Considerations)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0020-graphql-federation-conventions/#alternatives-considered","title":"Alternatives Considered <ul> <li>Alternative A</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative B</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative C</li> <li>Pros: ...</li> <li>Cons: ...</li> </ul>","text":""},{"location":"adr/ADR-0020-graphql-federation-conventions/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>...</li> <li>...</li> <li>Negative:</li> <li>...</li> <li>...</li> <li>Mitigation Strategies:</li> <li>...</li> <li>...</li> </ul>"},{"location":"adr/ADR-0020-graphql-federation-conventions/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li>Condition 2 (e.g., scheduled upgrade window with regression capacity)</li> <li>Target Sprint:</li> <li>Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0020-graphql-federation-conventions/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.</li> <li>Keep build configurations centralized to ease future upgrades.</li> <li>Require performance and regression benchmarks for upgrades.</li> <li>Any additional policy/process controls specific to this decision.</li> </ul>"},{"location":"adr/ADR-0020-graphql-federation-conventions/#links","title":"Links","text":"<ul> <li>Technology Landscape: <li>Product/PRD: <li>Sprint Plan: <li>Related ADRs:</li> <li>ADR-0001: Java 17 runtime (example)</li> <li>ADR-000Y:</li> <li>ADR-000Z:</li>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/","title":"ADR-0021: Protobuf IDL Versioning Strategy","text":"<p>Author: @MysterTech Status: Accepted Date: 2025-08-13 Deciders: @MysterTech Technical Story: [optional link to ticket/issue] Tags: contracts, protobuf, versioning</p>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#context","title":"Context","text":"<p>As we launch a greenfield microservices platform, all service-to-service communication will use Protocol Buffers (protobuf) to define structured payloads over HTTP. The key issue driving this decision is the need to establish clear, consistent versioning and compatibility practices for protobuf contracts from the outset. Without disciplined guidelines, rapid team growth and parallel development could lead to accidental breaking changes or developer friction as services evolve.</p> <p>Although we do not need to migrate or preserve legacy data, it is critical to set strong IDL (Interface Definition Language) management foundations so every future schema change remains safe, transparent, and well-governed. This proactive approach will enable autonomous teams to iterate quickly while maintaining reliability and cross-service compatibility as new features and services are added.</p>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#decision","title":"Decision","text":"<p>Adopt a transport-agnostic protobuf IDL versioning strategy that mandates backward-compatible evolution by default, explicit deprecation timelines, and CI-enforced compatibility checks for all schema changes used over HTTP (and any other future transports).</p>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#why-a-protobuf-idl-versioning-strategy","title":"Why a Protobuf IDL Versioning Strategy?","text":"<p>Prevent Breaking Changes Early - Even in a greenfield, multiple teams iterating in parallel can unintentionally introduce breaking schema changes. - Clear evolution rules (additive-first, reserved fields/tags, explicit deprecations) protect downstream consumers and reduce coordination overhead.</p> <p>Strong Contracts with HTTP - Protobuf provides compact, strongly-typed contracts for HTTP payloads, enabling efficient S2S calls without coupling to gRPC semantics. - A transport-agnostic IDL lets us evolve payloads while keeping HTTP concerns (status codes, headers, error envelopes) cleanly separated.</p> <p>Autonomy with Governance - Teams can iterate independently when contract rules, compatibility checks, and review workflows are standardized. - Automated CI compatibility validation (backward/forward) reduces review burden and catches issues before merge.</p> <p>Observability and Debuggability - Consistent field evolution and error envelope conventions improve logs, traces, and on-call diagnostics. - Predictable schema changes make it easier to analyze incidents and roll back safely.</p>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#future-direction","title":"Future Direction","text":"<p>While HTTP with protobuf is our standard for synchronous service-to-service communication today, we anticipate migrating to a message broker architecture (e.g., Kafka) for asynchronous/event-driven workflows as platform scale and complexity grows. Protobuf contracts and disciplined versioning will remain foundational, ensuring a smooth transition to Kafka or similar brokers and unified schema evolution across both synchronous (HTTP) and asynchronous (message broker) channels.</p>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#deferred-alternatives","title":"Deferred Alternatives","text":"<p>Schema Registries and Central Brokers - Reason for deferral: Adds operational complexity not required for HTTP payloads at current scale. - Revisit when: Cross-language schema discovery, runtime validation, or large-scale event streaming warrants registry-backed workflows.</p> <p>Full API Contract Federation (beyond protobuf) - Reason for deferral: Federation is more relevant to external API composition; internal S2S needs are met with protobuf + HTTP. - Revisit when: Internal query composition across domains becomes a core requirement.</p>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#rejected-alternatives","title":"Rejected Alternatives","text":"<p>Ad-hoc JSON-only Contracts - Reason for rejection: Lacks strong typing, increases payload size, and raises risk of silent breaking changes. - Reconsider only if: A service is strictly external-facing and human-readability/debuggability outweighs efficiency (not our S2S default).</p> <p>gRPC-Coupled Evolution Rules - Reason for rejection: Ties contract evolution to a transport we are not using for S2S; we need transport-agnostic guidance focused on HTTP payloads. - Reconsider only if: We adopt gRPC broadly for S2S in the future and need its RPC-specific semantics.</p>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#consequences","title":"Consequences","text":"<p>Positive - Consistent, strongly-typed contracts reduce accidental breaking changes and improve cross-team velocity. - Smaller, faster payloads with protobuf improve internal latency and bandwidth efficiency over HTTP. - Transport-agnostic IDL keeps options open for future Kafka/event-driven adoption with minimal rework.</p> <p>Negative - Additional governance overhead: PR reviews, CI compatibility checks, and documentation discipline are required. - Binary payloads make ad-hoc debugging harder than JSON; teams must rely on tooling and generated stubs. - Strict compatibility rules can slow down radical refactors without planned deprecation windows.</p> <p>Mitigation Strategies - Provide tooling (pre-commit hooks, CI jobs) for linting, backward/forward compatibility checks, and doc generation. - Support content negotiation for JSON in dev/debug scenarios while defaulting to protobuf for S2S. - Establish clear deprecation policies, change logs, and reserved field/tag practices to enable safe evolution.</p>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#rollout-plan","title":"Rollout Plan","text":"<p>Baseline Setup: - Establish a central, version-controlled repository for all protobuf contracts. - Implement mandatory pull request reviews and CI jobs for schema linting and compatibility checks. - Publish guidelines covering field/tags discipline, versioning, deprecation, and changelogs.</p> <p>Phase 1 Adoption: - Require all new services to source protobuf contracts from the central repo for HTTP payloads. - Integrate automated CI enforcement for compatibility, additive changes, and reserved field checks. - Document contract evolution and maintain history in the repo changelog.</p> <p>Continuous Improvement: - Periodically review contract evolution incidents and update guidelines as needed. - Expand integration with automated contract documentation and monitoring dashboards. - Revisit broker/event-driven adoption and schema registry needs as the number and complexity of asynchronous workflows grow.</p> <p>Future Broker Integration: - As event-driven patterns and Kafka adoption increase, plan for seamless schema management extension to broker channels\u2014maintaining central repo discipline and considering schema registry adoption when justified by scale or polyglot scenarios.</p>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<p>Revisit Trigger: - Compatibility checks become insufficient for real-world schemas, causing incidents. - Significant ecosystem/tooling improvements suggest an alternative IDL is materially better. - Widespread need for schema features protobuf cannot address cleanly.</p> <p>Target Sprint: - Sprint 1 (baseline enforcement and documentation as part of Phase 1 foundations).</p>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#guardrails","title":"Guardrails","text":""},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#must","title":"Must","text":"<ul> <li>Define and manage all protobuf schemas in a central, version-controlled repository with mandatory PR reviews and CI compatibility checks.</li> <li>Use unique, never-reused field numbers; only add new optional fields or explicitly deprecate old ones.</li> <li>Maintain backward compatibility for all contract changes; deprecations must be documented with clear communication and established timelines.</li> <li>Enforce CI checks to lint, validate, and prevent tag reuse or breaking changes on every schema update.</li> <li>Contracts for both HTTP and future broker transports (e.g., Kafka) must follow the same versioning discipline and central governance.</li> </ul>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#should","title":"Should","text":"<ul> <li>Prefer additive changes; avoid renaming fields and instead add new ones while deprecating old.</li> <li>Centralize common types and follow consistent naming and package conventions across all services.</li> <li>Provide JSON encoding for dev/debug scenarios but default to protobuf for service-to-service payloads.</li> <li>Review contract evolution incidents periodically and update guidelines as needed.</li> </ul>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#wont","title":"Won\u2019t","text":"<ul> <li>Tie versioning, evolution, or schema governance to any single transport protocol (e.g., avoid gRPC-specific semantics).</li> <li>Reuse field numbers, remove fields without documentation or migration path, or bypass central schema repository processes.</li> <li>Merge business logic into serialization or transport layers.</li> </ul>"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#approvals","title":"Approvals","text":"Review Reviewer Date (YYYY-MM-DD) Status Notes Architectural Review @MysterTech 2025-08-14 Approved Security Review @MysterTech 2025-08-14 Approved SRE Review @MysterTech 2025-08-14 Approved"},{"location":"adr/ADR-0021-protobuf-idl-versioning-strategy/#links","title":"Links","text":"<ul> <li>Technology Landscape: ../tech/technology-landscape.md#phase-1-technical-plan  </li> <li> <p>Sprint Plan: ../tech/sprint-plan-phase-1.md#phase-1-sprint-plan</p> </li> <li> <p>Related ADRs</p> </li> <li>ADR-0001: Java 17 as Language/Runtime</li> <li>ADR-0002: Microservices Architecture</li> <li>ADR-0003: HTTP for Inter-Service Communication</li> <li>ADR-0004: GraphQL via Apollo Gateway for External API</li> <li>ADR-0005: R3 Corda 5 as DLT Platform</li> <li>ADR-0006: Docker Compose for Phase 1 Orchestration</li> <li>ADR-0007: Service Framework Default Selection</li> <li>ADR-0008: Database Selection</li> <li>ADR-0011: Authorization Strategy</li> <li>ADR-0012: Secrets Management</li> <li>ADR-0013: Observability Stack</li> <li>ADR-0022: Connection Pool Budget Management</li> <li>ADR-0023: Persisted Queries and Batching</li> <li>ADR-0025: Event Streaming Platform</li> </ul>"},{"location":"adr/ADR-0022-connection-pool-budget-management/","title":"ADR-0022: Connection Pool Budget Management","text":"<p>Status: Open Date: 2025-08-13 Tags: connections, pooling, resources</p>"},{"location":"adr/ADR-0022-connection-pool-budget-management/#context","title":"Context","text":"<ul> <li>Describe the problem space, constraints, and drivers.</li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.</li> <li>Note team expertise, ecosystem maturity, and operational realities.</li> <li>Include links to internal docs when relevant.</li> </ul>"},{"location":"adr/ADR-0022-connection-pool-budget-management/#decision","title":"Decision","text":"<p>State the decision in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0022-connection-pool-budget-management/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0022-connection-pool-budget-management/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 2 (e.g., Ecosystem Readiness)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 3 (e.g., Team Proficiency and Velocity)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 4 (e.g., Modern Features without migration burden)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 5 (e.g., Risk Management)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 6 (e.g., Upgrade Path Considerations)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0022-connection-pool-budget-management/#alternatives-considered","title":"Alternatives Considered <ul> <li>Alternative A</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative B</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative C</li> <li>Pros: ...</li> <li>Cons: ...</li> </ul>","text":""},{"location":"adr/ADR-0022-connection-pool-budget-management/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>...</li> <li>...</li> <li>Negative:</li> <li>...</li> <li>...</li> <li>Mitigation Strategies:</li> <li>...</li> <li>...</li> </ul>"},{"location":"adr/ADR-0022-connection-pool-budget-management/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li>Condition 2 (e.g., scheduled upgrade window with regression capacity)</li> <li>Target Sprint:</li> <li>Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0022-connection-pool-budget-management/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.</li> <li>Keep build configurations centralized to ease future upgrades.</li> <li>Require performance and regression benchmarks for upgrades.</li> <li>Any additional policy/process controls specific to this decision.</li> </ul>"},{"location":"adr/ADR-0022-connection-pool-budget-management/#links","title":"Links","text":"<ul> <li>Technology Landscape: <li>Product/PRD: <li>Sprint Plan: <li>Related ADRs:</li> <li>ADR-0001: Java 17 runtime (example)</li> <li>ADR-000Y:</li> <li>ADR-000Z:</li>"},{"location":"adr/ADR-0023-persisted-queries-and-batching/","title":"ADR-0023: Persisted Queries and Batching","text":"<p>Status: Open Date: 2025-08-13 Tags: graphql, queries, performance</p>"},{"location":"adr/ADR-0023-persisted-queries-and-batching/#context","title":"Context","text":"<ul> <li>Describe the problem space, constraints, and drivers.</li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.</li> <li>Note team expertise, ecosystem maturity, and operational realities.</li> <li>Include links to internal docs when relevant.</li> </ul>"},{"location":"adr/ADR-0023-persisted-queries-and-batching/#decision","title":"Decision","text":"<p>State the decision in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0023-persisted-queries-and-batching/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0023-persisted-queries-and-batching/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 2 (e.g., Ecosystem Readiness)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 3 (e.g., Team Proficiency and Velocity)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 4 (e.g., Modern Features without migration burden)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 5 (e.g., Risk Management)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 6 (e.g., Upgrade Path Considerations)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0023-persisted-queries-and-batching/#alternatives-considered","title":"Alternatives Considered <ul> <li>Alternative A</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative B</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative C</li> <li>Pros: ...</li> <li>Cons: ...</li> </ul>","text":""},{"location":"adr/ADR-0023-persisted-queries-and-batching/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>...</li> <li>...</li> <li>Negative:</li> <li>...</li> <li>...</li> <li>Mitigation Strategies:</li> <li>...</li> <li>...</li> </ul>"},{"location":"adr/ADR-0023-persisted-queries-and-batching/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li>Condition 2 (e.g., scheduled upgrade window with regression capacity)</li> <li>Target Sprint:</li> <li>Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0023-persisted-queries-and-batching/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.</li> <li>Keep build configurations centralized to ease future upgrades.</li> <li>Require performance and regression benchmarks for upgrades.</li> <li>Any additional policy/process controls specific to this decision.</li> </ul>"},{"location":"adr/ADR-0023-persisted-queries-and-batching/#links","title":"Links","text":"<ul> <li>Technology Landscape: <li>Product/PRD: <li>Sprint Plan: <li>Related ADRs:</li> <li>ADR-0001: Java 17 runtime (example)</li> <li>ADR-000Y:</li> <li>ADR-000Z:</li>"},{"location":"adr/ADR-0024-multi-tenant-baseline-strategy/","title":"ADR-0024: Multi-Tenant Baseline Strategy","text":"<p>Status: Open Date: 2025-08-13 Tags: multi-tenancy, isolation, security</p>"},{"location":"adr/ADR-0024-multi-tenant-baseline-strategy/#context","title":"Context","text":"<ul> <li>Describe the problem space, constraints, and drivers.</li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.</li> <li>Note team expertise, ecosystem maturity, and operational realities.</li> <li>Include links to internal docs when relevant.</li> </ul>"},{"location":"adr/ADR-0024-multi-tenant-baseline-strategy/#decision","title":"Decision","text":"<p>State the decision in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0024-multi-tenant-baseline-strategy/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0024-multi-tenant-baseline-strategy/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 2 (e.g., Ecosystem Readiness)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 3 (e.g., Team Proficiency and Velocity)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 4 (e.g., Modern Features without migration burden)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 5 (e.g., Risk Management)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 6 (e.g., Upgrade Path Considerations)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0024-multi-tenant-baseline-strategy/#alternatives-considered","title":"Alternatives Considered <ul> <li>Alternative A</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative B</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative C</li> <li>Pros: ...</li> <li>Cons: ...</li> </ul>","text":""},{"location":"adr/ADR-0024-multi-tenant-baseline-strategy/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>...</li> <li>...</li> <li>Negative:</li> <li>...</li> <li>...</li> <li>Mitigation Strategies:</li> <li>...</li> <li>...</li> </ul>"},{"location":"adr/ADR-0024-multi-tenant-baseline-strategy/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li>Condition 2 (e.g., scheduled upgrade window with regression capacity)</li> <li>Target Sprint:</li> <li>Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0024-multi-tenant-baseline-strategy/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.</li> <li>Keep build configurations centralized to ease future upgrades.</li> <li>Require performance and regression benchmarks for upgrades.</li> <li>Any additional policy/process controls specific to this decision.</li> </ul>"},{"location":"adr/ADR-0024-multi-tenant-baseline-strategy/#links","title":"Links","text":"<ul> <li>Technology Landscape: <li>Product/PRD: <li>Sprint Plan: <li>Related ADRs:</li> <li>ADR-0001: Java 17 runtime (example)</li> <li>ADR-000Y:</li> <li>ADR-000Z:</li>"},{"location":"adr/ADR-0025-event-streaming-platform/","title":"ADR-0025: Event Streaming Platform","text":"<p>Status: Open Date: 2025-08-13 Tags: events, streaming, kafka</p>"},{"location":"adr/ADR-0025-event-streaming-platform/#context","title":"Context","text":"<ul> <li>Describe the problem space, constraints, and drivers.</li> <li>Reference product/PRD requirements, delivery phase, and non-functional priorities.</li> <li>Note team expertise, ecosystem maturity, and operational realities.</li> <li>Include links to internal docs when relevant.</li> </ul>"},{"location":"adr/ADR-0025-event-streaming-platform/#decision","title":"Decision","text":"<p>State the decision in one sentence, active voice, clearly scoping where it applies.</p>"},{"location":"adr/ADR-0025-event-streaming-platform/#rationale","title":"Rationale","text":""},{"location":"adr/ADR-0025-event-streaming-platform/#why","title":"Why  () <ul> <li>Pillar 1 (e.g., Stability and Support)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 2 (e.g., Ecosystem Readiness)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 3 (e.g., Team Proficiency and Velocity)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 4 (e.g., Modern Features without migration burden)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 5 (e.g., Risk Management)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> <li>Pillar 6 (e.g., Upgrade Path Considerations)</li> <li>Supporting detail 1</li> <li>Supporting detail 2</li> </ul>","text":""},{"location":"adr/ADR-0025-event-streaming-platform/#alternatives-considered","title":"Alternatives Considered <ul> <li>Alternative A</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative B</li> <li>Pros: ...</li> <li>Cons: ...</li> <li>Alternative C</li> <li>Pros: ...</li> <li>Cons: ...</li> </ul>","text":""},{"location":"adr/ADR-0025-event-streaming-platform/#consequences","title":"Consequences","text":"<ul> <li>Positive:</li> <li>...</li> <li>...</li> <li>Negative:</li> <li>...</li> <li>...</li> <li>Mitigation Strategies:</li> <li>...</li> <li>...</li> </ul>"},{"location":"adr/ADR-0025-event-streaming-platform/#revisit-trigger-and-target-sprint","title":"Revisit Trigger and Target Sprint","text":"<ul> <li>Revisit Trigger:</li> <li>Condition 1 (e.g., ecosystem certification, measurable benefit)</li> <li>Condition 2 (e.g., scheduled upgrade window with regression capacity)</li> <li>Target Sprint:</li> <li>Sprint N (or timeframe) for adoption/change</li> </ul>"},{"location":"adr/ADR-0025-event-streaming-platform/#guardrails","title":"Guardrails","text":"<ul> <li>Maintain a compatibility matrix for critical dependencies.</li> <li>Keep build configurations centralized to ease future upgrades.</li> <li>Require performance and regression benchmarks for upgrades.</li> <li>Any additional policy/process controls specific to this decision.</li> </ul>"},{"location":"adr/ADR-0025-event-streaming-platform/#links","title":"Links","text":"<ul> <li>Technology Landscape: <li>Product/PRD: <li>Sprint Plan: <li>Related ADRs:</li> <li>ADR-0001: Java 17 runtime (example)</li> <li>ADR-000Y:</li> <li>ADR-000Z:</li>"},{"location":"planning/platform-development-phase1/","title":"Platform Development \u2014 Phase 1 Backlog (Epics and Stories)","text":""},{"location":"planning/platform-development-phase1/#sprint-mapping-overview","title":"Sprint Mapping Overview","text":"<p>This document organizes Phase 1 epics and stories into 5 development sprints aligned with the technical plan:</p> <ul> <li>Sprint 1: Core Platform Foundation, Identity/Security, Secrets Management, Observability, CI/CD basics</li> <li>Sprint 2: Document Management, Capital Calls, Frontend/BFF Foundation  </li> <li>Sprint 3: Workflow Automation, Notifications</li> <li>Sprint 4: Integration Testing, Acceptance &amp; E2E Tests</li> <li>Sprint 5: Production Readiness, ADR Formalization, Guardrails</li> </ul> <p>Below is the complete epic and story list using the \"Epic\" naming format, aligned to Phase 1 execution and PRD/ADRs.</p>"},{"location":"planning/platform-development-phase1/#epic-core-platform-foundation-sprint-1","title":"Epic: Core Platform Foundation [Sprint 1]","text":"<ul> <li>Story: Initialize monorepo scaffolding (Gradle, module layout, quality gates, CI bootstrap)</li> <li>Story: Corda 5 local/dev network bootstrap (Compose nodes, network map, certs, health checks)</li> <li>Story: Service archetype templates (Spring Boot 3 starters, logging, error model)</li> <li>Story: gRPC and GraphQL BFF baseline (Proto module, Apollo Router config, schema gateway)</li> <li>Story: Environment configuration strategy (profiles, precedence, secret indirection)</li> <li>Story: Repository governance (branching, CODEOWNERS, PR templates)</li> <li>Story: API gateway skeleton with auth &amp; class segregation checks [Sprint 1]</li> <li>Story: Multi-tenant user isolation tests [Sprint 1]</li> <li>Story: Documentation structure [Sprint 1]</li> <li>Story: Git workflow &amp; branching [Sprint 1]</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-identity-security-and-rbac-sprint-1","title":"Epic: Identity, Security, and RBAC [Sprint 1]","text":"<ul> <li>Story: Keycloak realm, clients, roles, and OIDC config (scopes, claims)</li> <li>Story: JWT validation middleware and security defaults (RS256, issuer/audience)</li> <li>Story: Claims &amp; class propagation end-to-end (Router \u2192 BFF \u2192 services)</li> <li>Story: RBAC enforcement on APIs and flows (@PreAuthorize with resource:action)</li> <li>Story: Security testing &amp; negative cases (token tampering, scope/role failures)</li> <li>Story: Session and token lifecycle settings (access/refresh, PKCE, rotation)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-secrets-and-configuration-management-sprint-1","title":"Epic: Secrets and Configuration Management [Sprint 1]","text":"<ul> <li>Story: Vault dev deployment with base policies (Compose service, AppRole/dev auth)</li> <li>Story: Vault SDK integration in services (DB creds, API keys, retry/backoff, cached TTL)</li> <li>Story: Secret rotation runbook and manual procedure (DB creds)</li> <li>Story: TLS baseline (self-signed, truststores, Router/BFF/services TLS)</li> <li>Story: Secrets access auditing and alerts</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-observability-metrics-logs-traces-sprint-1","title":"Epic: Observability (Metrics, Logs, Traces) [Sprint 1]","text":"<ul> <li>Story: Observability stack in Compose (Prometheus, Grafana, Loki, Promtail, Tempo)</li> <li>Story: Metrics instrumentation and /metrics endpoints (Micrometer JVM/app metrics)</li> <li>Story: Structured JSON logs and correlation IDs (Logback JSON)</li> <li>Story: OpenTelemetry tracing propagation (headers, spans across layers)</li> <li>Story: Baseline dashboards and alerts (service health, latency, error rate)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-cicd-and-quality-gates-sprint-1","title":"Epic: CI/CD and Quality Gates [Sprint 1]","text":"<ul> <li>Story: GitHub Actions multi-workflow (Java/TS build/test, artifacts, cache)</li> <li>Story: CodeQL (Java + TS) and dependency security scanning</li> <li>Story: Coverage thresholds and reports (\u226580% for core modules)</li> <li>Story: Release versioning and changelogs (conventional commits, notes)</li> <li>Story: CI deployment to staging environment [Sprint 1 DoD]</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-data-and-storage-sprint-1","title":"Epic: Data and Storage [Sprint 1]","text":"<ul> <li>Story: PostgreSQL per-service setup (instances, roles, pooling)</li> <li>Story: Flyway migrations per service (baseline V1__, checksums, startup execution)</li> <li>Story: Protobuf and Buf conventions (lint, breaking checks, CI gates)</li> <li>Story: MinIO SSE and lifecycle rules (buckets, encryption config)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-document-management-on-ledger-metadata-off-ledger-storage-sprint-2","title":"Epic: Document Management (On-ledger metadata, off-ledger storage) [Sprint 2]","text":"<ul> <li>Story: Document domain model and on-ledger metadata (hash, version, ACL ref)</li> <li>Story: Off-ledger encrypted storage (MinIO SSE) with upload/download APIs</li> <li>Story: Versioning and audit logs (history, access logs)</li> <li>Story: Smart search baseline and tagging hooks (metadata, OCR stubs)</li> <li>Story: E-signature integration stub (provider interface, mock flow)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-capital-calls-class-specific-sprint-2","title":"Epic: Capital Calls (Class-Specific) [Sprint 2]","text":"<ul> <li>Story: Capital call domain model (class parameters, schedules, rules)</li> <li>Story: Capital call smart contract templates (deterministic notice generation)</li> <li>Story: Capital call lifecycle flow (create, notify, per-LP/class tracking, reminders)</li> <li>Story: Fiat/crypto payment tracking adapter (provider interface, on-chain logs stub)</li> <li>Story: KYC/AML integration stub (provider adapter, approval hook)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-frontendbff-foundation-sprint-2","title":"Epic: Frontend/BFF Foundation [Sprint 2]","text":"<ul> <li>Story: React app scaffolding with Apollo Client (routing, state, auth guards)</li> <li>Story: GraphQL schemas and BFF resolvers (schema-first, federation directives)</li> <li>Story: UI component library and theming (tokens, accessibility)</li> <li>Story: UI RBAC guards (route and component-level visibility)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-deal-state-and-basic-flows-sprint-2","title":"Epic: Deal State and Basic Flows [Sprint 2]","text":"<ul> <li>Story: DealState contract and state (rules, participants, transitions)</li> <li>Story: Basic deal creation flow (init state, participants, notarization)</li> <li>Story: Participant invitation/onboarding flow (identity mapping, role assignment)</li> <li>Story: Unit tests for DealState and flows (contract/flow tests)</li> <li>Story: End-to-end deal creation test (PRD 4.1) and onboarding test (PRD 4.2)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-domain-model-definition-sprint-2","title":"Epic: Domain Model Definition [Sprint 2]","text":"<ul> <li>Story: Define core domain models (Deal, Party, Roles, Milestones)</li> <li>Story: Persistence mappings and repositories (JPA, transactional boundaries)</li> <li>Story: Seed sample data for local development (migrations or bootstrap scripts)</li> <li>Story: Validation rules and domain invariants (annotations, business checks)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-workflow-automation-per-class-sprint-3","title":"Epic: Workflow Automation (Per Class) [Sprint 3]","text":"<ul> <li>Story: Workflow engine v1 (approvals, reminders, escalations)</li> <li>Story: Capital call approval flow (class-based approvers, SLAs)</li> <li>Story: Document approval flow (multi-step, role-aware)</li> <li>Story: AI-assisted routing stub (scoring interface, logging)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-waterfalls-multi-class-euus-sprint-3","title":"Epic: Waterfalls (Multi-Class EU/US) [Sprint 3]","text":"<ul> <li>Story: Waterfall engine foundation (deterministic BigDecimal math utilities)</li> <li>Story: European model (pref return, catch-up, carry) with class parameters</li> <li>Story: American model (deal-by-deal, clawback) with class logic</li> <li>Story: Model switching and inter-class priority (configurable rules)</li> <li>Story: Validation harness and golden test vectors (scenarios, expected outputs)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-analytics-and-reporting-initial-sprint-3","title":"Epic: Analytics and Reporting (Initial) [Sprint 3]","text":"<ul> <li>Story: Data marts for core KPIs (schemas for committed vs. deployed, portfolio breakdown)</li> <li>Story: KPIs APIs (committed vs. deployed by class)</li> <li>Story: Portfolio breakdown and export (PDF/Excel templates)</li> <li>Story: Basic dashboards (UI/BFF queries, RBAC filters)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-fund-accounting-multi-class-gl-navpl-sprint-3","title":"Epic: Fund Accounting (Multi-Class GL, NAV/P&amp;L) [Sprint 3]","text":"<ul> <li>Story: Chart of accounts with class dimension</li> <li>Story: Journal posting API and validations (double-entry)</li> <li>Story: NAV/P&amp;L calculations (class and combined)</li> <li>Story: Reconciliation and tests (mismatch alerts)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-portfolio-tracking-sprint-3","title":"Epic: Portfolio Tracking [Sprint 3]","text":"<ul> <li>Story: Company profile model (investments, rounds, exits, class contributions)</li> <li>Story: Class-based investments and returns (aggregations, filters, endpoints)</li> <li>Story: Health score baseline and risk flags (rule-based, thresholds)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-user-investor-experience-sprint-3","title":"Epic: User &amp; Investor Experience [Sprint 3]","text":"<ul> <li>Story: Role-based dashboards (GP, LP, IB, Analyst)</li> <li>Story: Onboarding flows and data import (CSV/XLS templates, idempotency)</li> <li>Story: Alerts and quick actions (notification hub, class-aware filters)</li> <li>Story: FAQ chatbot stub (intent registry, interfaces)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-ib-ma-workflows-sprint-3","title":"Epic: IB &amp; M&amp;A Workflows [Sprint 3]","text":"<ul> <li>Story: Pipeline and mandate tracking (stages, ownership)</li> <li>Story: Advisory process and counterparties (milestones, contacts, permissions)</li> <li>Story: Virtual Data Room (permissioned doc sharing, audit logs)</li> <li>Story: Transaction execution records (negotiations, agreements, immutable logs)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-acceptance-e2e-tests-prdac-mapping-sprint-4","title":"Epic: Acceptance &amp; E2E Tests (PRD/AC mapping) [Sprint 4]","text":"<ul> <li>Story: PRD 4.1 Basic deal creation E2E</li> <li>Story: PRD 4.2 Participant onboarding E2E</li> <li>Story: AC 6.1 Network operability checks</li> <li>Story: AC 6.2 State persistence across nodes</li> <li>Story: PRD 4.6 Deal state transitions E2E</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-ecosystem-integrations-sprint-4","title":"Epic: Ecosystem &amp; Integrations [Sprint 4]","text":"<ul> <li>Story: External API (schema-first GraphQL, federated services)</li> <li>Story: CRM/accounting connectors (adapter interfaces, mapping stubs)</li> <li>Story: Webhooks and eventing (outbound hooks, retries, signatures)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-compliance-regulatory-sprint-4","title":"Epic: Compliance &amp; Regulatory [Sprint 4]","text":"<ul> <li>Story: KYC/AML baseline integration (provider adapter, audit trail)</li> <li>Story: Automated filing scaffolding (IN/US/EU templates, export pipeline)</li> <li>Story: DLT compliance logging policy (on-ledger vs off-ledger with hashes)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-ai-enablement-initial-sprint-4","title":"Epic: AI Enablement (Initial) [Sprint 4]","text":"<ul> <li>Story: Class-filtered query API (prompt/output guardrails)</li> <li>Story: Capital call drafting helper (templates, class params)</li> <li>Story: OCR + classification pipeline stub (queue/worker, metadata extraction)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-adr-formalization-and-follow-through-sprint-5","title":"Epic: ADR Formalization and Follow-Through [Sprint 5]","text":"<ul> <li>Story: Finalize ADR-0007 (service framework defaults, starter templates)</li> <li>Story: Finalize ADR-0008 (PostgreSQL benchmarks, pool budgets)</li> <li>Story: Formalize ADR-0009 (migration governance, rollback templates)</li> <li>Story: Finalize ADR-0010 (identity config, claims map, HA)</li> <li>Story: Formalize ADR-0011 (RBAC policy matrix, SpEL guidelines)</li> <li>Story: Finalize ADR-0012 (Vault policies, rotation schedule)</li> <li>Story: Finalize ADR-0013 (dashboards, SLOs, alert rules)</li> <li>Story: Revisit triggers monitor (metrics, owners, thresholds)</li> </ul>"},{"location":"planning/platform-development-phase1/#epic-guardrails-and-principles-enforcement-sprint-5","title":"Epic: Guardrails and Principles Enforcement [Sprint 5]","text":"<ul> <li>Story: BigDecimal math utilities and lint rules (no binary floating)</li> <li>Story: GraphQL schema checks in CI (lint, breaking-change gate)</li> <li>Story: Security guardrails (no PII on-ledger checks, secret scanning, TLS)</li> <li>Story: Observability guardrails (/metrics, JSON logs, trace coverage checks)</li> </ul>"},{"location":"product/Phase1_PRD/","title":"DealSphere Phase 1 (MVP) \u2014 Product Requirements Document","text":"<p>Related Documents: - Sprint Plan Phase 1 - Implementation timeline and sprint breakdown - Phase 1 Functional Test Cases - Comprehensive test scenarios - Sprint\u2192Functional Test Mapping - Test coverage mapping</p>"},{"location":"product/Phase1_PRD/#1-product-overview","title":"1. Product Overview","text":"<ul> <li>Product Name: DealSphere</li> <li>Description: Secure, DLT-backed fund management platform for PE/VC with class-specific workflows and automated waterfalls, built on R3 Corda.</li> <li>Objective: Deliver an MVP that supports multi-class fund operations (permissions, capital calls, workflows, waterfalls), basic analytics, fund accounting, and portfolio tracking with AI-assisted experiences and a finalized architecture for scale.</li> </ul>"},{"location":"product/Phase1_PRD/#2-target-users","title":"2. Target Users","text":"<ul> <li>General Partners (GP), Limited Partners (LP) by class (A, B, etc.)</li> <li>Fund Managers and Administrators</li> <li>Auditors and Compliance users</li> <li>Investment/Portfolio Analysts</li> <li>Investors (read-only class-specific views)</li> <li>AI Assistant (virtual role for automated tasks)</li> </ul>"},{"location":"product/Phase1_PRD/#3-core-use-cases","title":"3. Core Use Cases","text":"<ul> <li>Role-based, class-segregated access and views</li> <li>Document management with on-ledger metadata, versioning, and audit logs</li> <li>Capital call lifecycle per class (rules, notices, tracking)</li> <li>Multi-class European and American waterfalls with prioritization and clawbacks</li> <li>Class-specific workflow automation (approvals, reminders, escalations)</li> <li>Basic analytics by class (committed vs. deployed, portfolio breakdown)</li> <li>Fund accounting and NAV/P&amp;L at class and combined levels</li> <li>Portfolio tracking with class-based contributions and returns</li> <li>AI-assisted class-specific queries and drafting</li> </ul>"},{"location":"product/Phase1_PRD/#4-feature-requirements-phase-1","title":"4. Feature Requirements (Phase 1)","text":""},{"location":"product/Phase1_PRD/#41-platform-security","title":"4.1 Platform &amp; Security","text":"<ul> <li>R3 Corda for on-ledger access control and metadata</li> <li>Encryption at rest and in transit; content hash verification for documents</li> <li>Role-based access with class-level segregation (Admin, GP, LP by class, Auditor, AI Assistant)</li> <li>API gateway and secure node topology</li> </ul>"},{"location":"product/Phase1_PRD/#42-document-management","title":"4.2 Document Management","text":"<ul> <li>On-ledger metadata; encrypted off-ledger storage</li> <li>Version control, audit logging, and access logs</li> <li>Content hash verification for integrity</li> <li>Smart search and OCR-based classification (initial AI)</li> </ul>"},{"location":"product/Phase1_PRD/#43-capital-calls","title":"4.3 Capital Calls","text":"<ul> <li>Class-specific capital call rules (percentages, schedules)</li> <li>Smart contract templates for notices and enforcement</li> <li>Automated payment tracking per LP and per class</li> <li>Status updates per LP; automated reminders/escalations</li> </ul>"},{"location":"product/Phase1_PRD/#44-waterfall-calculations-multi-class","title":"4.4 Waterfall Calculations (Multi-Class)","text":"<ul> <li>European: whole-of-fund with class-specific pref returns, catch-up, carry</li> <li>American: deal-by-deal with class-specific clawback logic</li> <li>Configurable inter-class priority and model switching</li> <li>Deterministic outputs per class with expected results validation</li> </ul>"},{"location":"product/Phase1_PRD/#45-workflow-automation-per-class","title":"4.5 Workflow Automation (Per Class)","text":"<ul> <li>Approvals for capital calls, distributions, and major document approvals</li> <li>Class-specific SLAs, reminder schedules, and escalations</li> <li>AI-assisted routing to reduce approval latency</li> </ul>"},{"location":"product/Phase1_PRD/#46-basic-analytics","title":"4.6 Basic Analytics","text":"<ul> <li>Class-level committed vs. deployed capital</li> <li>Portfolio breakdown and class contribution/return</li> <li>Export to PDF/Excel</li> </ul>"},{"location":"product/Phase1_PRD/#47-ai-integration-initial","title":"4.7 AI Integration (Initial)","text":"<ul> <li>Class-filtered queries (e.g., \"Show returns for Class B LPs\")</li> <li>AI-assisted capital call drafting with class parameters</li> <li>OCR + classification for documents with class awareness</li> </ul>"},{"location":"product/Phase1_PRD/#48-architecture-design","title":"4.8 Architecture Design","text":"<ul> <li>Corda node topology for scale and security</li> <li>API gateway for integrations and external services</li> <li>Security model for strict class-based segregation and audit</li> </ul>"},{"location":"product/Phase1_PRD/#49-fund-accounting","title":"4.9 Fund Accounting","text":"<ul> <li>Multi-class general ledger</li> <li>NAV and P&amp;L per class and combined</li> </ul>"},{"location":"product/Phase1_PRD/#410-portfolio-tracking","title":"4.10 Portfolio Tracking","text":"<ul> <li>Company profiles with investment history split by class</li> <li>Performance metrics per class and consolidated views</li> </ul>"},{"location":"product/Phase1_PRD/#5-non-functional-requirements","title":"5. Non-Functional Requirements","text":"<ul> <li>Mobile-responsive web app</li> <li>High security: DLT auditability, encryption, RBAC with class segregation</li> <li>GDPR-ready and regional compliance placeholders</li> <li>Cloud deployment (AWS/Azure/GCP)</li> <li>API-first for integrations and modular scale</li> </ul>"},{"location":"product/Phase1_PRD/#6-acceptance-criteria-key","title":"6. Acceptance Criteria (Key)","text":"<ul> <li>Permissions: LPs see only their class; adjustable without contract redeploy</li> <li>Documents: Versioning works; access logs accurate; hash verification consistent</li> <li>Capital Calls: Issued per class rules; LP payment statuses update correctly</li> <li>Waterfalls: Distributions per class match test vectors; switching preserves class logic</li> <li>Workflows: Class A and B flows run concurrently without conflict; reminders as configured</li> <li>Analytics: Reports filterable by class; exports work</li> <li>AI: Filters/outputs adhere to class constraints; drafts match class parameters</li> <li>Accounting: NAV computed separately by class and combined</li> <li>Portfolio: Class-specific contributions and returns displayed</li> </ul>"},{"location":"product/Phase1_PRD/#7-success-metrics","title":"7. Success Metrics","text":"<ul> <li>Funds onboarded leveraging multi-class features</li> <li>Volume of class-specific capital calls and distributions</li> <li>Workflow automation throughput and SLA adherence</li> <li>Accuracy of waterfall outputs vs. expected vectors</li> <li>Frequency of AI-assisted actions</li> <li>Analytics/export usage by class</li> </ul>"},{"location":"product/Phase1_PRD/#8-risks-mitigation","title":"8. Risks &amp; Mitigation","text":"<ul> <li>Multi-class complexity: Test vectors and simulation harnesses</li> <li>Security/segregation: Pen testing, rigorous data access validation, on-ledger audit</li> <li>Scope creep: Phased deliveries with strict change control</li> <li>Compliance variance: Region placeholders and pilot validation</li> </ul>"},{"location":"product/Phase1_PRD/#9-timeline-sprint-breakdown","title":"9. Timeline (Sprint Breakdown)","text":"<p>\ud83d\udccb For detailed implementation plan, see: Sprint Plan Phase 1</p> <ul> <li>Sprint 1: Architecture, Corda setup, role-based permissions, document metadata + versioning</li> <li>Sprint 2: Capital calls (multi-class rules), basic class workflows, payment tracking</li> <li>Sprint 3: Waterfalls (EU/US) with class logic and prioritization; advanced workflows</li> <li>Sprint 4: Basic analytics, fund accounting (class NAV/P&amp;L), portfolio tracking</li> <li>Sprint 5: AI-assisted workflows (queries, drafting, OCR), integration testing, QA/security, pilot onboarding</li> </ul>"},{"location":"product/Phase1_PRD/#10-qa-documentation","title":"10. QA Documentation","text":"<p>\ud83e\uddea For comprehensive testing coverage, see: Sprint\u2192Functional Test Mapping</p> <p>For comprehensive quality assurance and testing information, please refer to the following documentation:</p> <ul> <li>QA Overview - Complete guide to our QA processes and methodologies</li> <li>Phase 1 Functional Test Cases - Detailed test scenarios for all Phase 1 features</li> <li>PRD Traceability Matrix - Mapping of requirements to test cases and validation criteria</li> <li>Acceptance Criteria Validation - Framework for validating acceptance criteria and sign-off procedures</li> </ul>"},{"location":"product/Phase1_PRD/#verification-links","title":"Verification Links","text":"<ul> <li>Sprint Plan Phase 1 - Detailed sprint planning and timeline for Phase 1 implementation</li> <li>Sprint\u2192Functional Test Mapping - Mapping of sprint deliverables to functional test coverage</li> </ul> <p>Summary: Phase 1 delivers a secure, multi-class MVP across permissions, documents, capital calls, waterfalls, workflows, analytics, fund accounting, and portfolio tracking, with AI assist and an architecture ready for scale.</p>"},{"location":"qa/","title":"DealSphere Phase 1 QA Suite \u2014 PRD-Aligned Testing Framework","text":""},{"location":"qa/#overview","title":"Overview","text":"<p>This QA suite is strictly aligned to the Phase 1 PRD at docs/product/Phase1_PRD.md. It provides full functional coverage and traceability for PRD sections 4.1\u20134.10 and acceptance criteria in section 6. Execution is organized by the PRD Timeline (Sprint Breakdown) in section 9.</p> <p>Scope (Phase 1) - Platform &amp; Security (4.1): RBAC, class segregation, audit, on-ledger access metadata - Document Management (4.2): on-ledger metadata, encrypted storage, versioning, access logs, content hash verification, smart search and OCR classification (initial) - Capital Calls (4.3): class rules, notices, payment tracking, statuses, reminders/escalations - Waterfalls (4.4): European, American, inter-class priority, switching, determinism - Workflow Automation (4.5): approvals for calls/distros/docs, class SLAs, reminders/escalations, AI-assisted routing - Basic Analytics (4.6): class-level committed vs deployed, portfolio breakdown, export PDF/Excel - AI Integration (4.7): class-filtered queries, drafting assist, OCR+classification with class awareness - Architecture Design (4.8): gateway enforcement and strict segregation checks - Fund Accounting (4.9): multi-class GL, NAV/P&amp;L per class and combined - Portfolio Tracking (4.10): class-split histories and metrics</p> <p>What's included in this folder - phase1-functional-test-cases.md: Complete functional test cases grouped by PRD section - prd-traceability-phase1.md: Bidirectional matrix mapping PRD requirements to test cases and sprints - acceptance-criteria-validation.md: How each acceptance criterion in PRD section 6 is validated (tests, data, pass/fail)</p> <p>Sprint-based execution (from PRD section 9) - Sprint 1: Platform &amp; Security (4.1), Document metadata + versioning (4.2) - Sprint 2: Capital Calls (4.3), basic Workflow Automation (4.5) - Sprint 3: Waterfalls (4.4), advanced Workflow Automation (4.5) - Sprint 4: Basic Analytics (4.6), Fund Accounting (4.9), Portfolio Tracking (4.10) - Sprint 5: AI Integration (4.7), end-to-end integration and acceptance criteria validation</p> <p>Quality gates - 100% coverage of functional requirements (PRD 4.1\u20134.10) - All acceptance criteria (PRD 6) validated with passing tests - Class segregation verified across APIs/UI/exports - Deterministic waterfall results matching test vectors - Full document versioning and hash integrity verified</p> <p>Execution notes - Each test case includes: ID, Title, PRD Reference, Preconditions, Test Data, Steps, Expected Result, Negative/Edge variants, Postconditions. - Use representative class data: GP, Admin, Auditor, LPs in Class A and Class B; at least two LPs per class; 2\u20133 deals; sample documents (PDF/DOCX). - Store any test vectors for waterfalls under docs/qa/data if needed.</p>"},{"location":"qa/acceptance-criteria-validation/","title":"Acceptance Criteria Validation \u2014 Phase 1 PRD","text":""},{"location":"qa/acceptance-criteria-validation/#method","title":"Method","text":"<ul> <li>For each PRD section 6 criterion, list validating test cases, datasets, and pass/fail rules.</li> </ul>"},{"location":"qa/acceptance-criteria-validation/#criteria-and-validation","title":"Criteria and validation","text":""},{"location":"qa/acceptance-criteria-validation/#permissions-lps-see-only-their-class-adjustable-without-redeploy","title":"Permissions: \"LPs see only their class; adjustable without redeploy\"","text":"<ul> <li>Tests: TC-SEC-001, TC-SEC-002, TC-SEC-004</li> <li>Data: LP(A)/LP(B), membership change scenario</li> <li>Pass: Unauthorized access denied; membership change reflected in auth decisions</li> </ul>"},{"location":"qa/acceptance-criteria-validation/#documents-versioning-works-access-logs-accurate-hash-verification-consistent","title":"Documents: \"Versioning works; access logs accurate; hash verification consistent\"","text":"<ul> <li>Tests: TC-DOC-002, TC-DOC-005, TC-DOC-004</li> <li>Data: One doc per class; v1/v2 uploads; client hash</li> <li>Pass: Version history correct; logs complete; hash matches; tamper detected</li> </ul>"},{"location":"qa/acceptance-criteria-validation/#capital-calls-issued-per-class-rules-lp-payment-statuses-update-correctly","title":"Capital Calls: \"Issued per class rules; LP payment statuses update correctly\"","text":"<ul> <li>Tests: TC-CALL-001, TC-CALL-002, TC-CALL-003</li> <li>Data: Class A 10%, Class B 5%; 2 LPs each</li> <li>Pass: Obligations computed per rules; statuses roll up</li> </ul>"},{"location":"qa/acceptance-criteria-validation/#waterfalls-distributions-per-class-match-vectors-switching-preserves-class-logic","title":"Waterfalls: \"Distributions per class match vectors; switching preserves class logic\"","text":"<ul> <li>Tests: TC-WF-001, TC-WF-003</li> <li>Data: Test vector JSON; priority toggle</li> <li>Pass: Within specified tolerance vs vectors; switching maintains rules</li> </ul>"},{"location":"qa/acceptance-criteria-validation/#workflows-class-a-and-b-flows-run-concurrently-reminders-as-configured","title":"Workflows: \"Class A and B flows run concurrently; reminders as configured\"","text":"<ul> <li>Tests: TC-WFLO-003, TC-WFLO-002</li> <li>Pass: No cross-impact; reminders/escalations fire as configured</li> </ul>"},{"location":"qa/acceptance-criteria-validation/#analytics-reports-filterable-by-class-exports-work","title":"Analytics: \"Reports filterable by class; exports work\"","text":"<ul> <li>Tests: TC-ANL-001, TC-ANL-003</li> <li>Pass: Filters correct; export totals match UI; scope restricted</li> </ul>"},{"location":"qa/acceptance-criteria-validation/#ai-filtersoutputs-adhere-to-class-constraints-drafts-match-class-parameters","title":"AI: \"Filters/outputs adhere to class constraints; drafts match class parameters\"","text":"<ul> <li>Tests: TC-AI-001, TC-AI-002, TC-DOC-006</li> <li>Pass: No leakage across classes; draft uses class rule params; OCR class assignment correct</li> </ul>"},{"location":"qa/acceptance-criteria-validation/#accounting-nav-computed-separately-by-class-and-combined","title":"Accounting: \"NAV computed separately by class and combined\"","text":"<ul> <li>Tests: TC-ACCT-002</li> <li>Pass: NAV per class and combined computed correctly on target dates</li> </ul>"},{"location":"qa/acceptance-criteria-validation/#portfolio-class-specific-contributions-and-returns-displayed","title":"Portfolio: \"Class-specific contributions and returns displayed\"","text":"<ul> <li>Tests: TC-PORT-001, TC-PORT-002</li> <li>Pass: Contributions/returns per class visible to authorized roles only</li> </ul>"},{"location":"qa/acceptance-criteria-validation/#execution-and-evidence","title":"Execution and evidence","text":"<ul> <li>Record actuals (inputs/outputs), screenshots, exports, and audit log entries for each criterion</li> <li>Store waterfall vectors and result diffs under docs/qa/data</li> <li>Mark each criterion Passed/Failed with links to evidence commits or artifacts</li> </ul>"},{"location":"qa/phase1-functional-test-cases/","title":"DealSphere Phase 1 \u2014 Functional Test Cases (PRD-Aligned)","text":""},{"location":"qa/phase1-functional-test-cases/#conventions","title":"Conventions","text":"<ul> <li>Roles: Admin, GP, LP(A), LP(B), Auditor, AI Assistant (virtual)</li> <li>Classes: A and B configured with distinct rules</li> <li>PRD references use \"PRD x.y\" matching docs/product/Phase1_PRD.md</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#section-41-platform-security-rbac-class-segregation-audit","title":"Section 4.1 Platform &amp; Security (RBAC, class segregation, audit)","text":"<ul> <li>TC-SEC-001: Role matrix enforcement (PRD 4.1)</li> <li>Preconditions: Users exist for each role; classes A/B configured</li> <li>Steps: Attempt read/write actions per role across classes</li> <li>Expected: Admin full; GP per-fund; LP only own class; Auditor read-only; AI restricted to caller's scope</li> <li>Negative: LP(B) reading Class A docs or capital calls returns 403</li> <li>TC-SEC-002: Class isolation in GraphQL/REST (PRD 4.1)</li> <li>Steps: Query lists and nested relations</li> <li>Expected: Results filtered to user's class, totals reflect filtered set</li> <li>TC-SEC-003: Token/session authorization (PRD 4.1)</li> <li>Steps: Use valid token with mismatched class scope</li> <li>Expected: 403, audit log with actor/class/resource</li> <li>TC-SEC-004: On-ledger access metadata reflection (PRD 4.1, 4.8)</li> <li>Steps: Change class membership/permissions; call API</li> <li>Expected: Authorization decisions reflect updated on-ledger state within expected delay</li> <li>TC-SEC-005: Audit trail completeness (PRD 4.1)</li> <li>Steps: Perform read/write/denied attempts</li> <li>Expected: Logs include actor, class, resource, action, timestamp; immutable reference on-ledger</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#section-42-document-management-versioning-integrity-logs","title":"Section 4.2 Document Management (versioning, integrity, logs)","text":"<ul> <li>TC-DOC-001: Upload with on-ledger metadata (PRD 4.2)</li> <li>Steps: Upload v1; verify metadata on-ledger, binary encrypted off-ledger</li> <li>TC-DOC-002: Versioning workflow v1\u2192v2 (PRD 4.2)</li> <li>Steps: Upload v2 of same document</li> <li>Expected: Version increments; history lists v1/v2 with authors and timestamps; v1 remains accessible read-only</li> <li>TC-DOC-003: Version access control by class/role (PRD 4.1, 4.2)</li> <li>Steps: LP(A) accesses A doc; LP(B) attempts access</li> <li>Expected: LP(B) denied; GP/Admin allowed; Auditor read-only</li> <li>TC-DOC-004: Content hash verification (PRD 4.2)</li> <li>Steps: Compute client hash after upload; compare to stored hash; simulate tamper</li> <li>Expected: Hash match normally; tamper detected; alert/audit logged</li> <li>TC-DOC-005: Access logs for view/download/version (PRD 4.2, 6)</li> <li>Expected: Accurate entries for each action</li> <li>TC-DOC-006: Smart search and OCR classification (initial) (PRD 4.2, 4.7)</li> <li>Steps: Upload scanned PDF; search text; check class label</li> <li>Expected: Results only within user's class; OCR assigns correct class; misclassification never leaks across classes</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#section-43-capital-calls-class-rules-notices-tracking","title":"Section 4.3 Capital Calls (class rules, notices, tracking)","text":"<ul> <li>TC-CALL-001: Configure class rules (PRD 4.3)</li> <li>Steps: Set Class A 10%, Class B 5%</li> <li>Expected: Rules persist; reflected in issuance</li> <li>TC-CALL-002: Issue capital call per class (PRD 4.3)</li> <li>Steps: Issue; verify per-LP obligations and notices by class</li> <li>TC-CALL-003: Payment status lifecycle (PRD 4.3, 6)</li> <li>Steps: Mark Paid/Partial; simulate overdue</li> <li>Expected: Per-LP statuses correct; class rollups update</li> <li>TC-CALL-004: Reminders/escalations (PRD 4.3, 4.5)</li> <li>Steps: Trigger reminder schedule; verify escalation to GP on breach</li> <li>TC-CALL-005: Guardrails and audit (PRD 4.3, 4.1)</li> <li>Steps: Attempt wrong-class payment/overpay</li> <li>Expected: Rejected with audit trail</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#section-44-waterfall-calculations-euus-priority-determinism","title":"Section 4.4 Waterfall Calculations (EU/US, priority, determinism)","text":"<ul> <li>TC-WF-001: European model per class (PRD 4.4, 6)</li> <li>Steps: Run with provided inputs; compare outputs to vectors</li> <li>Expected: Pref, catch-up, carry applied per class; matches vectors</li> <li>TC-WF-002: American model with clawback (PRD 4.4)</li> <li>Steps: Over-distribute then realize; verify clawback</li> <li>TC-WF-003: Inter-class priority switching (PRD 4.4)</li> <li>Steps: Toggle priority; recompute</li> <li>Expected: Ordering and outputs change as expected</li> <li>TC-WF-004: Determinism (PRD 4.4)</li> <li>Steps: Run multiple times with same inputs</li> <li>Expected: Identical outputs or flagged divergence</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#section-45-workflow-automation-approvals-reminders-ai-routing","title":"Section 4.5 Workflow Automation (approvals, reminders, AI routing)","text":"<ul> <li>TC-WFLO-001: Class-specific approval chains (PRD 4.5)</li> <li>Steps: Require approvers for Class A/B capital calls</li> <li>Expected: Cannot proceed without required sign-offs</li> <li>TC-WFLO-002: Reminders/escalations (PRD 4.5)</li> <li>Steps: Validate reminders at intervals; escalation on breach</li> <li>TC-WFLO-003: Concurrent class workflows isolation (PRD 4.5, 6)</li> <li>Steps: Run Class A and B workflows in parallel</li> <li>Expected: No cross-impact; independent statuses</li> <li>TC-WFLO-004: AI-assisted routing within class (PRD 4.5, 4.7)</li> <li>Steps: Suggested approvers list</li> <li>Expected: Only approvers for that class; accepted suggestions produce valid routing</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#section-46-basic-analytics-class-filters-exports","title":"Section 4.6 Basic Analytics (class filters, exports)","text":"<ul> <li>TC-ANL-001: Class-filtered committed vs deployed (PRD 4.6)</li> <li>Steps: Switch class filters; validate numbers</li> <li>TC-ANL-002: Portfolio breakdown by class (PRD 4.6, 4.10)</li> <li>TC-ANL-003: Export PDF/Excel scoped to role/class (PRD 4.6)</li> <li>Expected: Exports match on-screen and contain only authorized data</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#section-47-ai-integration-initial","title":"Section 4.7 AI Integration (initial)","text":"<ul> <li>TC-AI-001: Class-filtered queries (PRD 4.7)</li> <li>TC-AI-002: Draft capital call with class parameters (PRD 4.7)</li> <li>Expected: Draft requires manual approval via workflows</li> <li>TC-AI-003: OCR + class assignment constraints (PRD 4.2, 4.7)</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#section-48-architecture-design-enforcement-checks","title":"Section 4.8 Architecture Design (enforcement checks)","text":"<ul> <li>TC-ARCH-001: API gateway enforces auth and class segregation (PRD 4.8)</li> <li>TC-ARCH-002: No cross-tenant/class leakage in GraphQL/REST (PRD 4.8)</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#section-49-fund-accounting","title":"Section 4.9 Fund Accounting","text":"<ul> <li>TC-ACCT-001: Class-attributed GL entries (PRD 4.9)</li> <li>TC-ACCT-002: NAV per class and combined; date-based recompute (PRD 4.9, 6)</li> <li>TC-ACCT-003: Role-based visibility (LP class-only; GP/Admin all) (PRD 4.9)</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#section-410-portfolio-tracking","title":"Section 4.10 Portfolio Tracking","text":"<ul> <li>TC-PORT-001: Company profiles with class-split contributions/distributions (PRD 4.10)</li> <li>TC-PORT-002: IRR/MOIC per class and consolidated; date filters (PRD 4.10)</li> <li>TC-PORT-003: Role-based visibility (PRD 4.10)</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#cross-cutting-apigraphql-functional-checks","title":"Cross-cutting API/GraphQL functional checks","text":"<ul> <li>TC-API-001: Pagination/sorting within class scope (4.1, 4.8)</li> <li>TC-API-002: Mutations blocked across classes (4.1)</li> <li>TC-API-003: Error messages are user-friendly, non-revealing (4.1)</li> </ul>"},{"location":"qa/phase1-functional-test-cases/#appendix-sample-test-data","title":"Appendix: Sample test data","text":"<ul> <li>Classes: A (10% call), B (5% call)</li> <li>LPs: 2 per class with different commitments</li> <li>Deals: 2\u20133 investments with staged cashflows</li> <li>Waterfall vectors: Place under docs/qa/data/waterfalls.json</li> <li>Documents: 3 per class including a scanned PDF for OCR</li> </ul>"},{"location":"qa/prd-traceability-phase1/","title":"PRD Traceability Matrix \u2014 Phase 1","text":""},{"location":"qa/prd-traceability-phase1/#purpose","title":"Purpose","text":"<ul> <li>Bidirectional mapping between PRD requirements (Sections 4.1\u20134.10 and 6) and test cases.</li> <li>Aligns tests to PRD sprints (Section 9) based on confirmed sprint plan and test demarcation logic.</li> <li>Maps PRD \u00a74.1\u20134.10 and AC \u00a76.x to existing test IDs and their planned sprint(s).</li> </ul>"},{"location":"qa/prd-traceability-phase1/#matrix","title":"Matrix","text":"PRD Reference Requirement Feature Test Case IDs Sprint 4.1 Platform &amp; Security RBAC/class segregation TC-SEC-001, TC-SEC-002 1 On-ledger access reflection TC-SEC-004 1 Security hardening TC-SEC-003 2 4.2 Document Mgmt On-ledger metadata, encrypted storage TC-DOC-001 2 Versioning lifecycle TC-DOC-002 2 Access control/logs TC-DOC-LOG-001 2 4.3 Capital Calls Rules/issuance TC-CALL-001, TC-CALL-002 4 Payments/status/reminders TC-NOTIF-001, TC-NOTIF-002 4 4.4 Waterfalls European/American models TC-DEAL-001, TC-DEAL-002 3 Priority/switching TC-WF-001 3 4.5 Workflow Automation Approvals TC-WF-001 3 Reminders/escalations TC-NOTIF-001, TC-NOTIF-002 4 4.6 Analytics Class filters, portfolio, export TC-ANL-001, TC-EXP-001 5 4.7 AI Integration Class-filtered queries/drafts/OCR TC-AI-001, TC-AI-002, TC-AI-003 Deferred 4.8 Architecture Design Gateway segregation TC-ARCH-001, TC-ARCH-002 1 4.9 Fund Accounting GL/NAV/P&amp;L/visibility TC-ACCT-001, TC-ACCT-002, TC-ACCT-003 5 4.10 Portfolio Tracking Profiles/metrics/visibility TC-PERF-001 5 DLT Infrastructure Audit plumbing and reference implementation TC-DLT-REF-001 1 DLT marking (if required) TC-DLT-MARK-001 4 User/Company Management User CRUD operations TC-USER-001 2 Company management TC-COMP-001 2 Dashboard &amp; UI User dashboards TC-DASH-USER-001 3 Company dashboards TC-DASH-CO-001 3 Performance &amp; Caching Cache optimization (if Redis used) TC-CACHE-OPT-001 5 E2E &amp; Validation End-to-end testing TC-E2E-001 6 Security hardening validation TC-SEC-HARD-001 6 Disaster Recovery TC-DR-001 6"},{"location":"qa/prd-traceability-phase1/#prd-section-6-acceptance-criteria-sprint-mapping","title":"PRD Section 6 Acceptance Criteria Sprint Mapping","text":"Acceptance Criteria Test Cases Sprint Permissions: LPs see only their class; adjustable without redeploy TC-SEC-001, TC-SEC-002, TC-SEC-004 1, 2 Documents: Versioning works; access logs accurate; hash consistent TC-DOC-002, TC-DOC-LOG-001, TC-DOC-004 2 Capital Calls: Issued per class; payment statuses update TC-CALL-001, TC-CALL-002, TC-NOTIF-001 4 Waterfalls: Distributions match vectors; switching preserves logic TC-DEAL-001, TC-WF-001 3 Workflows: Class A &amp; B flows run concurrently; reminders as configured TC-WF-001, TC-NOTIF-002 3, 4 Analytics: Reports filterable by class; exports work TC-ANL-001, TC-EXP-001 5 AI: Outputs/drafts adhere to class constraints TC-AI-001, TC-AI-002, TC-DOC-006 Deferred Accounting: NAV by class and combined TC-ACCT-002 5 Portfolio: Class contributions and returns displayed TC-PERF-001 5"},{"location":"qa/prd-traceability-phase1/#sprint-alignment-summary-confirmed-sprint-plan","title":"Sprint Alignment Summary (Confirmed Sprint Plan)","text":"<p>Sprint 1: Security/RBAC core and DLT audit plumbing - Test Cases: TC-SEC-001, TC-SEC-002, TC-SEC-LOG-001, TC-DLT-REF-001 - PRD Coverage: 4.1 (RBAC core), 4.8 (Architecture), DLT infrastructure</p> <p>Sprint 2: Documents, User/Company CRUD, resolver enforcement - Test Cases: TC-DOC-001, TC-DOC-002, TC-DOC-LOG-001, TC-USER-001, TC-COMP-001, TC-SEC-003 - PRD Coverage: 4.2 (Documents), User/Company management, Security enforcement</p> <p>Sprint 3: Deal lifecycle, workflow basics, dashboards - Test Cases: TC-DEAL-001, TC-DEAL-002, TC-WF-001, TC-DASH-USER-001, TC-DASH-CO-001 - PRD Coverage: 4.4 (Waterfalls), 4.5 (Workflow basics), Dashboard UI</p> <p>Sprint 4: Capital calls MVP, notifications/reminders - Test Cases: TC-CALL-001, TC-CALL-002, TC-NOTIF-001, TC-NOTIF-002, TC-DLT-MARK-001 (if required) - PRD Coverage: 4.3 (Capital Calls), Notification system</p> <p>Sprint 5: Analytics/portfolio, exports, performance basics - Test Cases: TC-ANL-001, TC-EXP-001, TC-PERF-001, TC-CACHE-OPT-001 (if Redis used) - PRD Coverage: 4.6 (Analytics), 4.9 (Fund Accounting), 4.10 (Portfolio), Performance optimization</p> <p>Sprint 6: Full AC validation, E2E, security hardening, DR/backups - Test Cases: TC-E2E-001, TC-SEC-HARD-001, TC-DR-001, crosswalk closure validation - PRD Coverage: End-to-end validation, Security hardening, Disaster Recovery</p> <p>Deferred/Post-Phase 1: - 4.7 AI Integration: TC-AI-001, TC-AI-002, TC-AI-003 - Advanced AI features requiring additional infrastructure</p>"},{"location":"qa/prd-traceability-phase1/#change-control","title":"Change Control","text":"<ul> <li>Update this matrix within 24 hours of any PRD change.</li> <li>Reflect added/modified tests and sprint coverage immediately.</li> <li>Highlight any PRD items not covered by functional tests for future action.</li> </ul>"},{"location":"qa/prd-traceability-phase1/#notes","title":"Notes","text":"<ul> <li>Sprint mapping covers PRD \u00a74.1\u20134.10 and AC \u00a76.x as confirmed in sprint plan</li> <li>Test case alignment follows DLT-first approach with 6 sprint structure</li> <li>All acceptance criteria have corresponding test validation except deferred AI features</li> <li>E2E testing in Sprint 6 validates cross-sprint integration and final acceptance criteria</li> </ul>"},{"location":"qa/sprint-functional-test-mapping-phase-1/","title":"Sprint to Functional Test Mapping - Phase 1","text":""},{"location":"qa/sprint-functional-test-mapping-phase-1/#overview","title":"Overview","text":"<p>This document maps sprint deliverables to their corresponding functional test cases for Phase 1 development, ensuring comprehensive test coverage aligned with product requirements.</p>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#reference-documents","title":"Reference Documents","text":"<ul> <li>Sprint Plan Phase 1 - Technical sprint breakdown and deliverables</li> <li>Phase 1 Functional Test Cases - Complete functional test suite</li> <li>Phase 1 PRD - Product requirements and acceptance criteria</li> </ul>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#sprint-to-test-mapping","title":"Sprint-to-Test Mapping","text":""},{"location":"qa/sprint-functional-test-mapping-phase-1/#sprint-1-foundation-core-dlt-infrastructure","title":"Sprint 1: Foundation &amp; Core DLT Infrastructure","text":"<p>Sprint Deliverables (from Sprint Plan): - Establish core Corda 5 network foundation - Implement basic deal state and flow structures - Set up development and testing infrastructure - Define core domain models for commercial real estate deals</p> <p>Mapped Functional Tests (from Test Cases): - Platform &amp; Security tests covering PRD \u00a74.1 - Document metadata tests covering PRD \u00a74.2 - Core DLT infrastructure validation</p> <p>PRD Alignment (from Phase 1 PRD): - Validates Platform &amp; Security (\u00a74.1) requirements - Ensures Document Management (\u00a74.2) foundations - Meets Acceptance Criteria \u00a76.1-6.2</p>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#sprint-2-deal-lifecycle-document-management","title":"Sprint 2: Deal Lifecycle &amp; Document Management","text":"<p>Sprint Deliverables (from Sprint Plan): - Implement comprehensive deal lifecycle states - Build secure document attachment system - Establish role-based access control framework - Create deal milestone tracking</p> <p>Mapped Functional Tests (from Test Cases): - Document management tests for PRD \u00a74.2 - Capital calls basic tests for PRD \u00a74.3 - Basic workflow tests for PRD \u00a74.5</p> <p>PRD Alignment (from Phase 1 PRD): - Covers Document Management (\u00a74.2) features - Validates Capital Calls (\u00a74.3) foundations - Tests Workflow Automation (\u00a74.5) basics</p>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#sprint-3-financial-integration-payment-processing","title":"Sprint 3: Financial Integration &amp; Payment Processing","text":"<p>Sprint Deliverables (from Sprint Plan): - Implement secure payment processing workflows - Build escrow and fund management system - Create financial reporting and audit capabilities - Establish compliance framework integration</p> <p>Mapped Functional Tests (from Test Cases): - Waterfall calculation tests for PRD \u00a74.4 - Advanced workflow tests for PRD \u00a74.5 - Financial processing validation</p> <p>PRD Alignment (from Phase 1 PRD): - Validates Waterfall Calculations (\u00a74.4) - Tests Workflow Automation (\u00a74.5) advanced features - Ensures financial compliance requirements</p>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#sprint-4-api-development-external-integrations","title":"Sprint 4: API Development &amp; External Integrations","text":"<p>Sprint Deliverables (from Sprint Plan): - Develop comprehensive REST API layer - Build external system integration capabilities - Implement third-party service connectors - Create webhook and notification systems</p> <p>Mapped Functional Tests (from Test Cases): - Basic analytics tests for PRD \u00a74.6 - Fund accounting tests for PRD \u00a74.9 - Portfolio tracking tests for PRD \u00a74.10 - Architecture design validation for PRD \u00a74.8</p> <p>PRD Alignment (from Phase 1 PRD): - Validates Basic Analytics (\u00a74.6) requirements - Tests Fund Accounting (\u00a74.9) functionality - Covers Portfolio Tracking (\u00a74.10) - Ensures Architecture Design (\u00a74.8) compliance</p>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#sprint-5-user-interface-experience","title":"Sprint 5: User Interface &amp; Experience","text":"<p>Sprint Deliverables (from Sprint Plan): - Develop responsive web application interface - Implement user experience workflows - Create dashboard and reporting views - Build mobile-friendly interface components</p> <p>Mapped Functional Tests (from Test Cases): - AI integration tests for PRD \u00a74.7 - End-to-end integration testing - User interface validation - Mobile responsiveness tests</p> <p>PRD Alignment (from Phase 1 PRD): - Tests AI Integration (\u00a74.7) features - Validates complete feature set integration - Ensures Acceptance Criteria (\u00a76) compliance</p>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#sprint-6-integration-testing-deployment","title":"Sprint 6: Integration, Testing &amp; Deployment","text":"<p>Sprint Deliverables (from Sprint Plan): - Complete end-to-end system integration - Perform comprehensive testing and quality assurance - Establish CI/CD pipelines and deployment automation - Conduct security testing and performance optimization</p> <p>Mapped Functional Tests (from Test Cases): - Complete functional test suite execution - Performance and security validation - End-to-end user journey testing - Production readiness verification</p> <p>PRD Alignment (from Phase 1 PRD): - Validates all Feature Requirements (\u00a74.1-4.10) - Tests all Acceptance Criteria (\u00a76) - Ensures Success Metrics (\u00a77) compliance</p>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#test-coverage-matrix","title":"Test Coverage Matrix","text":"Sprint Feature Area Test Cases PRD Section Coverage % 1 Platform &amp; Security Platform tests PRD \u00a74.1 100% 1 Document Management Document tests PRD \u00a74.2 80% 2 Capital Calls Capital tests PRD \u00a74.3 100% 2 Workflow Automation Basic workflow tests PRD \u00a74.5 60% 3 Waterfall Calculations Waterfall tests PRD \u00a74.4 100% 3 Workflow Automation Advanced workflow tests PRD \u00a74.5 100% 4 Basic Analytics Analytics tests PRD \u00a74.6 100% 4 Architecture Design Architecture tests PRD \u00a74.8 90% 4 Fund Accounting Accounting tests PRD \u00a74.9 100% 4 Portfolio Tracking Portfolio tests PRD \u00a74.10 100% 5 AI Integration AI tests PRD \u00a74.7 100% 6 End-to-End All tests All PRD \u00a74.1-4.10 100%"},{"location":"qa/sprint-functional-test-mapping-phase-1/#quality-gates","title":"Quality Gates","text":"<p>Each sprint must meet the following quality gates before progression:</p> <ol> <li>All mapped functional tests pass (100% pass rate required)</li> <li>PRD acceptance criteria validated (as defined in PRD \u00a76)</li> <li>Test coverage minimum 90% (per feature area)</li> <li>Performance benchmarks met (as specified in PRD \u00a75)</li> </ol>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#cross-reference-links","title":"Cross-Reference Links","text":""},{"location":"qa/sprint-functional-test-mapping-phase-1/#prd-anchors","title":"PRD Anchors","text":"<ul> <li>PRD \u00a74.1 - Platform &amp; Security</li> <li>PRD \u00a74.2 - Document Management</li> <li>PRD \u00a74.3 - Capital Calls</li> <li>PRD \u00a74.4 - Waterfall Calculations</li> <li>PRD \u00a74.5 - Workflow Automation</li> <li>PRD \u00a74.6 - Basic Analytics</li> <li>PRD \u00a74.7 - AI Integration</li> <li>PRD \u00a74.8 - Architecture Design</li> <li>PRD \u00a74.9 - Fund Accounting</li> <li>PRD \u00a74.10 - Portfolio Tracking</li> <li>PRD \u00a76 - Acceptance Criteria</li> </ul>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#sprint-plan-anchors","title":"Sprint Plan Anchors","text":"<ul> <li>Sprint 1: Foundation &amp; Core DLT Infrastructure</li> <li>Sprint 2: Deal Lifecycle &amp; Document Management</li> <li>Sprint 3: Financial Integration &amp; Payment Processing</li> <li>Sprint 4: API Development &amp; External Integrations</li> <li>Sprint 5: User Interface &amp; Experience</li> <li>Sprint 6: Integration, Testing &amp; Deployment</li> </ul>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#test-cases","title":"Test Cases","text":"<ul> <li>Phase 1 Functional Test Cases - Complete functional test suite</li> <li>PRD Traceability Matrix - Requirements to test mapping</li> <li>Acceptance Criteria Validation - Validation framework</li> </ul>"},{"location":"qa/sprint-functional-test-mapping-phase-1/#notes","title":"Notes","text":"<ul> <li>This mapping will be updated as sprints evolve and requirements change</li> <li>Additional test cases may be added based on edge cases discovered during development</li> <li>Cross-reference with Sprint Plan for detailed technical specifications</li> <li>All test cases detailed in Phase 1 Functional Test Cases</li> <li>Acceptance criteria sourced from Phase 1 PRD</li> </ul> <p>Last Updated: August 13, 2025 Maintained by: QA Team</p>"},{"location":"tech/phase-1-stakeholder-summary/","title":"Phase 1 Stakeholder Summary (MVP, Months 1\u20133)","text":""},{"location":"tech/phase-1-stakeholder-summary/#what-were-delivering","title":"What we're delivering","text":"<ul> <li>Multi-class foundations: class-based permissions, views, and governance</li> <li>Documents: on-ledger metadata anchors; encrypted off-ledger storage; versions; audit logs</li> <li>Capital calls: class-specific rules, smart contract notices, per-LP/class tracking, reminders</li> <li>Waterfalls: EU/US with class-specific terms, clawbacks, inter-class prioritization</li> <li>Workflows: class approvals, SLAs, reminders; AI-assisted routing (feature-flagged)</li> <li>Analytics and reporting: committed vs deployed by class; portfolio breakdown; export PDF/Excel</li> <li>Fund accounting: multi-class GL; NAV/P&amp;L per class and combined</li> <li>Portfolio tracking: class contributions and returns; company profiles</li> <li>AI initial: class-filtered queries; capital call drafting; OCR/classification</li> <li>Architecture: Corda topology; API gateway; class-segregated security model</li> </ul>"},{"location":"tech/phase-1-stakeholder-summary/#how-it-maps","title":"How it maps","text":"<ul> <li>Roadmap Phase 1 \u2192 covered by Sprint Plan (5 sprints \u00d7 2 weeks)</li> <li>PRD Sections \u2192 traced to sprints and ADRs in sprint-plan-phase-1.md (PRD Traceability)</li> <li>ADRs 0000\u20130006 \u2192 architecture baselines for runtime, identity, ledger, exports, API</li> </ul>"},{"location":"tech/phase-1-stakeholder-summary/#milestones-and-acceptance","title":"Milestones and acceptance","text":"<ul> <li>Month 1 gate: RBAC, Docs v1, class rules, basic workflows (Staging live)</li> <li>Month 2 gate: EU/US waterfalls, analytics, accounting (vectors pass, parity met)</li> <li>Month 3 gate: AI initial, portfolio tracking, pilot readiness (pen test fixes, backup/restore)</li> </ul>"},{"location":"tech/phase-1-stakeholder-summary/#risks-and-controls","title":"Risks and controls","text":"<ul> <li>Multi-class complexity \u2192 test vectors/harness, segregation tests from Sprint 1</li> <li>Security posture \u2192 on-ledger audit, TLS/mTLS, pen test before Sprint 5 demo</li> <li>Scope creep \u2192 milestone gates and feature flags; strict change control</li> </ul>"},{"location":"tech/phase-1-stakeholder-summary/#links","title":"Links","text":"<ul> <li>Roadmap: docs/roadmap.md (placeholder or add as needed)</li> <li>PRD: docs/product/phase-1-prd.md (placeholder or add as needed)</li> <li>Sprint Plan: docs/tech/sprint-plan-phase-1.md</li> <li>Technical Plan: docs/tech/phase-1-technical-plan.md</li> <li>ADRs: docs/adr</li> </ul>"},{"location":"tech/phase-1-technical-plan/","title":"Phase 1 Technical Plan","text":""},{"location":"tech/phase-1-technical-plan/#executive-summary","title":"Executive Summary","text":"<p>This document outlines the technical implementation plan for Phase 1 of the DealSphere platform, organized into five sprints over 12 weeks with clear deliverables, architectural decisions, and a comprehensive roadmap toward MVP completion. Phase 1 establishes core platform infrastructure, authentication framework, capital calls module foundation, document management, and basic user interface components.</p>"},{"location":"tech/phase-1-technical-plan/#phase-1-scope","title":"Phase 1 Scope","text":""},{"location":"tech/phase-1-technical-plan/#in-scope","title":"In Scope","text":"<ul> <li>Core platform infrastructure setup and configuration</li> <li>Authentication and authorization framework (Keycloak OIDC/JWT)</li> <li>Capital calls module foundation with CRUD operations</li> <li>Document management system with secure file storage</li> <li>Basic user interface framework and dashboard skeleton</li> <li>Database schema setup (PostgreSQL) and data models</li> <li>API gateway implementation with service communication</li> <li>CI/CD pipeline configuration and development standards</li> <li>Smart contract notices for on-ledger reference tracking</li> <li>Payment file generation in ISO 20022 pain.001 format</li> <li>Role-based access control (RBAC) and multi-tenant isolation</li> <li>Container orchestration setup with Docker Compose</li> <li>Logging and monitoring infrastructure implementation</li> <li>Compliance framework initialization and security baseline</li> <li>GraphQL backend-for-frontend (BFF) with Apollo Router</li> </ul>"},{"location":"tech/phase-1-technical-plan/#out-of-scope","title":"Out of Scope","text":"<ul> <li>Advanced workflow automation and complex business rules</li> <li>Full integration with external banking and payment systems</li> <li>Advanced analytics and reporting dashboards</li> <li>Mobile application development (iOS/Android)</li> <li>Third-party integrations beyond core authentication</li> <li>Advanced OCR (beyond minimal classification/search used in Phase 1)</li> <li>Real-time collaboration features and live updates</li> <li>Advanced compliance reporting and audit trails</li> <li>Multi-language support and internationalization</li> <li>Advanced user management and organization hierarchies</li> <li>Performance optimization and scalability enhancements</li> <li>Advanced security features (2FA, SSO beyond OIDC)</li> <li>Custom branding and white-label solutions</li> <li>Advanced notification systems and communication channels</li> <li>Integration with CRM and ERP systems</li> </ul>"},{"location":"tech/phase-1-technical-plan/#milestones-success-criteria","title":"Milestones &amp; Success Criteria","text":"Week Gate Success Criteria Date 4 Foundation Complete Core infrastructure, auth framework, basic UI components operational 12 Sept 2025 8 Core Business Logic Capital calls CRUD, document management, payment file generation working 12 Oct 2025 12 MVP Ready End-to-end workflows, compliance framework, production deployment ready 12 Nov 2025"},{"location":"tech/phase-1-technical-plan/#architecture-baselines","title":"Architecture Baselines","text":"<p>The technical architecture is defined by Architecture Decision Records (ADRs) 0000\u20130006:</p> <ul> <li>ADR-0000: Technology stack selection</li> <li>ADR-0001: Authentication and authorization strategy</li> <li>ADR-0002: Database design and data models</li> <li>ADR-0003: API gateway and service communication</li> <li>ADR-0004: Frontend framework and component architecture</li> <li>ADR-0005: Document storage and security</li> <li>ADR-0006: CI/CD pipeline and deployment strategy</li> </ul>"},{"location":"tech/phase-1-technical-plan/#sprint-plan-overview","title":"Sprint Plan Overview","text":""},{"location":"tech/phase-1-technical-plan/#sprint-1-foundation-infrastructure-weeks-1-2","title":"Sprint 1: Foundation Infrastructure (Weeks 1-2)","text":""},{"location":"tech/phase-1-technical-plan/#objectives","title":"Objectives","text":"<p>Establish core platform infrastructure and development standards.</p>"},{"location":"tech/phase-1-technical-plan/#deliverables","title":"Deliverables","text":"<ul> <li>API gateway skeleton with auth and class segregation enforcement checks (QA TC-ARCH-001/002)</li> <li>Database schema setup (PostgreSQL)</li> <li>Basic CI/CD pipeline configuration</li> <li>Container orchestration setup (Docker Compose)</li> <li>Logging and monitoring infrastructure (Prometheus/Grafana/Loki/Tempo)</li> <li>Development environment standardization</li> <li>Keycloak OIDC/JWT integration</li> <li>Role-based access control (RBAC) framework</li> <li>JWT token management</li> <li>Multi-tenant user isolation</li> <li>Security baseline configuration</li> <li>Local development setup</li> <li>Testing framework configuration</li> <li>Code quality tools and linting</li> <li>Documentation structure</li> <li>Git workflow and branching strategy</li> </ul>"},{"location":"tech/phase-1-technical-plan/#definition-of-done","title":"Definition of Done","text":"<ul> <li>All infrastructure components deployed and operational</li> <li>Authentication flows tested and documented</li> <li>Development standards documented and enforced</li> <li>CI/CD pipeline successfully deploys to staging environment</li> </ul>"},{"location":"tech/phase-1-technical-plan/#sprint-2-core-business-logic-weeks-3-4","title":"Sprint 2: Core Business Logic (Weeks 3-4)","text":""},{"location":"tech/phase-1-technical-plan/#objectives_1","title":"Objectives","text":"<p>Implement foundational business logic for capital calls and document management.</p>"},{"location":"tech/phase-1-technical-plan/#deliverables_1","title":"Deliverables","text":"<ul> <li>Capital call data models and API endpoints</li> <li>Basic CRUD operations for capital calls</li> <li>Investor management system</li> <li>Smart contract notices (on-ledger reference for issued notices)</li> <li>Compliance framework initialization</li> <li>Payment file generation (pain.001 format)</li> <li>File upload and storage system (MinIO with SSE)</li> <li>Document versioning and metadata</li> <li>Access control for sensitive documents</li> <li>Basic document lifecycle management</li> <li>Responsive web application framework (React TypeScript)</li> <li>Dashboard skeleton and navigation</li> <li>Component library initialization</li> <li>Form handling and validation</li> <li>GraphQL backend-for-frontend (BFF) behind Apollo Router</li> </ul>"},{"location":"tech/phase-1-technical-plan/#definition-of-done_1","title":"Definition of Done","text":"<ul> <li>Capital calls can be created, read, updated, and deleted</li> <li>Document upload and retrieval working securely</li> <li>Basic UI components render correctly across devices</li> <li>Payment files generate in correct ISO 20022 format</li> </ul>"},{"location":"tech/phase-1-technical-plan/#sprint-3-workflow-automation-notifications-weeks-5-6","title":"Sprint 3: Workflow Automation &amp; Notifications (Weeks 5-6)","text":""},{"location":"tech/phase-1-technical-plan/#objectives_2","title":"Objectives","text":"<p>Implement basic workflow automation and notification systems.</p>"},{"location":"tech/phase-1-technical-plan/#deliverables_2","title":"Deliverables","text":"<ul> <li>Basic workflow engine for capital call processes</li> <li>Email notification system integration</li> <li>Approval workflow implementation</li> <li>Status tracking and audit logging</li> <li>User dashboard with activity feeds</li> <li>Basic reporting capabilities</li> </ul>"},{"location":"tech/phase-1-technical-plan/#definition-of-done_2","title":"Definition of Done","text":"<ul> <li>Capital call workflows execute from creation to completion</li> <li>Users receive appropriate notifications</li> <li>All actions are logged for audit purposes</li> <li>Dashboard displays relevant user information</li> </ul>"},{"location":"tech/phase-1-technical-plan/#sprint-4-integration-testing-weeks-7-8","title":"Sprint 4: Integration &amp; Testing (Weeks 7-8)","text":""},{"location":"tech/phase-1-technical-plan/#objectives_3","title":"Objectives","text":"<p>Integrate all components and implement comprehensive testing.</p>"},{"location":"tech/phase-1-technical-plan/#deliverables_3","title":"Deliverables","text":"<ul> <li>End-to-end testing suite</li> <li>Integration testing between all modules</li> <li>Performance testing and optimization</li> <li>Security testing and vulnerability assessment</li> <li>User acceptance testing preparation</li> <li>Documentation completion</li> </ul>"},{"location":"tech/phase-1-technical-plan/#definition-of-done_3","title":"Definition of Done","text":"<ul> <li>All tests pass in CI/CD pipeline</li> <li>Performance benchmarks meet requirements</li> <li>Security scan shows no critical vulnerabilities</li> <li>Documentation is complete and accurate</li> </ul>"},{"location":"tech/phase-1-technical-plan/#sprint-5-production-readiness-weeks-9-12","title":"Sprint 5: Production Readiness (Weeks 9-12)","text":""},{"location":"tech/phase-1-technical-plan/#objectives_4","title":"Objectives","text":"<p>Prepare system for production deployment and initial user onboarding.</p>"},{"location":"tech/phase-1-technical-plan/#deliverables_4","title":"Deliverables","text":"<ul> <li>Production environment setup</li> <li>Monitoring and alerting configuration</li> <li>Backup and disaster recovery procedures</li> <li>User onboarding flows</li> <li>Administrative tools</li> <li>Go-live readiness assessment</li> </ul>"},{"location":"tech/phase-1-technical-plan/#definition-of-done_4","title":"Definition of Done","text":"<ul> <li>Production environment is stable and monitored</li> <li>Backup and recovery procedures tested</li> <li>Initial users can complete full workflows</li> <li>System ready for production traffic</li> </ul>"},{"location":"tech/phase-1-technical-plan/#roadmap-traceability","title":"Roadmap Traceability","text":""},{"location":"tech/phase-1-technical-plan/#phase-1-phase-2-dependencies","title":"Phase 1 \u2192 Phase 2 Dependencies","text":"<ul> <li>Established authentication and authorization framework enables advanced user management</li> <li>Document management foundation supports advanced processing capabilities</li> <li>Capital calls CRUD operations enable complex workflow automation</li> <li>Basic UI components provide foundation for advanced dashboards</li> <li>Infrastructure setup supports scalability enhancements</li> </ul>"},{"location":"tech/phase-1-technical-plan/#technical-debt-management","title":"Technical Debt Management","text":"<ul> <li>Performance optimizations deferred to Phase 2</li> <li>Advanced security features (2FA, advanced SSO) scheduled for Phase 2</li> <li>Mobile application development planned for Phase 3</li> <li>Advanced analytics and reporting capabilities in Phase 2</li> </ul>"},{"location":"tech/phase-1-technical-plan/#inception-checklist","title":"Inception Checklist","text":""},{"location":"tech/phase-1-technical-plan/#raci-matrix","title":"RACI Matrix","text":"<ul> <li>Responsible: Development team leads for technical implementation</li> <li>Accountable: Technical Product Manager for delivery</li> <li>Consulted: Architecture team for design decisions</li> <li>Informed: Stakeholders and business users</li> </ul>"},{"location":"tech/phase-1-technical-plan/#codeowners","title":"CODEOWNERS","text":"<ul> <li><code>/docs/tech/</code>: @tech-lead @architect</li> <li><code>/src/backend/</code>: @backend-team @tech-lead</li> <li><code>/src/frontend/</code>: @frontend-team @ui-lead</li> <li><code>/infrastructure/</code>: @devops-team @tech-lead</li> <li><code>/tests/</code>: @qa-team @tech-lead</li> </ul>"},{"location":"tech/phase-1-technical-plan/#environments","title":"Environments","text":"<ul> <li>Development: Local development with Docker Compose</li> <li>Staging: Cloud-based staging environment for integration testing</li> <li>Production: High-availability production environment</li> </ul>"},{"location":"tech/phase-1-technical-plan/#non-functional-requirements-nfrs","title":"Non-Functional Requirements (NFRs)","text":"<ul> <li>Performance: Sub-2 second page load times</li> <li>Security: SOC 2 Type II compliance ready</li> <li>Availability: 99.9% uptime target</li> <li>Scalability: Support for 1000+ concurrent users</li> </ul>"},{"location":"tech/phase-1-technical-plan/#definition-of-ready-dor","title":"Definition of Ready (DoR)","text":"<ul> <li>User story has clear acceptance criteria</li> <li>Technical design is documented</li> <li>Dependencies are identified and available</li> <li>Testing approach is defined</li> </ul>"},{"location":"tech/phase-1-technical-plan/#definition-of-done-dod","title":"Definition of Done (DoD)","text":"<ul> <li>Code is reviewed and approved</li> <li>Unit tests pass with &gt;80% coverage</li> <li>Integration tests pass</li> <li>Documentation is updated</li> <li>Security scan passes</li> <li>Deployed to staging environment</li> </ul>"},{"location":"tech/phase-1-technical-plan/#risk-register","title":"Risk Register","text":"<ul> <li>High: Authentication integration complexity</li> <li>Medium: Third-party service dependencies</li> <li>Medium: Performance under load</li> <li>Low: Team resource availability</li> </ul>"},{"location":"tech/phase-1-technical-plan/#releaserollback-strategy","title":"Release/Rollback Strategy","text":"<ul> <li>Blue-green deployment for zero-downtime releases</li> <li>Automated rollback triggers on critical errors</li> <li>Database migration rollback procedures</li> <li>Feature flags for gradual rollout</li> </ul>"},{"location":"tech/phase-1-technical-plan/#qa-alignment","title":"QA Alignment","text":"<p>This technical plan is aligned with comprehensive QA documentation and testing strategies to ensure quality delivery:</p> <ul> <li>QA Overview - Quality assurance framework and processes</li> <li>Phase 1 Functional Test Cases - Detailed test cases for all Phase 1 features</li> <li>PRD Traceability - Requirements traceability matrix</li> <li>Acceptance Criteria Validation - Validation framework for user stories</li> <li>Sprint-to-Test Mapping - Cross-reference between sprint deliverables and test coverage</li> </ul>"},{"location":"tech/phase-1-technical-plan/#links-ownership","title":"Links &amp; Ownership","text":""},{"location":"tech/phase-1-technical-plan/#document-owners","title":"Document Owners","text":"<ul> <li>Primary: Technical Product Manager (@tpm-lead)</li> <li>Secondary: Lead Architect (@architect-lead)</li> <li>Reviewers: Development Team Leads</li> </ul>"},{"location":"tech/phase-1-technical-plan/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Decision Records</li> <li>API Documentation</li> <li>Development Setup Guide</li> <li>Deployment Guide</li> </ul>"},{"location":"tech/phase-1-technical-plan/#last-updated","title":"Last Updated","text":"<ul> <li>Date: Tuesday, August 12, 2025</li> <li>Version: 1.0</li> <li>Next Review: End of Sprint 1 (Week 2)</li> </ul>"},{"location":"tech/release-process/","title":"DealSphere Platform Regulated SaaS (FinTech) Release Management Process","text":"<p>This document details the mandatory process for every production release of the DealSphere Platform as a regulated SaaS (FinTech) provider. Adherence is required for audit, compliance, and operational excellence.</p>"},{"location":"tech/release-process/#1-planning-scope-definition","title":"1. Planning &amp; Scope Definition","text":"<p>Actions: - Define and approve release objectives, scope, target date, and relevant SLAs/regulatory boundaries. - Log all changes (features, fixes, migrations) with unique change/control tickets. - Engage Change Advisory Board (CAB) for scope and risk review.</p> <p>Deliverables: - Release scope doc and change log (in tracker/system) - CAB/steering committee signed minutes - Stakeholder and compliance officer approval</p>"},{"location":"tech/release-process/#2-regulatory-risk-compliance-review","title":"2. Regulatory Risk &amp; Compliance Review","text":"<p>Actions: - Assess each release item for compliance (SOC 2, PCI DSS, GDPR, RBI, etc.). - Run privacy, security, and financial-risk assessments. - Compile compliance checklists and prepare evidence.</p> <p>Deliverables: - Risk assessment report - Completed compliance checklist(s) - Signoff by named compliance or InfoSec owner</p>"},{"location":"tech/release-process/#3-secure-development-code-review","title":"3. Secure Development &amp; Code Review","text":"<p>Actions: - All code follows secure coding guidelines (reviewed/static scanned). - Independent code review and signoff for all changes. - Threat modeling and documentation for high-risk/newly-exposed components.</p> <p>Deliverables: - Signed code review and security scan artefacts - Patch/upgrade exception and acceptance-of-risk forms (if any)</p>"},{"location":"tech/release-process/#4-testing-audit-logging-quality-assurance","title":"4. Testing, Audit Logging &amp; Quality Assurance","text":"<p>Actions: - Automated and manual test coverage for features, security, privacy, and audit logging. - Validate role/access controls and production-grade logging. - Segregation of duties for deployment approval and production access.</p> <p>Deliverables: - Test summary with CI/CD run reports - Access and deployment logs demonstrating SoD - Pre-production simulated rollback/test signoff</p>"},{"location":"tech/release-process/#5-release-notes-documentation","title":"5. Release Notes &amp; Documentation","text":"<p>Actions: - Draft, publish, and archive release notes with all required disclosures. - Update user guides, security/compliance docs, runbooks, API references.</p> <p>Deliverables: - Release notes (public and internal/audit) - Updated user and support documentation - Knowledge base and runbook updates</p>"},{"location":"tech/release-process/#6-pre-release-approval","title":"6. Pre-Release Approval","text":"<p>Actions: - Assemble all sign-offs, compliance artefacts, and rollback evidence. - Schedule and hold \u201cGo/No Go\u201d CAB or leadership review (with compliance present).</p> <p>Deliverables: - Signed-off release package - CAB \u201cGo/No-Go\u201d minutes/decision log - Documented deployment/rollback plan</p>"},{"location":"tech/release-process/#7-version-tagging-deployment-audit-logging","title":"7. Version Tagging, Deployment &amp; Audit Logging","text":"<p>Actions: - Tag and record release (SemVer) in source control and artifact management. - Deploy to production using CI/CD with full audit trails. - Enable monitoring, anomaly detection, and audit/alerting for new version.</p> <p>Deliverables: - Annotated Git tag and deployment records (timestamped, user-attributed) - Monitoring and security dashboards updated for new release</p>"},{"location":"tech/release-process/#8-post-deployment-monitoring-compliance-evidence","title":"8. Post-Deployment Monitoring &amp; Compliance Evidence","text":"<p>Actions: - Monitor system KPIs, anomaly logs, and automated legal/compliance/trade reports for 48\u201372h. - Provide active on-call rotation for incident/rollback response. - Archive all logs, event records, approvals, and notifications for audit.</p> <p>Deliverables: - Health, availability, and anomaly reporting dashboard - Emergency action/RCA report for incidents - Audit artefact package for retention</p>"},{"location":"tech/release-process/#9-customer-regulatory-notification-as-required","title":"9. Customer &amp; Regulatory Notification (as required)","text":"<p>Actions: - Communicate release changes with material regulatory or customer impact. - Archive all regulatory/customer notifications and delivery proofs.</p> <p>Deliverables: - Copies of all notifications - Notification send log (time, audience)</p>"},{"location":"tech/release-process/#10-retrospective-remediation-continuous-improvement","title":"10. Retrospective, Remediation, &amp; Continuous Improvement","text":"<p>Actions: - Hold and document a post-mortem including compliance and security. - Identify improvements, track action items, and edit process for next cycle.</p> <p>Deliverables: - Retrospective/post-mortem document with action log - Updated release-process.md - Evidence of assigned improvement actions</p>"},{"location":"tech/release-process/#references-to-update-for-each-release","title":"References (To Update for Each Release)","text":"<ul> <li>[Change/Incident Tracker/System]</li> <li>[Compliance Checklist Template]</li> <li>[Security &amp; Access Policy]</li> <li>[Test and QA Result References]</li> <li>[Support, On-call, and Escalation Contacts]</li> <li>[Regulatory Contact List]</li> </ul> <p>Every DealSphere SaaS release must result in the completion and archiving of all deliverables for full audit, compliance, and operational assurance.</p>"},{"location":"tech/sprint-demo-checklists/","title":"Sprint Demo Checklists","text":""},{"location":"tech/sprint-demo-checklists/#purpose","title":"Purpose","text":"<p>This document provides structured checklists for sprint demos to ensure alignment with Product Requirements Document (PRD) acceptance criteria and comprehensive feature validation.</p>"},{"location":"tech/sprint-demo-checklists/#pre-demo-checklist","title":"Pre-Demo Checklist","text":""},{"location":"tech/sprint-demo-checklists/#technical-preparation","title":"Technical Preparation","text":"<ul> <li>[ ] All demo features are deployed and functional in the demo environment</li> <li>[ ] Demo data is prepared and represents realistic use cases</li> <li>[ ] Backup plans are ready for any potential technical issues</li> <li>[ ] Screen sharing and presentation setup tested</li> <li>[ ] All team members have access to demo environment</li> </ul>"},{"location":"tech/sprint-demo-checklists/#feature-validation","title":"Feature Validation","text":"<ul> <li>[ ] Each demo feature maps to specific PRD acceptance criteria</li> <li>[ ] User flows have been tested end-to-end</li> <li>[ ] Edge cases and error scenarios have been considered</li> <li>[ ] Performance benchmarks meet acceptance criteria</li> <li>[ ] Security requirements are validated</li> </ul>"},{"location":"tech/sprint-demo-checklists/#documentation","title":"Documentation","text":"<ul> <li>[ ] Demo script prepared with clear talking points</li> <li>[ ] Feature documentation is up-to-date</li> <li>[ ] Known issues and limitations are documented</li> <li>[ ] Next sprint priorities are identified</li> </ul>"},{"location":"tech/sprint-demo-checklists/#during-demo-checklist","title":"During Demo Checklist","text":""},{"location":"tech/sprint-demo-checklists/#presentation-flow","title":"Presentation Flow","text":"<ul> <li>[ ] Start with sprint objectives and PRD alignment</li> <li>[ ] Demonstrate each feature against its acceptance criteria</li> <li>[ ] Show user journey from start to finish</li> <li>[ ] Highlight technical achievements and challenges overcome</li> <li>[ ] Present metrics and performance improvements</li> </ul>"},{"location":"tech/sprint-demo-checklists/#stakeholder-engagement","title":"Stakeholder Engagement","text":"<ul> <li>[ ] Collect feedback on each demonstrated feature</li> <li>[ ] Document questions and concerns raised</li> <li>[ ] Validate that acceptance criteria are met from stakeholder perspective</li> <li>[ ] Gather input on user experience and usability</li> </ul>"},{"location":"tech/sprint-demo-checklists/#post-demo-checklist","title":"Post-Demo Checklist","text":""},{"location":"tech/sprint-demo-checklists/#immediate-actions","title":"Immediate Actions","text":"<ul> <li>[ ] Document all feedback and action items</li> <li>[ ] Update PRD based on stakeholder input</li> <li>[ ] Identify any gaps between demo and acceptance criteria</li> <li>[ ] Plan remediation for any unmet criteria</li> </ul>"},{"location":"tech/sprint-demo-checklists/#sprint-retrospective","title":"Sprint Retrospective","text":"<ul> <li>[ ] Assess demo effectiveness and presentation quality</li> <li>[ ] Review alignment between delivered features and PRD</li> <li>[ ] Document lessons learned for future demos</li> <li>[ ] Update demo process based on feedback</li> </ul>"},{"location":"tech/sprint-demo-checklists/#planning-for-next-sprint","title":"Planning for Next Sprint","text":"<ul> <li>[ ] Prioritize feedback items for next sprint</li> <li>[ ] Update acceptance criteria based on demo insights</li> <li>[ ] Plan demo improvements for subsequent sprints</li> <li>[ ] Communicate outcomes to broader team</li> </ul>"},{"location":"tech/sprint-demo-checklists/#feature-specific-acceptance-criteria-validation","title":"Feature-Specific Acceptance Criteria Validation","text":""},{"location":"tech/sprint-demo-checklists/#for-each-demonstrated-feature","title":"For Each Demonstrated Feature","text":"<ul> <li>[ ] Functional Requirements: Does the feature work as specified in PRD?</li> <li>[ ] Performance Requirements: Does the feature meet performance benchmarks?</li> <li>[ ] User Experience: Does the feature provide intuitive user experience?</li> <li>[ ] Integration: Does the feature integrate properly with existing systems?</li> <li>[ ] Security: Are security requirements properly implemented?</li> <li>[ ] Scalability: Can the feature handle expected load and growth?</li> </ul>"},{"location":"tech/sprint-demo-checklists/#success-metrics","title":"Success Metrics","text":""},{"location":"tech/sprint-demo-checklists/#demo-quality-indicators","title":"Demo Quality Indicators","text":"<ul> <li>All PRD acceptance criteria demonstrated and validated</li> <li>Stakeholder satisfaction with feature completeness</li> <li>Clear alignment between technical implementation and business requirements</li> <li>Actionable feedback collected for continuous improvement</li> </ul>"},{"location":"tech/sprint-demo-checklists/#process-improvement-metrics","title":"Process Improvement Metrics","text":"<ul> <li>Time from feature completion to demo readiness</li> <li>Number of issues discovered during demo preparation</li> <li>Stakeholder engagement level during demos</li> <li>Speed of incorporating demo feedback into next sprint</li> </ul>"},{"location":"tech/sprint-demo-checklists/#notes-and-customization","title":"Notes and Customization","text":"<p>This checklist should be customized for each sprint based on: - Specific features being demonstrated - Stakeholder audience and their priorities - PRD acceptance criteria for the sprint scope - Any special requirements or constraints</p> <p>Remember: The goal is to ensure that every sprint demo effectively validates PRD acceptance criteria and provides clear value demonstration to stakeholders.</p>"},{"location":"tech/sprint-plan-phase-1/","title":"Phase 1 Sprint Plan (DLT-first, 6 Sprints, PRD-aligned)","text":""},{"location":"tech/sprint-plan-phase-1/#overview","title":"Overview","text":"<p>This document outlines the 6-sprint Phase 1 development plan for DealSphere Platform, following a DLT-first approach with R3 Corda 5 as the foundational distributed ledger technology. Each sprint is aligned with PRD requirements and includes specific objectives, deliverables, acceptance criteria, and decide-as-you-build decision points.</p>"},{"location":"tech/sprint-plan-phase-1/#sprint-1-foundation-core-dlt-infrastructure-sprint-11","title":"Sprint 1: Foundation &amp; Core DLT Infrastructure (Sprint 1.1)","text":""},{"location":"tech/sprint-plan-phase-1/#objectives","title":"Objectives","text":"<ul> <li>Establish core Corda 5 network foundation</li> <li>Implement basic deal state and flow structures</li> <li>Set up development and testing infrastructure</li> <li>Define core domain models for commercial real estate deals</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#deliverables","title":"Deliverables","text":"<ul> <li>Corda 5 network configuration (development, test environments)</li> <li>Core <code>DealState</code> contract and state implementation</li> <li>Basic deal creation and participant management flows</li> <li>Network map service configuration</li> <li>Development environment setup (Docker, database schemas)</li> <li>Unit test framework and initial test suite</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#acceptance-criteria-prd-references","title":"Acceptance Criteria (PRD References)","text":"<ul> <li>PRD \u00a74.1 Basic deal creation workflow functional</li> <li>PRD \u00a74.2 Participant invitation and onboarding process established</li> <li>PRD \u00a74.6 Core deal state transitions implemented</li> <li>AC \u00a76.1 Corda network successfully deploys and operates</li> <li>AC \u00a76.2 Deal states persist correctly across network nodes</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#decide-as-you-build-decision-points","title":"Decide-as-you-Build Decision Points","text":"<ol> <li>Database Schema Design: PostgreSQL vs. H2 for development/testing</li> <li>Network Topology: Hub-spoke vs. peer-to-peer participant connections</li> <li>State Serialization: Custom serializers vs. default Corda mechanisms</li> <li>Flow Exception Handling: Standardized error responses vs. custom exceptions</li> </ol>"},{"location":"tech/sprint-plan-phase-1/#sprint-2-deal-lifecycle-document-management-sprint-12","title":"Sprint 2: Deal Lifecycle &amp; Document Management (Sprint 1.2)","text":""},{"location":"tech/sprint-plan-phase-1/#objectives_1","title":"Objectives","text":"<ul> <li>Implement comprehensive deal lifecycle states</li> <li>Build secure document attachment system</li> <li>Establish role-based access control framework</li> <li>Create deal milestone tracking</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#deliverables_1","title":"Deliverables","text":"<ul> <li>Extended <code>DealState</code> with lifecycle phase transitions</li> <li>Document attachment flows and contracts</li> <li>Role-based permission system (Buyer, Seller, Agent, Legal)</li> <li>Deal milestone state management</li> <li>Document versioning and audit trail system</li> <li>Integration with external document storage (AWS S3/Azure Blob)</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#acceptance-criteria-prd-references_1","title":"Acceptance Criteria (PRD References)","text":"<ul> <li>PRD \u00a74.3 Document upload and secure sharing functional</li> <li>PRD \u00a74.4 Role-based access controls enforced</li> <li>PRD \u00a74.7 Deal milestone progression tracked accurately</li> <li>PRD \u00a74.8 Document version control and audit trails maintained</li> <li>AC \u00a76.3 Multi-party document access properly restricted</li> <li>AC \u00a76.4 Deal state transitions follow business rules</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#decide-as-you-build-decision-points_1","title":"Decide-as-you-Build Decision Points","text":"<ol> <li>Document Storage: On-chain attachment vs. off-chain storage with hashes</li> <li>Access Control: RBAC implementation in Corda flows vs. external service</li> <li>Document Versioning: Git-like versioning vs. simple incremental versions</li> <li>External Integration: Direct S3/Azure API vs. abstraction layer</li> </ol>"},{"location":"tech/sprint-plan-phase-1/#sprint-3-financial-integration-payment-processing-sprint-13","title":"Sprint 3: Financial Integration &amp; Payment Processing (Sprint 1.3)","text":""},{"location":"tech/sprint-plan-phase-1/#objectives_2","title":"Objectives","text":"<ul> <li>Implement secure payment processing workflows</li> <li>Build escrow and fund management system</li> <li>Create financial reporting and audit capabilities</li> <li>Establish compliance framework integration</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#deliverables_2","title":"Deliverables","text":"<ul> <li>Payment processing flows and contracts</li> <li>Escrow account management system</li> <li>Integration with banking/payment APIs (Stripe, ACH)</li> <li>Financial transaction logging and reporting</li> <li>Compliance checking workflows (AML/KYC)</li> <li>Multi-signature transaction support</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#acceptance-criteria-prd-references_2","title":"Acceptance Criteria (PRD References)","text":"<ul> <li>PRD \u00a74.5 Payment processing and escrow functionality operational</li> <li>PRD \u00a74.9 Financial reporting and audit capabilities established</li> <li>PRD \u00a74.10 Compliance framework integration functional</li> <li>AC \u00a76.5 Payment security and escrow protection verified</li> <li>AC \u00a76.6 Financial audit trail and reporting capabilities operational</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#decide-as-you-build-decision-points_2","title":"Decide-as-you-Build Decision Points","text":"<ol> <li>Payment Gateway: Stripe vs. traditional banking APIs vs. blockchain-native solutions</li> <li>Escrow Implementation: Smart contract vs. traditional escrow service integration</li> <li>Compliance Integration: Real-time vs. batch compliance checking</li> <li>Multi-sig Support: Corda-native vs. external wallet integration</li> </ol>"},{"location":"tech/sprint-plan-phase-1/#sprint-4-api-development-external-integrations-sprint-14","title":"Sprint 4: API Development &amp; External Integrations (Sprint 1.4)","text":""},{"location":"tech/sprint-plan-phase-1/#objectives_3","title":"Objectives","text":"<ul> <li>Develop comprehensive REST API layer</li> <li>Build external system integration capabilities</li> <li>Implement third-party service connectors</li> <li>Create webhook and notification systems</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#deliverables_3","title":"Deliverables","text":"<ul> <li>RESTful API with full CRUD operations</li> <li>API authentication and authorization system</li> <li>Third-party integration adapters (CRM, MLS, etc.)</li> <li>Webhook system for real-time notifications</li> <li>API documentation and developer portal</li> <li>Rate limiting and API security measures</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#acceptance-criteria-prd-references_3","title":"Acceptance Criteria (PRD References)","text":"<ul> <li>PRD \u00a74.1 API security and authentication functional</li> <li>AC \u00a76.7 API endpoints secure and properly authenticated</li> <li>AC \u00a76.8 Third-party integrations working reliably</li> <li>AC \u00a76.9 Webhook and notification systems operational</li> <li>AC \u00a76.10 API documentation complete and accessible</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#decide-as-you-build-decision-points_3","title":"Decide-as-you-Build Decision Points","text":"<ol> <li>API Framework: Spring Boot REST vs. GraphQL vs. gRPC</li> <li>Authentication: JWT vs. OAuth 2.0 vs. API keys</li> <li>Integration Pattern: Direct API calls vs. event-driven messaging</li> <li>Documentation: OpenAPI/Swagger vs. GraphQL introspection vs. custom portal</li> </ol>"},{"location":"tech/sprint-plan-phase-1/#sprint-5-user-interface-experience-sprint-15","title":"Sprint 5: User Interface &amp; Experience (Sprint 1.5)","text":""},{"location":"tech/sprint-plan-phase-1/#objectives_4","title":"Objectives","text":"<ul> <li>Develop responsive web application interface</li> <li>Implement user experience workflows</li> <li>Create dashboard and reporting views</li> <li>Build mobile-friendly interface components</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#deliverables_4","title":"Deliverables","text":"<ul> <li>React-based web application</li> <li>User dashboard with deal management interface</li> <li>Document viewer and management UI</li> <li>Mobile-responsive design implementation</li> <li>User notification and messaging system</li> <li>Accessibility compliance (WCAG 2.1)</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#acceptance-criteria-prd-references_4","title":"Acceptance Criteria (PRD References)","text":"<ul> <li>PRD \u00a74.1 User interface functional and secure</li> <li>PRD \u00a74.2 Deal management interface complete</li> <li>PRD \u00a74.3 Document management UI functional</li> <li>AC \u00a76.11 User interface meets design and usability standards</li> <li>AC \u00a76.12 Mobile responsiveness and accessibility compliance verified</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#decide-as-you-build-decision-points_4","title":"Decide-as-you-Build Decision Points","text":"<ol> <li>State Management: Redux vs. Context API vs. Zustand</li> <li>Component Library: Material-UI vs. Ant Design vs. custom components</li> <li>Mobile Strategy: PWA vs. native mobile app development</li> <li>Real-time Updates: Polling vs. WebSocket subscriptions</li> </ol>"},{"location":"tech/sprint-plan-phase-1/#sprint-6-integration-testing-deployment-sprint-16","title":"Sprint 6: Integration, Testing &amp; Deployment (Sprint 1.6)","text":""},{"location":"tech/sprint-plan-phase-1/#objectives_5","title":"Objectives","text":"<ul> <li>Complete end-to-end system integration</li> <li>Perform comprehensive testing and quality assurance</li> <li>Establish CI/CD pipelines and deployment automation</li> <li>Conduct security testing and performance optimization</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#deliverables_5","title":"Deliverables","text":"<ul> <li>End-to-end integration testing suite</li> <li>Automated CI/CD pipeline (GitHub Actions/Jenkins)</li> <li>Production deployment configuration (Kubernetes/Docker)</li> <li>Security testing and penetration test results</li> <li>Performance benchmarking and optimization</li> <li>Production monitoring and alerting setup</li> <li>User acceptance testing environment</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#acceptance-criteria-prd-references_5","title":"Acceptance Criteria (PRD References)","text":"<ul> <li>All PRD \u00a74.1-4.10 Complete feature set functional in production-like environment</li> <li>AC \u00a76.13 System passes security audit requirements</li> <li>AC \u00a76.14 Performance meets specified benchmarks</li> <li>AC \u00a76.15 Deployment process automated and reliable</li> <li>AC \u00a76.16 Monitoring and alerting systems operational</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#decide-as-you-build-decision-points_5","title":"Decide-as-you-Build Decision Points","text":"<ol> <li>Deployment Strategy: Blue-green vs. rolling vs. canary deployments</li> <li>Container Orchestration: Kubernetes vs. Docker Swarm vs. managed services</li> <li>Monitoring Stack: Prometheus/Grafana vs. ELK Stack vs. cloud-native solutions</li> <li>Security Scanning: SAST vs. DAST vs. comprehensive security platform integration</li> </ol>"},{"location":"tech/sprint-plan-phase-1/#cross-sprint-considerations","title":"Cross-Sprint Considerations","text":""},{"location":"tech/sprint-plan-phase-1/#risk-management","title":"Risk Management","text":"<ul> <li>Corda 5 Compatibility: Monitor for breaking changes in Corda releases</li> <li>Performance Bottlenecks: Regular performance testing throughout sprints</li> <li>Security Vulnerabilities: Continuous security scanning and assessment</li> <li>Integration Complexity: Plan for additional buffer time in Sprint 6</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#dependencies","title":"Dependencies","text":"<ul> <li>External payment gateway API availability (Sprint 3)</li> <li>Document storage service selection and setup (Sprint 2)</li> <li>SSL certificate and domain management (Sprint 6)</li> <li>Third-party compliance service integration (Sprint 3)</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#success-metrics","title":"Success Metrics","text":"<ul> <li>Sprint velocity and burndown tracking</li> <li>Code coverage maintaining &gt;80% throughout</li> <li>Zero critical security vulnerabilities in production</li> <li>API response times &lt;500ms for 95th percentile</li> <li>User acceptance testing passing rate &gt;95%</li> </ul>"},{"location":"tech/sprint-plan-phase-1/#links","title":"Links","text":""},{"location":"tech/sprint-plan-phase-1/#related-documentation","title":"Related Documentation","text":"<ul> <li>Phase 1 PRD - Product Requirements Document with full feature specifications</li> <li>Sprint\u2192Functional Test Mapping - Mapping of sprint deliverables to test coverage</li> </ul> <p>Document Version: 1.0 Last Updated: August 13, 2025 Next Review: End of Sprint 2</p>"},{"location":"tech/technology-landscape/","title":"DealSphere Technology Landscape (Phase 1)","text":"<p>This document applies only to Phase 1 implementation as defined in PRD 4.1\u20134.10 and Acceptance Criteria \u00a76.</p>"},{"location":"tech/technology-landscape/#agreed-technology-decisions-phase-1-per-prd-41410-and-ac-6","title":"Agreed Technology Decisions (Phase 1, per PRD 4.1\u20134.10 and AC \u00a76)","text":"<ul> <li>R3 Corda 5 (as blockchain/DLT)</li> <li>Java 17 (backend runtime)</li> <li>React + TypeScript (frontend)</li> <li>Open source only (no proprietary dependencies)</li> <li>Microservices from the start (no monolith allowed)</li> <li>gRPC for service-to-service communication</li> <li>GraphQL for external API, implemented using Apollo Router/Gateway</li> <li>DevOps orchestration: Docker Compose for all environments now; Kubernetes is explicitly deferred/out-of-scope</li> </ul>"},{"location":"tech/technology-landscape/#phase-1-feature-mapping-prd-41410","title":"Phase 1 Feature Mapping (PRD 4.1\u20134.10)","text":"<ul> <li>4.1 Platform &amp; Security (RBAC, class segregation, DLT audit)</li> <li>4.2 User &amp; Company Management (profile creation, authentication)</li> <li>4.3 Deal Creation &amp; Lifecycle (create, update, status management)</li> <li>4.4 Deal Discovery &amp; Search (search, filters, recommendations)</li> <li>4.5 Deal Details &amp; Viewing (detailed views, documentation)</li> <li>4.6 Notifications &amp; Alerts (system notifications, user preferences)</li> <li>4.7 User Dashboard (personal deal overview, activity)</li> <li>4.8 Company Dashboard (company-level analytics, management)</li> <li>4.9 Administrative Functions (system admin, user management)</li> <li>4.10 System Configuration (settings, integrations, maintenance)</li> </ul>"},{"location":"tech/technology-landscape/#prd-tech-crosswalk-phase-1","title":"PRD \u2194 Tech Crosswalk (Phase 1)","text":"<ul> <li>4.1 Platform &amp; Security</li> <li>Responsible Service(s): Security Service, Audit Service</li> <li>Key Tech: Corda 5 (DLT audit trail), Java 17 services, gRPC inter-service auth, GraphQL via Apollo Router (gateway security), Postgres (RBAC data)</li> <li> <p>Acceptance Criteria: \u00a76.1 Security Requirements</p> </li> <li> <p>4.2 User &amp; Company Management</p> </li> <li>Responsible Service(s): User Management Service, Company Service</li> <li>Key Tech: Java 17 services, gRPC (service communication), GraphQL via Apollo Router (API), Postgres (user/company data)</li> <li> <p>Acceptance Criteria: \u00a76.2 User Management Requirements</p> </li> <li> <p>4.3 Deal Creation &amp; Lifecycle</p> </li> <li>Responsible Service(s): Deal Service, Workflow Service</li> <li>Key Tech: Corda 5 (deal state management), Java 17 services, gRPC, GraphQL via Apollo Router, Postgres (deal metadata), MinIO (deal documents)</li> <li> <p>Acceptance Criteria: \u00a76.3 Deal Management Requirements</p> </li> <li> <p>4.4 Deal Discovery &amp; Search</p> </li> <li>Responsible Service(s): Search Service, Recommendation Service</li> <li>Key Tech: Java 17 services, gRPC, GraphQL via Apollo Router, Postgres (search indices)</li> <li> <p>Acceptance Criteria: \u00a76.4 Search &amp; Discovery Requirements</p> </li> <li> <p>4.5 Deal Details &amp; Viewing</p> </li> <li>Responsible Service(s): Deal Service, Document Service</li> <li>Key Tech: Java 17 services, gRPC, GraphQL via Apollo Router, Postgres (deal data), MinIO (document storage)</li> <li> <p>Acceptance Criteria: \u00a76.5 Deal Viewing Requirements</p> </li> <li> <p>4.6 Notifications &amp; Alerts</p> </li> <li>Responsible Service(s): Notification Service, Event Service</li> <li>Key Tech: Java 17 services, gRPC (event distribution), GraphQL via Apollo Router, Postgres (notification preferences)</li> <li> <p>Acceptance Criteria: \u00a76.6 Notification Requirements</p> </li> <li> <p>4.7 User Dashboard</p> </li> <li>Responsible Service(s): Dashboard Service, Analytics Service</li> <li>Key Tech: Java 17 services, gRPC, GraphQL via Apollo Router, Postgres (dashboard data)</li> <li> <p>Acceptance Criteria: \u00a76.7 User Dashboard Requirements</p> </li> <li> <p>4.8 Company Dashboard</p> </li> <li>Responsible Service(s): Dashboard Service, Analytics Service, Company Service</li> <li>Key Tech: Java 17 services, gRPC, GraphQL via Apollo Router, Postgres (company analytics)</li> <li> <p>Acceptance Criteria: \u00a76.8 Company Dashboard Requirements</p> </li> <li> <p>4.9 Administrative Functions</p> </li> <li>Responsible Service(s): Admin Service, User Management Service</li> <li>Key Tech: Java 17 services, gRPC, GraphQL via Apollo Router, Postgres (admin data)</li> <li> <p>Acceptance Criteria: \u00a76.9 Administrative Requirements</p> </li> <li> <p>4.10 System Configuration</p> </li> <li>Responsible Service(s): Configuration Service, Integration Service</li> <li>Key Tech: Java 17 services, gRPC, GraphQL via Apollo Router, Postgres (config data)</li> <li>Acceptance Criteria: \u00a76.10 Configuration Requirements</li> </ul>"},{"location":"tech/technology-landscape/#architecture-implementation","title":"Architecture Implementation","text":""},{"location":"tech/technology-landscape/#service-architecture","title":"Service Architecture","text":"<ul> <li>Microservices pattern with domain-driven boundaries</li> <li>gRPC for internal service-to-service communication</li> <li>GraphQL API gateway using Apollo Router for external clients</li> <li>Database per service pattern with PostgreSQL</li> <li>R3 Corda 5 for blockchain/DLT functionality</li> </ul>"},{"location":"tech/technology-landscape/#frontend-architecture","title":"Frontend Architecture","text":"<ul> <li>Component-based React application with TypeScript</li> <li>GraphQL client integration for API consumption</li> <li>Responsive design for cross-device compatibility</li> <li>Open source UI libraries and components only</li> </ul>"},{"location":"tech/technology-landscape/#development-operations","title":"Development &amp; Operations","text":"<ul> <li>Local Development: Docker Compose environment setup</li> <li>Runtime: Java 17 for backend services</li> <li>Database: PostgreSQL with service-specific schemas</li> <li>Version Control: Git-based workflow with feature branching</li> <li>Testing: Unit and integration testing frameworks</li> <li>Documentation: API documentation, setup guides, ADRs</li> </ul>"},{"location":"tech/technology-landscape/#acceptance-criteria-alignment-prd-section-6","title":"Acceptance Criteria Alignment (PRD Section 6)","text":"<p>All technical implementations must satisfy the acceptance criteria defined in PRD Section 6, ensuring:</p> <ul> <li>Functional requirements are met for each feature (4.1\u20134.10)</li> <li>Non-functional requirements (performance, security, usability) are addressed</li> <li>User experience standards are maintained</li> <li>System reliability and availability targets are achieved</li> <li>Open source compliance and microservices architecture maintained</li> </ul>"},{"location":"tech/technology-landscape/#decide-as-you-build-phase-1-operating-model","title":"Decide-as-you-build (Phase 1 operating model)","text":"<ul> <li>Technology decisions are made incrementally during implementation</li> <li>Each feature team has autonomy within agreed architectural boundaries</li> <li>Decision points are documented as Architecture Decision Records (ADRs)</li> <li>Regular architecture reviews ensure consistency across services</li> <li>Rapid prototyping and proof-of-concepts inform technology choices</li> <li>Cross-team collaboration on shared infrastructure and patterns</li> <li>Emphasis on pragmatic solutions that deliver Phase 1 requirements</li> </ul>"},{"location":"tech/technology-landscape/#open-decisions-phase-1","title":"Open Decisions (Phase 1)","text":""},{"location":"tech/technology-landscape/#database-schema-migration-strategy","title":"Database Schema Migration Strategy","text":"<ul> <li>Current choice: Flyway migration scripts</li> <li>Deferred alternative(s): Liquibase, custom migration tooling</li> <li>Revisit trigger: Integration complexity with microservices architecture</li> </ul>"},{"location":"tech/technology-landscape/#frontend-state-management","title":"Frontend State Management","text":"<ul> <li>Current choice: React Context API + useReducer</li> <li>Deferred alternative(s): Redux Toolkit, Zustand, Jotai</li> <li>Revisit trigger: State complexity exceeds Context API capabilities</li> </ul>"},{"location":"tech/technology-landscape/#api-rate-limiting-throttling","title":"API Rate Limiting &amp; Throttling","text":"<ul> <li>Current choice: Application-level rate limiting in Apollo Router</li> <li>Deferred alternative(s): Redis-based distributed rate limiting, API gateway solutions</li> <li>Revisit trigger: Performance bottlenecks or security requirements</li> </ul>"},{"location":"tech/technology-landscape/#container-orchestration","title":"Container Orchestration","text":"<ul> <li>Current choice: Docker Compose (explicitly deferred: Kubernetes)</li> <li>Deferred alternative(s): Kubernetes, Docker Swarm, cloud-native services</li> <li>Revisit trigger: Scaling beyond single-node deployments</li> </ul>"},{"location":"tech/technology-landscape/#logging-monitoring-strategy","title":"Logging &amp; Monitoring Strategy","text":"<ul> <li>Current choice: Structured logging with JSON format, basic metrics collection</li> <li>Deferred alternative(s): ELK stack, Prometheus/Grafana, cloud monitoring solutions</li> <li>Revisit trigger: Production deployment readiness requirements</li> </ul>"},{"location":"tech/technology-landscape/#authentication-authorization-implementation","title":"Authentication &amp; Authorization Implementation","text":"<ul> <li>Current choice: JWT tokens with role-based access control</li> <li>Deferred alternative(s): OAuth 2.0 integration, SAML, external identity providers</li> <li>Revisit trigger: Enterprise customer requirements or security audit findings</li> </ul> <p>This document is a living specification focused on Phase 1 implementation. All architectural decisions should be documented as ADRs in the <code>docs/adr/</code> directory.</p>"}]}